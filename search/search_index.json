{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Evergreen","text":"<p>Evergreen is a PowerShell module that returns the latest version and download links for a set of common Windows applications.</p>"},{"location":"#trust","title":"Trust","text":"<p>The goal of this project is to provide trust. Evergreen executes in your environment and queries application vendor sources only. To find application versions, Evergreen queries the same update APIs used by the application to find new updates or a source owned by the vendor. This means that you can trust what Evergreen returns because there is no middle man.</p>"},{"location":"#why","title":"Why","text":"<p>Evergreen helps solve several challenges including:</p> <ul> <li>Finding the latest version of an application to compare against a version already installed or downloaded</li> <li>Finding the URL for the latest application installer to download it for local installation (via scripted install or in a gold image) or deployment to target machines (e.g. Intune or ConfigMgr)</li> </ul> <p>Evergreen helps to automate software deployments. These could be:</p> <ul> <li>Gold image creation with Hashicorp Packer - images can be created with the latest version of a set of applications</li> <li>Import applications into the Microsoft Deployment Toolkit, Configuration Manager or Microsoft Intune - stay current with the latest versions of applications</li> <li>Validating or auditing a Windows image or machine for installed application versions</li> <li>Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it for later use</li> <li>Submitting manifests to <code>Winget</code> or <code>Chocolatey</code> or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions</li> </ul> <p>There are several community and commercial solutions that manage application deployment and updates already. This module isn't intended to compete against those, and Evergreen isn't intended to be a fully featured package manager for Windows. Evergreen can be complementary to 3<sup>rd</sup> party solutions</p>"},{"location":"#functions","title":"Functions","text":"<p>Primary functions in Evergreen are:</p> <ul> <li><code>Get-EvergreenApp</code> - returns details of the latest release of an application including the version number and download URL for supported applications. Runs in your environment</li> <li><code>Save-EvergreenApp</code> - simplifies downloading application installers returned from <code>Get-EvergreenApp</code></li> <li><code>Get-EvergreenEndpointFromApi</code> - returns details of the latest release of an application including the version number and download URL from the Evergreen API</li> <li><code>Find-EvergreenApp</code> - lists applications supported by the module</li> <li><code>Test-EvergreenApp</code> - tests that the URIs returned by <code>Get-EvergreenApp</code> are valid</li> <li><code>New-EvergreenLibrary</code> - creates a new Evergreen library for downloading and maintaining multiple versions of application installers</li> <li><code>Start-EvergreenLibraryUpdate</code> - updates the application installers and database of apps stored in an Evergreen library</li> <li><code>Get-EvergreenAppFromLibrary</code> - returns details of applications stored in an Evergreen library</li> <li><code>Export-EvergreenApp.ps1</code> - exports the application version information returned from <code>Get-EvergreenApp</code> to a JSON file</li> <li><code>Get-EvergreenEndpointFromApi</code> - returns the list of endpoints used by Evergreen that can be imported into a firewall or proxy server allow list</li> </ul> <p>Greentech icon by Icons8</p>"},{"location":"api/","title":"How to use the Evergreen API","text":"<p>Warning</p> <p>The Evergreen API is provided free of charge - please don't abuse it. The API is currently provided by the free tier of Cloudflare Workers which provides up to 100,000 total requests per day. The API is intended for development purposes only and not for use with distributed endpoints.</p> <p>If you encounter issues or would prefer to ensure data is only sourced from the application vendor, use <code>Get-EvergreenApp</code>.</p> <p>Evergreen's difference to other methods of finding and installing applications, is that Evergreen queries only official vendor sources when you use <code>Get-EvergreenApp</code>. This ensures that the information returned can be trusted because it comes from the vendor and is not crowd sourced.</p> <p>Evergreen supports an API that returns the same application version information as <code>Get-EvergreenApp</code>. The API supports the same applications as the Evergreen module because data is sourced via the module. The API runs on Cloudflare Workers with data that is updated every 8 hours.</p> <p>Full documentation for the API is available here: evergreen-api; however, if you're familiar with <code>Get-EvergreenApp</code> in the Evergreen module, the API should be easy to use.</p> <p>The data that is returned by the Evergreen API is maintained and updated via the Evergreen App Tracker. Use the App Tracker to review the API data.</p>"},{"location":"api/#get-evergreenappfromapi","title":"Get-EvergreenAppFromApi","text":"<p>Evergreen includes the <code>Get-EvergreenAppFromApi</code> function that is used in much the same way as <code>Get-EvergreenApp</code>. This function is simpler than using <code>Invoke-RestMethod</code>, and it automatically filters for available applications. For example, to query the API for application data for Microsoft Edge, use:</p> <pre><code>PS C:\\&gt; Get-EvergreenAppFromApi -Name \"MicrosoftEdge\"\n\nVersion      : 89.0.774.76\nPlatform     : Windows\nChannel      : Stable\nRelease      : Enterprise\nArchitecture : x64\nDate         : 12/4/2021\nHash         : 9E7A29B4BE6E1CD707F80B4B79008F19D2D5DD5C774D317A493EC6DE5BE0B7D7\nURI          : https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/4d12f620-174c-4259-85e6-8a80ea45ff10/MicrosoftEdgeEnterpriseX64.msi\n</code></pre> <p>This returns the current version and download URLs for Microsoft Edge using the official Microsoft Edge update API at https://edgeupdates.microsoft.com/api/products.</p> <p>Just as with <code>Get-EvergreenApp</code>, the output can be filtered for the specific application installer with <code>Where-Object</code>. The example below returns the current version and download URL for the Stable channel of the 64-bit Enterprise ring of Microsoft Edge.</p> <pre><code>Get-EvergreenAppFromApi -Name \"MicrosoftEdge\" | Where-Object { $_.Architecture -eq \"x64\" -and $_.Channel -eq \"Stable\" -and $_.Release -eq \"Enterprise\" }\n</code></pre>"},{"location":"api/#get-evergreenendpointfromapi","title":"Get-EvergreenEndpointFromApi","text":"<p>Evergreen includes the <code>Get-EvergreenEndpointFromApi</code> function that returns the full list of vendor endpoints used by Evergreen, enabling the output to be used for auditing or firewall rules etc.</p> <pre><code>Get-EvergreenEndpointFromApi\n\nApplication                          Endpoints                                                                                                      Ports\n-----------                          ---------                                                                                                      -----\n1Password                            {1password.com, app-updates.agilebits.com, downloads.1password.com, cdn.agilebits.com}                         {443}\n1Password7                           {1password.com, c.1password.com}                                                                               {443}\n1PasswordCLI                         {app-updates.agilebits.com, cache.agilebits.com, developer.1password.com}                                      {443}\n7Zip                                 {api.github.com, www.7-zip.org, github.com}                                                                    {443}\n7ZipZS                               {api.github.com, mcmilk.de, github.com}                                                                        {443}\nAdobeAcrobat                         {ardownload2.adobe.com, armmf.adobe.com, helpx.adobe.com}                                                      {443}\nAdobeAcrobatDC                       {ardownload2.adobe.com, rdc.adobe.io, www.adobe.com}                                                           {443}\nAdobeAcrobatProStdDC                 {helpx.adobe.com, rdc.adobe.io, trials.adobe.com}                                                              {443}\nAdobeAcrobatReaderDC                 {acrobat.adobe.com, rdc.adobe.io, ardownload2.adobe.com}                                                       {443}\n</code></pre>"},{"location":"api/#custom-usage","title":"Custom Usage","text":"<p>The API has only two endpoints that return data in JSON format:</p> <ul> <li><code>/apps</code> - returns the list of supported applications</li> <li><code>/app/{appName}</code> - returns data for a specified application</li> <li><code>/endpoints/versions</code> - returns the list of vendor endpoints used by Evergreen to query details for an application (i.e. used by <code>Get-EvergrenApp</code>)</li> <li><code>/endpoints/downloads</code> - returns the list of vendor endpoints used for downloads  (i.e. used by <code>Save-EvergrenApp</code>)</li> </ul> <p>Note</p> <p>The API requires a custom user agent. Default user agents for PowerShell, curl, wget, browers etc. are blocked to prevent random requests and abuse of the API. Please specify a user agent that identifies your usage or organisation to assist with troubleshooting.</p> <p>Return the list of supported applications from <code>/apps</code> - this is the equivalent of running <code>Find-EvergreenApp</code>:</p> <pre><code>PS C:\\&gt; Invoke-RestMethod -Uri \"https://evergreen-api.stealthpuppy.com/apps\" -UserAgent \"My custom UA\"\n</code></pre> <p>Details for a specific application are returned from the <code>/app/{appName}</code> endpoint along with the name of the supported application.</p> <pre><code>PS C:\\&gt; Invoke-RestMethod -Uri \"https://evergreen-api.stealthpuppy.com/app/MicrosoftEdge\" -UserAgent \"My custom UA\"\n</code></pre> <p>Data returned from the API can be  filtered and sent to <code>Save-EvergreenApp</code> to download binaries:</p> <pre><code>$Edge = Invoke-RestMethod -Uri \"https://evergreen-api.stealthpuppy.com/app/MicrosoftEdge\"\n$Edge | Where-Object { $_.Architecture -eq \"x64\" -and $_.Channel -eq \"Stable\" -and $_.Release -eq \"Enterprise\" } | Save-EvergreenApp -Path \"C:\\Apps\"\n</code></pre> <p>If an unknown application is passed to the <code>/app</code> endpoint, an error is returned:</p> <pre><code>PS C:\\&gt; Invoke-RestMethod -Uri \"https://evergreen-api.stealthpuppy.com/app/UnsupportedApp\" -UserAgent \"My custom UA\"\nInvoke-RestMethod: {message: \"Application not found. List all apps for valid application names. Application names are case sensitive.}\n</code></pre>"},{"location":"apps/","title":"374 Supported applications","text":"<p>Evergreen <code>2508.2431</code> supports the following applications:</p> Name Application Link 1Password 1Password https://1password.com/ 1Password7 1Password 7 https://1password.com/ 1PasswordCLI 1Password CLI https://developer.1password.com/docs/cli/ 7Zip 7-Zip https://www.7-zip.org/ 7ZipZS 7-Zip ZS https://mcmilk.de/projects/7-Zip-zstd/ AdobeAcrobat Adobe Acrobat updates https://helpx.adobe.com/au/enterprise/using/deploying-acrobat.html AdobeAcrobatDC Adobe Acrobat DC updates https://www.adobe.com/devnet-docs/acrobatetk/tools/ReleaseNotesDC/index.html AdobeAcrobatProStdDC Adobe Acrobat DC Pro and Standard https://helpx.adobe.com/acrobat/kb/acrobat-dc-downloads.html AdobeAcrobatReaderDC Adobe Acrobat Reader DC https://acrobat.adobe.com/us/en/acrobat/pdf-reader.html AdobeBrackets Adobe Brackets http://brackets.io/ AdobeConnect Adobe Connect meeting application https://www.adobe.com/products/adobeconnect.html AdobeDigitalEditions Adobe Digital Editions https://www.adobe.com/solutions/ebook/digital-editions.html AdoptiumTemurin11 Adoptium Temurin 11 https://adoptium.net/ AdoptiumTemurin16 Adoptium Temurin 16 https://adoptium.net/ AdoptiumTemurin17 Adoptium Temurin 17 https://adoptium.net/ AdoptiumTemurin18 Adoptium Temurin 18 https://adoptium.net/ AdoptiumTemurin19 Adoptium Temurin 19 https://adoptium.net/ AdoptiumTemurin20 Adoptium Temurin 20 https://adoptium.net/ AdoptiumTemurin21 Adoptium Temurin 21 https://adoptium.net/ AdoptiumTemurin22 Adoptium Temurin 22 https://adoptium.net/ AdoptiumTemurin8 Adoptium Temurin 8 https://adoptium.net/ AdvancedInstaller Advanced Installer https://www.advancedinstaller.com AirtameApp Airtame App https://airtame.com/ AkeoRufus Akeo Rufus https://rufus.ie/ AkeoRufusAlt Akeo Rufus (alternate method) https://rufus.ie ALMToolkit ALM Toolkit https://github.com/microsoft/Analysis-Services AmazonCorretto11 Amazon Corretto 11 https://aws.amazon.com/corretto/ AmazonCorretto15 Amazon Corretto 15 https://aws.amazon.com/corretto/ AmazonCorretto16 Amazon Corretto 16 https://aws.amazon.com/corretto/ AmazonCorretto17 Amazon Corretto 17 https://aws.amazon.com/corretto/ AmazonCorretto20 Amazon Corretto 20 https://aws.amazon.com/corretto/ AmazonCorretto21 Amazon Corretto 21 https://aws.amazon.com/corretto/ AmazonCorretto22 Amazon Corretto 22 https://aws.amazon.com/corretto/ AmazonCorretto8 Amazon Corretto 8 https://aws.amazon.com/corretto/ Anaconda Anaconda https://www.anaconda.com/ AnalogDevicesLTspice Analog Devices LTspice https://www.analog.com/en/resources/design-tools-and-calculators/ltspice-simulator.html Anki Anki https://github.com/ankitects/anki/ AppVentiX AppVentiX https://appventix.com/ ArtifexGhostscript Artifex Ghostscript https://www.ghostscript.com/ AtlassianSourcetree Atlassian Sourcetree https://www.sourcetreeapp.com/ Audacity Audacity https://www.audacityteam.org/ AutoDarkMode Windows Auto Dark Mode https://github.com/AutoDarkMode/Windows-Auto-Night-Mode AutodeskFusion360 Autodesk Fusion 360 https://www.autodesk.com/products/fusion-360/overview AutoIt AutoIt Scripting Language https://www.autoitscript.com/site/autoit/ AWSAppStreamClient AWS AppStream 2.0 Client https://docs.aws.amazon.com/en_us/appstream2/latest/developerguide/client-release-versions.html AWSCLI AWS CLI https://github.com/aws/aws-cli/ AWSSAMCLI AWS SAM CLI https://github.com/aws/aws-sam-cli/ AWSSMP AWS Session Manager Plugin https://github.com/aws/session-manager-plugin AzulZulu11 Azul Zulu 11 https://www.azul.com/downloads/#zulu AzulZulu17 Azul Zulu 17 https://www.azul.com/downloads/#zulu AzulZulu21 Azul Zulu 21 https://www.azul.com/downloads/#zulu AzulZulu8 Azul Zulu 8 https://www.azul.com/downloads/#zulu BeekeeperStudio Beekeeper Studio https://www.beekeeperstudio.io/ BellSoftLibericaJDK11 BellSoft Liberica JDK 11 LTS https://bell-sw.com/libericajdk/ BellSoftLibericaJDK17 BellSoft Liberica JDK 17 LTS https://bell-sw.com/libericajdk/ BellSoftLibericaJDK20 BellSoft Liberica JDK 20 https://bell-sw.com/libericajdk/ BellSoftLibericaJDK21 BellSoft Liberica JDK 21 https://bell-sw.com/libericajdk/ BellSoftLibericaJDK22 BellSoft Liberica JDK 22 https://bell-sw.com/libericajdk/ BellSoftLibericaJDK23 BellSoft Liberica JDK 23 https://bell-sw.com/libericajdk/ BellSoftLibericaJDK8 BellSoft Liberica JDK 8 LTS https://bell-sw.com/libericajdk/ BISF Base Image Script Framework https://eucweb.com/ BitwardenDesktop Bitwarden Desktop https://bitwarden.com/ BlenderLauncher Blender Launcher https://dotbow.github.io/Blender-Launcher/ BlueJ BlueJ https://www.bluej.org/ CendioThinLinc Cendio ThinLinc https://www.cendio.com/ CitrixShareFile Citrix ShareFile for Windows https://www.citrix.com/downloads/sharefile/clients-and-plug-ins/citrix-files-for-windows.html CitrixWorkspaceApp Citrix Workspace app https://www.citrix.com/downloads/workspace-app/ ClarivateEndnote Clarivate EndNote https://www.endnote.com/ CodelerityApacheNetBeans Codelerity Apache NetBeans https://www.codelerity.com/netbeans/ ConnectionExperienceIndicator Connection Experience Indicator https://bramwolfs.com/2020/03/11/connection-experience-indicator-for-rds-wvd/ ControlUpAgent ControlUp Agent https://www.controlup.com/products/controlup/agent/ ControlUpConsole ControlUp Console https://www.controlup.com/products/controlup/management/ ControlUpMonitor ControlUp Monitor Server https://www.controlup.com/products/controlup/agent/ ControlUpRemoteDX ControlUp Remote DX Plugins https://www.controlup.com/products/controlup/agent/ Cyberduck iterate GmbH Cyberduck https://cyberduck.io/ DAXStudio DAX Studio https://github.com/DaxStudio/DaxStudio DBBrowserforSQLite DB Browser for SQLite https://sqlitebrowser.org/ dbeaver dbeaver https://github.com/dbeaver/dbeaver DebaucheeBarrier Debauchee Barrier https://github.com/debauchee/barrier deviceTRUST deviceTRUST https://devicetrust.com/ DevToys DevToys https://devtoys.app/ dnGrep dnGrep https://dngrep.github.io/ DockerCompose Docker Compose https://github.com/docker/compose DockerDesktop Docker Desktop https://www.docker.com/products/docker-desktop/ DoubleCommander Double Commander https://github.com/doublecmd/doublecmd/ DrataAgent Drata Agent https://help.drata.com/en/articles/5002305-installing-the-drata-agent-via-windows-os DropboxDesktopApp Dropbox desktop app https://www.dropbox.com/desktop DruvainSyncClient Druva inSync Client https://docs.druva.com/005_inSync_Client eduVPN eduVPN https://app.eduvpn.org/ EgnyteDesktopApp Egnyte Desktop App https://www.egnyte.com/solutions/sharing-collaboration Elgato4KCaptureUtility Elgato 4K Capture Utility https://help.elgato.com/hc/en-us/articles/360027963752-Elgato-4K-Capture-Utility-Software-Interface ElgatoAudioEffects Elgato Audio Effects https://www.elgato.com/ ElgatoCameraHub Elgato Camera Hub https://help.elgato.com/hc/en-us/sections/360013950972-Elgato-Camera-Hub-Software ElgatoControlCenter Elgato Control Center https://help.elgato.com/hc/en-us/sections/360004115951-Elgato-Control-Center-Software ElgatoEpocCam Elgato EpocCam https://www.elgato.com/us/en/s/epoccam ElgatoGameCapture Elgato Game Capture https://help.elgato.com/hc/en-us/sections/360004111092-Elgato-Game-Capture-HD-Software ElgatoStreamDeck Elgato Stream Deck https://www.elgato.com/us/en/s/welcome-to-stream-deck ElgatoVideoCapture Elgato Video Capture https://www.elgato.com/us/en/p/video-capture ElgatoWaveLink Elgato Wave Link https://help.elgato.com/hc/en-us/articles/360044566172-Wave-Link-First-Time-Setup-for-Windows ESETEndpointAntivirus ESET Endpoint Antivirus https://www.eset.com/au/business/solutions/endpoint-protection/ ESETEndpointSecurity ESET Endpoint Security https://www.eset.com/au/business/solutions/endpoint-protection/ ESETFullDiskEncryption ESET Full Disk Encryption https://www.eset.com/int/business/extended-protection-with-full-disk-encryption/ ESETInspectConnector ESET Inspect Connector https://www.eset.com/int/business/download/inspect/ ESETPROTECTServer ESET Endpoint Antivirus https://www.eset.com/au/business/solutions/endpoint-protection/ ESETSecureAuthentication ESET Secure Authentication https://www.eset.com/au/business/download/secure-authentication/ ESETServerSecurity ESET Server Security https://www.eset.com/int/business/solutions/file-server-security/ FigmaDesktop Figma Desktop https://www.figma.com/ Flameshot Flameshot https://flameshot.org/ Fork Dan Pristupov Fork https://www.fork.dev FoxitPDFEditor Foxit PDF Editor https://www.foxit.com/pdf-editor/ FoxitReader Foxit PDF Reader https://www.foxitsoftware.com/pdf-reader/ FreedomScientificFusion Freedom Scientific Fusion https://www.freedomscientific.com/products/software/fusion/ FreedomScientificJAWS Freedom Scientific JAWS https://www.freedomscientific.com/products/software/jaws/ FreedomScientificZoomText Freedom Scientific ZoomText https://www.freedomscientific.com/products/software/zoomtext/ FreeFem FreeFem https://freefem.org/ GeekSoftwarePDF24Creator Geek Software PDF24 Creator https://tools.pdf24.org/en/creator/ GeoGebraClassic GeoGebra Classic https://www.geogebra.org Gephi Gephi https://gephi.org/ GhislerTotalCommander Ghisler TotalCommander https://www.ghisler.com/ Gimp GIMP https://www.gimp.org/ GitExtensions Git Extensions https://github.com/gitextensions/gitextensions GitForWindows Git for Windows https://gitforwindows.org/ GitHubAtom GitHub Atom https://atom.io/ GitHubDesktop GitHub Desktop https://desktop.github.com/ GitHubRelease GitHub release https://github.com/ GoogleChrome Google Chrome Enterprise https://cloud.google.com/chrome-enterprise/browser/download/ GoogleChromeDriver Google Chrome Driver https://googlechromelabs.github.io/chrome-for-testing/ GoogleChromeForTesting Google Chrome for Testing https://googlechromelabs.github.io/chrome-for-testing/ GoogleChromeHeadlessShell Google Chrome Headless Shell https://googlechromelabs.github.io/chrome-for-testing/ GoogleDrive Google Drive https://support.google.com/drive/answer/7329379 GoToConnect GoTo Connect https://support.goto.com/connect/help/what-are-the-download-links-for-it-admin-deployments GoToMeeting GoTo Meeting https://support.goto.com/meeting/help/install-via-msi-windows GoToOpener GoTo Opener https://support.goto.com/meeting/help/what-is-the-multi-user-launcher-opener-msi Gpg4win Gpg4win https://www.gpg4win.org/ GrafanaAgent Grafana Agent https://grafana.com/docs/agent/ Greenshot Greenshot https://getgreenshot.org/ gretl gretl http://gretl.sourceforge.net/ gsudo gsudo https://gerardog.github.io/gsudo Handbrake Handbrake https://handbrake.fr/ HashicorpBoundary Hashicorp Boundary https://www.boundaryproject.io/ HashicorpConsul Hashicorp Consul https://www.consul.io/ HashicorpNomad Hashicorp Nomad https://www.nomadproject.io/ HashicorpPacker Hashicorp Packer https://packer.io/ HashicorpTerraform Hashicorp Terraform https://www.terraform.io/ HashicorpVault Hashicorp Vault https://www.vaultproject.io/ HashicorpWaypoint Hashicorp Waypoint https://www.waypointproject.io/ ImageGlass ImageGlass https://imageglass.org/ ImageMagickStudioImageMagick ImageMagick Studio ImageMagick https://imagemagick.org/ JabraDirect JabraDirect https://www.jabra.com/software-and-services/jabra-direct JamTreeSizeFree JAM Software TreeSize Free https://www.jam-software.com/treesize_free/ JamTreeSizeProfessional JAM Software TreeSize Professional https://www.jam-software.com/treesize/ JASP JASP https://jasp-stats.org/ JeremyMainGPUProfiler JeremyMain GPUProfiler https://github.com/JeremyMain/GPUProfiler JetBrainsCLion JetBrains CLion https://www.jetbrains.com/clion JetBrainsDataGrip JetBrains DataGrip https://www.jetbrains.com/datagrip JetBrainsDataSpell JetBrains DataSpell https://www.jetbrains.com/dataspell JetBrainsGateway JetBrains Gateway https://www.jetbrains.com/ JetBrainsGoLand JetBrains GoLand https://www.jetbrains.com/dataspell JetBrainsIntelliJIDEA JetBrains IntelliJ IDEA https://www.jetbrains.com/ JetBrainsPhpStorm JetBrains PhpStorm https://www.jetbrains.com/phpstorm JetBrainsPyCharm JetBrains PyCharm https://www.jetbrains.com/ JetBrainsRider JetBrains Rider https://www.jetbrains.com/ JetBrainsRubyMine JetBrains RubyMine https://www.jetbrains.com/rubymine JetBrainsSpace JetBrains Space https://www.jetbrains.com/space JetBrainsTeamCity JetBrains TeamCity https://www.jetbrains.com/teamcity JetBrainsToolbox JetBrains Toolbox App https://www.jetbrains.com/toolbox-app/ JetBrainsWebStorm JetBrains WebStorm https://www.jetbrains.com/webstorm JetBrainsYouTrack JetBrains YouTrack https://www.jetbrains.com/youtrack JGraphDrawIO JGraph draw.io (diagrams.net) https://www.drawio.com jq jq https://jqlang.github.io/jq/ jrsoftwareInnoSetup jrsoftware InnoSetup https://www.innosetup.com KarakunOpenWebStart Karakun OpenWebStart https://openwebstart.com/ows/ KDiff3 KDiff3 https://kdiff3.sourceforge.net/ KeePass KeePass Password Safe https://keepass.info/ KeePassXCTeamKeePassXC KeePassXC Team KeePassXC https://keepassxc.org/ KeeWeb KeeWeb https://github.com/keeweb/keeweb KubernetesKubectl Kubernetes Kubectl https://kubernetes.io/ LehrerOffice LehrerOffice https://lehreroffice.net/ LibreOffice LibreOffice https://www.libreoffice.org/ ManicTimeClient ManicTime https://www.manictime.com/download/windows MarkMpnSQL4CDS MarkMpn SQL 4 CDS https://markcarrington.azurewebsites.net/sql-4-cds/sql-4-cds-ssms-edition/ MasterPackager Master Packager https://www.masterpackager.com/ MattermostDesktop Mattermost Desktop https://github.com/mattermost/desktop Maximus5ConEmu Maximus5 ConEmu https://github.com/Maximus5/ConEmu McNeelRhino McNeel Rhino https://www.rhino3d.com/ MendeleyDesktop Mendeley Desktop https://www.mendeley.com/ MestrelabMnova Mestrelab Mnova https://mestrelab.com/software/mnova/ Microsoft.NET Microsoft .NET https://dotnet.microsoft.com/download/ Microsoft365Apps Microsoft 365 Apps https://www.microsoft.com/office MicrosoftAzureCLI Microsoft Azure CLI https://learn.microsoft.com/en-au/cli/azure/ MicrosoftAzureFunctionsCoreTools Microsoft Azure Functions Core Tools https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local MicrosoftAzurePipelinesAgent Microsoft Azure Pipelines Agent https://learn.microsoft.com/en-au/azure/devops/pipelines/agents/agents MicrosoftAzureStorageExplorer Microsoft Azure Storage Explorer https://azure.microsoft.com/en-au/features/storage-explorer/ MicrosoftAzureWindowsVMAgent Microsoft Azure Windows VMAgent https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/agent-windows MicrosoftBicep Microsoft Bicep https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview MicrosoftBotFrameworkEmulator Microsoft Bot Framework Emulator https://github.com/microsoft/BotFramework-Emulator/ MicrosoftEdge Microsoft Edge https://www.microsoft.com/edge MicrosoftEdgeDriver Microsoft Edge WebDriver https://www.microsoft.com/edge MicrosoftEdgeForBusiness Microsoft Edge for Business https://www.microsoft.com/edge/business/download MicrosoftEdgeWebView2Runtime Microsoft Edge WebView2 Runtime https://developer.microsoft.com/en-us/microsoft-edge/webview2/ MicrosoftFSLogixApps Microsoft FSLogix Apps https://docs.microsoft.com/fslogix/ MicrosoftODBCDriverForSQLServer Microsoft ODBC Driver for SQL Server (latest) https://learn.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server MicrosoftODBCDriverForSQLServer17 Microsoft ODBC Driver for SQL Server 17.x https://learn.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server MicrosoftOLEDBDriverForSQLServer Microsoft OLE DB Driver for SQL Server (latest) https://learn.microsoft.com/en-us/sql/connect/oledb/download-oledb-driver-for-sql-server MicrosoftOLEDBDriverForSQLServer18 Microsoft OLE DB Driver for SQL Server 18 https://learn.microsoft.com/en-us/sql/connect/oledb/release-notes-for-oledb-driver-for-sql-server?view=sql-server-ver16#previous-releases MicrosoftOneDrive Microsoft OneDrive https://onedrive.live.com/ MicrosoftOpenJDK11 Microsoft OpenJDK 11 https://www.microsoft.com/openjdk MicrosoftOpenJDK17 Microsoft OpenJDK 17 https://www.microsoft.com/openjdk MicrosoftOpenJDK21 Microsoft OpenJDK 21 https://www.microsoft.com/openjdk MicrosoftOutlook Microsoft Outlook https://learn.microsoft.com/en-us/microsoft-365-apps/outlook/get-started/deployment-new-outlook MicrosoftPowerShell Microsoft PowerShell https://docs.microsoft.com/powershell/ MicrosoftPowerToys Microsoft PowerToys https://github.com/microsoft/PowerToys/ MicrosoftSsms Microsoft SQL Server Management Studio https://go.microsoft.com/fwlink/?LinkId=531355 MicrosoftTeams Microsoft Teams (new) https://www.microsoft.com/teams MicrosoftTeamsClassic Microsoft Teams (classic) https://www.microsoft.com/teams MicrosoftTerminal Microsoft Terminal https://github.com/microsoft/terminal/ MicrosoftVdot Microsoft Virtual Desktop Optimization Tool https://github.com/The-Virtual-Desktop-Team/Virtual-Desktop-Optimization-Tool MicrosoftVisualStudio Microsoft Visual Studio https://visualstudio.microsoft.com/ MicrosoftVisualStudioCode Microsoft Visual Studio Code https://code.visualstudio.com MicrosoftWindowsAdminCenter Microsoft Windows Admin Center https://learn.microsoft.com/en-us/windows-server/manage/windows-admin-center/overview MicrosoftWindowsApp Microsoft Windows App https://learn.microsoft.com/en-us/windows-app/whats-new MicrosoftWindowsPackageManagerClient Microsoft Windows Package Manager Client https://docs.microsoft.com/en-us/windows/package-manager/ MicrosoftWSL Microsoft WSL https://github.com/microsoft/wsl/ MicrosoftWvdBootloader Microsoft Azure Virtual Desktop Agent Bootloader https://learn.microsoft.com/en-us/azure/virtual-desktop/add-session-hosts-host-pool?tabs=portal%2Cgui#register-session-hosts-to-a-host-pool MicrosoftWvdInfraAgent Microsoft Azure Virtual Desktop Agent https://learn.microsoft.com/en-us/azure/virtual-desktop/add-session-hosts-host-pool?tabs=portal%2Cgui#register-session-hosts-to-a-host-pool MicrosoftWvdMultimediaRedirection Microsoft Azure Virtual Desktop Multimedia Redirection Extensions https://docs.microsoft.com/en-us/azure/virtual-desktop/multimedia-redirection MicrosoftWvdRemoteDesktop Microsoft Remote Desktop https://docs.microsoft.com/en-us/azure/virtual-desktop/connect-windows-7-10 MicrosoftWvdRtcService Microsoft Remote Desktop WebRTC Redirector Service https://docs.microsoft.com/en-us/azure/virtual-desktop/teams-on-avd Miniconda Miniconda https://docs.conda.io/en/latest/miniconda.html Minitab Minitab https://www.minitab.com/ MiniZincIDE MiniZinc IDE https://www.minizinc.org/ MirantisLens MirantisLens https://k8slens.dev/ MozillaFirefox Mozilla Firefox https://www.mozilla.org/en-US/firefox/new/ MozillaGeckoDriver Mozilla Gecko Driver https://developer.mozilla.org/en-US/docs/Web/WebDriver MozillaThunderbird Mozilla Thunderbird https://www.thunderbird.net/ mRemoteNG mRemoteNG https://mremoteng.org/ MSIXHero MSIX Hero https://msixhero.net/ MuseScore MuseScore https://musescore.org/ mySQLConnectorNET mySQL Connector NET https://dev.mysql.com/doc/connector-net/en/ mySQLConnectorODBC mySQL Connector ODCB https://dev.mysql.com/doc/connector-odbc/en/ mySQLWorkbench mySQL Workbench https://dev.mysql.com/doc/workbench/en/ NagiosCrossPlatformAgent Nagios Cross-Platform Agent https://www.nagios.org/projects/ncpa/ NanaZip NanaZip https://github.com/M2Team/NanaZip Naps2 Ben Olden-Cooligan NAPS2 https://www.naps2.com/ NavimaticsWinFSP Navimatics WinFSP https://winfsp.dev/rel/ NetPad NetPad https://github.com/tareqimbasher/NetPad NETworkManager NETworkManager https://github.com/BornToBeRoot/NETworkManager NevcairielLAVFilters Nevcairiel LAV Filters https://github.com/Nevcairiel/LAVFilters NextcloudDesktop Nextcloud Desktop https://github.com/nextcloud-releases/desktop NodeJs Node.js https://nodejs.org/ NodeVersionManager Node Version Manager https://github.com/coreybutler/nvm-windows Nomacs nomacs Image Lounge https://nomacs.org/ Notable Notable https://notable.app/ NotepadPlusPlus Notepad++ https://notepad-plus-plus.org/ Npcap Npcap https://npcap.com/ NSClient NSClient++ https://nsclient.org Obsidian Obsidian https://obsidian.md/ OBSStudio OBS Studio https://obsproject.com/ OBSStudioAlt OBS Studio Alt https://obsproject.com/ OCSInventoryWindowsAgent OCS Inventory Windows Agent https://ocsinventory-ng.org/ OctopusDeployServer Octopus Deploy Server https://octopus.com/ OctopusTentacle Octopus Tentacle https://octopus.com/ OmnissaDynamicEnvironmentManager Omnissa Dynamic Environment Manager https://www.omnissa.com/products/dynamic-environment-manager/ OmnissaHorizonClient Omnissa Horizon Client https://customerconnect.omnissa.com/downloads/info/slug/desktop_end_user_computing/omnissa_horizon_clients/8 OmnissaOSOptimizationTool Omnissa OS Optimization Tool https://customerconnect.omnissa.com/downloads/info/slug/desktop_end_user_computing/os_optimization_tool/2412 OnlyOfficeDesktopEditors ONLYOFFICE Desktop Editors https://www.onlyoffice.com/desktop.aspx OpenLens OpenLens https://github.com/MuhammedKalkan/OpenLens/ OpenShellMenu Open-Shell-Menu https://open-shell.github.io/Open-Shell-Menu/ OpenWebStart OpenWebStart https://openwebstart.com/ OperaBrowser Opera Browser https://www.opera.com/browsers/opera OperaCryptoBrowser Opera Crypto Browser https://www.opera.com/crypto/next OperaGXBrowser Opera GX Browser https://www.opera.com/gx OracleJava17 Oracle Java 17 https://www.oracle.com/java/technologies/downloads/#java17 OracleJava20 Oracle Java 20 https://www.oracle.com/java/technologies/downloads/#java20 OracleJava21 Oracle Java 21 https://www.oracle.com/java/technologies/downloads/#java21 OracleJava22 Oracle Java 22 https://www.oracle.com/java/technologies/downloads/#java22 OracleJava23 Oracle Java 23 https://www.oracle.com/java/technologies/downloads/#java23 OracleJava8 Oracle Java 8 https://www.java.com OracleVirtualBox Oracle VirtualBox https://www.virtualbox.org/ PaintDotNet dotPDN LLC Paint.NET https://getpaint.net PaintDotNetOfflineInstaller dotPDN LLC Paint.NET Offline Installer https://getpaint.net/ PaloAltoGlobalProtect Palo Alto GlobalProtect https://docs.paloaltonetworks.com/globalprotect Pandoc Pandoc https://pandoc.org/ ParallelsClient Parallels Client https://www.parallels.com/products/ras/download/links/ PDFArranger PDF Arranger https://github.com/pdfarranger/pdfarranger/ PDFForgePDFCreator pdfforge PDFCreator https://www.pdfforge.org/pdfcreator PeaZipPeaZip PeaZip PeaZip https://peazip.github.io/ PiriformCCleanerFree Piriform CCleaner Free https://www.ccleaner.com/ccleaner PlexDesktop Plex Media Desktop https://www.plex.tv/media-server-downloads/ PlexHTPC Plex HTPC https://www.plex.tv/media-server-downloads/ PlexMediaServer Plex Media ServerDesktop https://www.plex.tv/media-server-downloads/ Podman Podman https://github.com/containers/podman PodmanDesktop Podman Desktop https://github.com/podman-desktop/podman-desktop PositRStudio Posit RStudio Desktop https://posit.co/products/open-source/rstudio/ Postman Postman https://www.getpostman.com/ Praat Praat https://www.fon.hum.uva.nl/praat/ ProgressChefInfraClient Progress Chef Infra Client https://www.chef.io/products/chef-infra ProgressChefInSpec Progress Chef InSpec https://www.chef.io/products/chef-inspec ProgressChefWorkstation Progress Chef Workstation https://www.chef.io/products/chef-workstation ProjectLibre ProjectLibre https://www.projectlibre.com/ Protege Protege https://protege.stanford.edu/ ProtonDrive Proton Drive https://proton.me/drive/ ProtonVPN Proton VPN https://protonvpn.com/ Proxyman Proxyman https://proxyman.io/ PSAppDeployToolkit PSAppDeployToolkit https://psappdeploytoolkit.com/ PSFPython PSF Python https://www.python.org/ PuTTY PuTTY https://www.chiark.greenend.org.uk/~sgtatham/putty/ Python Python https://www.python.org/ QGIS QGIS https://qgis.org/en/site/index.html RCoreTeamRforWindows R Core Team R for Windows https://cran.r-project.org/bin/windows/base/ RDAnalyzer Remote Desktop Analyzer https://rdanalyzer.com/ RedHatOpenJDK17 Red Hat OpenJDK 17 https://developers.redhat.com/products/openjdk/overview RedHatOpenJDK21 Red Hat OpenJDK 21 https://developers.redhat.com/products/openjdk/overview RedHatOpenJDK8 Red Hat OpenJDK 8 https://developers.redhat.com/products/openjdk/overview ResponsivelyApp Responsively App https://responsively.app/ RingCentral RingCentral https://www.ringcentral.com RizonesoftNotepad3 Rizonesoft Notepad3 https://www.rizonesoft.com/downloads/notepad3 SafeExamBrowser Safe Exam Browser https://safeexambrowser.org/ SafingPortmaster Safing Portmaster https://safing.io/ SAGAGIS SAGA-GIS http://www.saga-gis.org/ ScooterBeyondCompare Scooter Beyond Compare https://scootersoftware.com/ Scratch Scratch https://scratch.mit.edu/ ScreenToGif ScreenToGif https://github.com/NickeManarin/ScreenToGif ShareX ShareX https://getsharex.com/ SignalDesktop Signal for Windows https://www.signal.org/ Slack Slack https://slack.com/intl/en-au/help/articles/212475728-Deploy-Slack-via-Microsoft-Installer SmartBearSoapUI SmartBear SoapUI https://www.soapui.org/ SoberLemurPDFSamBasic Sober Lemur PDFSam Basic https://pdfsam.org/pdfsam-basic/ StefansToolsgregpWin Stefans Tools gregpWin https://tools.stefankueng.com/grepWin.html SumatraPDFReader Sumatra PDF Reader https://www.sumatrapdfreader.org/ SUSERancherDesktop SUSE Rancher Desktop https://rancherdesktop.io/ TableauDesktop Tableau Desktop https://www.tableau.com/ TableauPrep Tableau Prep https://www.tableau.com/ TableauReader Tableau Reader https://www.tableau.com/ TeamViewer TeamViewer https://www.teamviewer.com/ TechSmithCamtasia TechSmith Camtasia https://www.techsmith.com/ TechSmithSnagit TechSmith Snagit https://www.techsmith.com/ TelegramDesktop Telegram Desktop https://desktop.telegram.org/ TelerikFiddlerClassic Telerik Fiddler Classic https://www.telerik.com/fiddler/fiddler-classic TelerikFiddlerEverywhere Telerik Fiddler Everywhere https://www.telerik.com/fiddler TeraTerm TeraTerm https://teratermproject.github.io/index-en.html Terminals Terminals https://github.com/terminals-Origin/Terminals/ TeXstudio TeXstudio https://www.texstudio.org/ ThoriumReader Thorium Reader https://www.edrlab.org/software/thorium-reader/ ThymioSuite Thymio Suite https://www.thymio.org/ TogglDesktop Toggl Desktop https://www.toggl.com/ TorProjectTorBrowser Tor Project Tor Browser https://www.torproject.org/ Tower Tower https://www.git-tower.com/windows/ TPGiColourContrastAnalyser TGPi Colour Contrast Analyser https://www.tpgi.com/color-contrast-checker/ TrackerSoftwarePDFXChangeEditor Tracker Software PDF X-Change Editor https://pdf-xchange.eu/pdf-xchange-editor/index.htm UnityEditor Unity Editor https://unity.com/download USBPcap USBPcap https://github.com/desowin/usbpcap/ VastLimitsUberAgent vast limits uberAgent https://uberagent.com/ VeraCrypt VeraCrypt https://www.veracrypt.fr/en/Home.html VercelHyper Vercel Hyper https://hyper.is/ VideoLanVlcPlayer VideoLan VLC Player https://www.videolan.org/vlc/ VisualCppRedistAIO VisualCppRedistAIO https://github.com/abbodi1406/vcredist VMPlexWorkstation VMPlex Workstation https://github.com/0xf005ba11/vmplex-ws VMwareTools VMware Tools https://docs.vmware.com/en/VMware-Tools/index.html voidtoolsEverything voidtools Everything https://www.voidtools.com/ VSCodium VSCodium https://vscodium.com Win32OpenSSH Win32-OpenSSH https://github.com/PowerShell/Win32-OpenSSH/ WindowsEnterpriseDefaults Windows Enterprise Defaults https://stealthpuppy.com/defaults/ WinMerge WinMerge https://winmerge.org/ WinSCP WinSCP https://winscp.net/ Wireshark Wireshark https://www.wireshark.org/#download WixToolset WiX Toolset https://wixtoolset.org/ XnSoftXnConvert XnSoft Convert https://www.xnview.com/en/xnconvert/ XnSoftXnViewMP XnSoft XnView MP https://www.xnview.com/en/xnviewmp/ YubicoAuthenticator Yubico Authenticator https://github.com/Yubico/yubioath-flutter/ Zoom Zoom https://zoom.us/download ZoomVDI Zoom Plugins for VDI https://support.zoom.us/hc/en-us/articles/4415057249549-VDI-releases-and-downloads ZorgmailVeiligVerzendenAddin ZorgMail Veilig verzenden plug-in https://enovationgroup.com/nl/service-support/alle-downloads/veilig-verzenden-plug-ins/ Zotero Zotero https://www.zotero.org/"},{"location":"changelog/","title":"Change log","text":""},{"location":"changelog/#25082431","title":"2508.2431","text":"<ul> <li>Update <code>OmnissaHorizonClient</code>, <code>FreedomScientificFusion</code>, <code>FreedomScientificJAWS</code>, <code>FreedomScientificZoomText</code> to use the Microsoft Edge user agent instead of the default Evergreen user agent</li> </ul>"},{"location":"changelog/#25082374","title":"2508.2374","text":"<ul> <li>Fix download URL change in <code>OBSStudio</code> and <code>MicrosoftEdgeDriver</code></li> <li>Updates user agent for <code>OracleJava</code> apps</li> <li>Reorder properties in <code>Microsoft.NET</code> for better standardisation</li> <li>Creates a custom Evergreen user agent in this format: <code>Evergreen/&lt;version&gt; (https://github.com/aaronparker/evergreen; PowerShell &lt;PowerShell version&gt;; &lt;OS platform)</code></li> </ul> <p>Example: <code>Evergreen/2508.9999 (https://github.com/aaronparker/evergreen; PowerShell 7.5.2; macOS)</code></p> <p>This approach should achieve the following:</p> <ul> <li>Ensures Evergreen can be identified on calls to target endpoints</li> <li>Avoids the need to update the previous user agent (The default Microsoft Edge on Windows user agent was being used) - some vendor endpoints will block out of date user agents</li> </ul> <p>This change introduces the following private functions: * Get-EvergreenUserAgent * Get-ModuleVersion * Get-OSName</p> <p>The following functions are updated to use the Evergreen user agent:</p> <ul> <li>Get-EvergreenAppFromApi</li> <li>Save-EvergreenApp</li> <li>Test-EvergreenApp</li> <li>Invoke-EvergreenRestMethod</li> <li>Invoke-EvergreenWebRequest</li> <li>Invoke-SystemNetRequest</li> <li>Save-File</li> <li>Get-SourceForgeRepoRelease</li> </ul>"},{"location":"changelog/#25072318","title":"2507.2318","text":"<ul> <li>Updates <code>eduVPN</code> to support changes in move from GitHub to Codeberg #832</li> <li>Updates <code>GhislerTotalCommander</code> to fix download URLs #833</li> <li>Removes <code>AzureDataStudio</code> #834 (See What's happening to Azure Data Studio?)</li> </ul>"},{"location":"changelog/#25062263","title":"2506.2263","text":"<ul> <li>Fixes change to download URL in <code>MicrosoftAzurePipelinesAgent</code></li> </ul>"},{"location":"changelog/#25062209","title":"2506.2209","text":"<ul> <li>Modifies the URI to include '?viasf=1' in <code>Get-SourceForgeRepoRelease</code> for all SourceForge hosted apps to ensure downloads with <code>Save-EvergreenApp</code> works</li> </ul>"},{"location":"changelog/#25062156","title":"2506.2156","text":"<ul> <li>Fixes <code>MicrosoftEdge</code>, <code>MicrosoftEdgeWebView2Runtime</code> for missing <code>Stable</code> channel #826</li> <li>Adds <code>MicrosoftEdgeForBusiness</code></li> </ul> <p>BREAKING CHANGES</p> <ul> <li><code>MicrosoftEdge</code> is split into <code>MicrosoftEdge</code> and <code>MicrosoftEdgeForBusiness</code></li> <li><code>MicrosoftEdge</code> shows current versions only for each architecture - previous <code>Consumer</code> and <code>Enterprise</code> releases were showing the same version anyway</li> <li><code>Release</code> property only includes <code>Enterprise</code> to avoid breaking existing scripts</li> <li><code>MicrosoftEdgeForBusiness</code> shows all data available for Edge, including Administrative Templates</li> </ul>"},{"location":"changelog/#25052104","title":"2505.2104","text":"<ul> <li>Renames <code>stealthpuppyWindowsCustomisedDefaults</code> to <code>WindowsEnterpriseDefaults</code></li> </ul>"},{"location":"changelog/#25052053","title":"2505.2053","text":"<ul> <li>Adds <code>PaloAltoGlobalProtect</code>, <code>MicrosoftWindowsAdminCenter</code></li> <li>Fixes <code>LehrerOffice</code> for a change in the source URL</li> <li>Updates internal function <code>ConvertTo-DateTime</code> to return a simple date/time conversion where a short date conversion fails</li> </ul>"},{"location":"changelog/#25052003","title":"2505.2003","text":"<ul> <li>Adds <code>ControlUpMonitor</code></li> <li>Updates <code>AkeoRufusAlt</code> to remove ARM32 architecture</li> <li>Updates the module default user agent</li> </ul>"},{"location":"changelog/#25031954","title":"2503.1954","text":"<ul> <li>Adds <code>ThoriumReader</code>, <code>NSClient++</code>, <code>NagiosCrossPlatformAgent</code>, <code>OmnissaDynamicEnvironmentManager</code>, <code>OmnissaOSOptimizationTool</code></li> <li>Updates <code>MicrosoftWvdBootLoader</code> to support new source URL</li> <li>Removes <code>VMwareHorizonClientAlt</code> due to source no longer exists. Use <code>OmnissaHorizonClient</code> instead</li> </ul>"},{"location":"changelog/#25031906","title":"2503.1906","text":"<ul> <li>Remove <code>x86</code> platforms from <code>MicrosoftVisualStudioCode</code></li> <li>Update <code>MicrosoftWvdInfraAgent</code> to support new source URL</li> </ul>"},{"location":"changelog/#25031859","title":"2503.1859","text":"<ul> <li>Adds <code>BellSoftLibericaJDK23</code></li> <li>Fixes the download URL in <code>Fork</code> #791</li> <li>Fixes an issue with <code>GitForWindows</code> where output it repeated #802</li> <li>Fixes an issue with <code>MicrosoftWvdMultimediaRedirection</code>, <code>MicrosoftWvdRtcService</code> due to changes in the source URL</li> <li>Removes <code>Filename</code> property from <code>MicrosoftWvdRemoteDesktop</code> because property is no longer required</li> <li>Updates <code>FreedomScientificFusion</code>, <code>FreedomScientificJAWS</code>, <code>FreedomScientificZoomText</code> to add <code>Architecture</code> property</li> <li>Updates <code>OmnissaHorizonClient</code> #678</li> <li>Updates <code>PaintDotNet</code> to return <code>stable</code> and <code>beta</code> channels #783 </li> <li>Updates default user agent in <code>TableauDesktop</code>, <code>TableauPrep</code>, <code>TableauReader</code> #801</li> <li>Updates default user agent for the module</li> <li>Removes <code>RedHatOpenJDK11</code> because no data is returned from the API for this version</li> </ul>"},{"location":"changelog/#25021814","title":"2502.1814","text":"<ul> <li>Adds <code>ALMToolkit</code>, <code>AnalogDevicesLTspice</code>, <code>DAXStudio</code>, <code>MarkMpnSQL4CDS</code>, <code>NodeVersionManager</code>, <code>Python</code></li> <li>Fixes <code>Fork</code>, <code>GitForWindows</code>, <code>GitHubDesktop</code>, <code>MicrosoftWindowsApp</code>, <code>MicrosoftOutlook</code>, <code>MicrosoftFSLogixApps</code>, <code>Wireshark</code>, <code>mySQLConnectorNET</code>, <code>mySQLConnectorODBC</code>, <code>mySQLWorkbench</code>, <code>VisualCppRedistAIO</code>, <code>VisualCppRedistAIO</code></li> </ul>"},{"location":"changelog/#24121770","title":"2412.1770","text":"<ul> <li>Fix <code>URI</code> property on <code>FigmaDesktop</code></li> </ul>"},{"location":"changelog/#24121727","title":"2412.1727","text":"<ul> <li>Adds <code>FigmaDesktop</code> #784</li> <li>Adds <code>ARM64</code> architecture to <code>GoogleChrome</code></li> <li>Changes the GitHub repo used for <code>PodmanDesktop</code> #780</li> <li>Changes the update feed used for <code>TrackerSoftwarePDFXChangeEditor</code> #782</li> <li>Changes the update feed used for <code>PaintDotNet</code> #783</li> </ul>"},{"location":"changelog/#24121685","title":"2412.1685","text":"<ul> <li>Fix an issue with the version number calculated in <code>QGIS</code> #775</li> </ul>"},{"location":"changelog/#24111644","title":"2411.1644","text":"<ul> <li>Adds <code>AWSSMP</code>, <code>Autoit</code></li> <li>Fixes an issue with <code>PaintDotNet</code></li> <li>Removes MSI files from <code>ScooterBeyondCompare</code> and updates the update URL</li> <li>Updates <code>mySQLConnectorNET</code>, <code>mySQLWorkbench</code>, <code>mySQLConnectorODBC</code> to use a custom user agent</li> </ul>"},{"location":"changelog/#24111604","title":"2411.1604","text":"<ul> <li>Adds <code>mySQLConnectorNET</code>, <code>mySQLConnectorODBC</code></li> <li>Fixes an issue in <code>Gimp</code> to account for strings in the version number #767</li> </ul>"},{"location":"changelog/#24101565","title":"2410.1565","text":"<ul> <li>Use a custom user agent in <code>Get-SourceForgeRepoRelease.ps1</code> #763</li> </ul>"},{"location":"changelog/#24101527","title":"2410.1527","text":"<ul> <li>Fix an issue in <code>JetBrainsDataGrip</code> #757</li> <li>Update <code>FoxitReader</code> to return the latest installer. Note that this doesn't fix the version number #756</li> <li>Fix ErrorAction in <code>MicrosoftWindowsApp</code></li> </ul>"},{"location":"changelog/#24101490","title":"2410.1490","text":"<ul> <li>Fixes <code>MicrosoftWindowsApp</code> to resolve FwLink URLs to the <code>query.prod.cms.rt.microsoft.com</code> URL before returning details</li> </ul>"},{"location":"changelog/#24101454","title":"2410.1454","text":"<ul> <li>Adds <code>MicrosoftWindowsApp</code>, <code>NextcloudDesktop</code> #749, <code>Dropbox</code> #292, <code>MSIXHero</code></li> <li>Updates <code>VMwareTools</code> to remove the <code>x86</code> architecture and add <code>ARM64</code> architecture #751</li> </ul>"},{"location":"changelog/#24091419","title":"2409.1419","text":"<ul> <li>Adds <code>NetPad</code></li> <li>Adds new <code>ConvertTo-DotNetVersionClass</code> - converts the <code>Version</code> number exported by <code>Get-EvergreenApp</code> to a .NET compliant version class #717</li> <li>Adds <code>Get-GitHubRepoTag</code> to return an object of tags from a GitHub repository #544</li> <li>Updates <code>AWLCLI</code> and <code>Npcap</code> to use <code>Get-GitHubRepoTag</code> and support proxy server connections #544</li> </ul>"},{"location":"changelog/#24091385","title":"2409.1385","text":"<ul> <li>Adds <code>OracleJava23</code>, <code>NavimaticsWinFSP</code> #741</li> <li>Fixes an issue with <code>PositRStudio</code> due to change in update URL #742</li> <li>Updates default user agent</li> </ul> <p>BREAKING CHANGES</p> <ul> <li>Renames <code>RStudio</code> to <code>PositRStudio</code></li> </ul>"},{"location":"changelog/#24091352","title":"2409.1352","text":"<ul> <li>Update <code>7Zip</code> to <code>Get-GitHubRepoRelease</code> #737</li> <li>Update <code>TechSmithSnagit</code> to remove the  <code>x86</code> architecture</li> <li>Fix an issue with <code>AdvancedInstaller</code></li> </ul>"},{"location":"changelog/#24091320","title":"2409.1320","text":"<ul> <li>Adds <code>AWSAppStreamClient</code>, <code>AdvancedInstaller</code></li> <li>Fixes an issue with <code>EgnyteDesktopApp</code> #729</li> <li>Updates <code>FoxitReader</code> to account for a version number issue in the source feed #732</li> <li>Updates <code>MozillaThunderbird</code> to address version mismatch #735</li> <li>Updates <code>Zotero</code> to return additional processor architectures #730</li> <li>Updates internal function <code>Resolve-MicrosoftFwLink</code> to reduce default redirects</li> </ul>"},{"location":"changelog/#24071289","title":"2407.1289","text":"<ul> <li>Update <code>AdobeAcrobatReaderDC</code> to add <code>x64</code> architecture to all languages</li> <li>Fix an issue in <code>Get-EvergreenLibrary</code> where <code>Split-Path</code> transposes the <code>/</code> character to <code>\\</code> in URLs</li> </ul>"},{"location":"changelog/#24071259","title":"2407.1259","text":"<ul> <li>Adds <code>OBSStudioAlt</code> - provides an alternative method for returning OSB Studio downloads</li> <li>Updates <code>MicrosoftTerminal</code> to return <code>.msixbundle</code> installers</li> <li>Renames function <code>Get-EvergreenLibraryApp</code> to <code>Get-EvergreenAppFromLibrary</code>. <code>Get-EvergreenLibraryApp</code> remains as the alias</li> <li>Updates <code>Get-EvergreenLibrary</code> to return details from an Evergreen Library hosted on a <code>https</code> URL (e.g. an Azure storage account)</li> <li>Updates <code>Start-EvergreenLibraryUpdate</code> to support an application in the library without a filter</li> <li>Updates internal function <code>Get-AdoptiumTemurin</code> to ensure <code>jdk-</code> text is not returned in the version number</li> <li>Updates filter in the default Evergreen Library template - <code>EvergreenLibraryTemplate.json</code></li> </ul>"},{"location":"changelog/#24071230","title":"2407.1230","text":"<ul> <li>Updates <code>Save-EvergreenApp</code> to use a custom user agent for an identified list of URLs #677</li> <li>Updates <code>ScooterBeyondCompare</code> with additional languages</li> <li>Updates <code>VideoLanVlcPlayer</code> #704 #158, <code>CitrixWorkspaceApp</code> #578 #298 to output warnings for known issues</li> <li>Updates <code>GoogleChrome</code>, <code>MicrosoftOneDrive</code>, <code>MozillaFirefox</code>, <code>MozillaThunderbird</code> to reorder output properties</li> <li>Updates default user agent</li> </ul> <p>BREAKING CHANGES</p> <ul> <li>Renames <code>diagrams.net</code> to <code>JGraphDrawIO</code> #714</li> </ul>"},{"location":"changelog/#24071202","title":"2407.1202","text":"<ul> <li>Adds <code>AmazonCorretto8</code>, <code>AmazonCorretto11</code>, <code>AmazonCorretto16</code>, <code>AmazonCorretto17</code>, <code>AmazonCorretto20</code>, <code>AmazonCorretto21</code>, <code>AmazonCorretto22</code> #711</li> <li>Updates output properties in <code>AtlassianSourcetree</code></li> <li>Updates output properties in internal function <code>Get-GitHubRepoRelease</code></li> <li>Fixes an issue with the <code>Version</code> property in <code>AkeoRufusAlt</code></li> <li>Fixes an issue with the <code>Filename</code> property in <code>PiriformCCleanerFree</code></li> </ul> <p>BREAKING CHANGES</p> <ul> <li>Removes <code>AmazonCorretto</code> - replaced with individual <code>AmazonCorretto</code></li> <li>Removes <code>OpenJDK</code> #712</li> </ul>"},{"location":"changelog/#24071175","title":"2407.1175","text":"<ul> <li>Adds <code>AdoptiumTemurin22</code>, <code>BellSoftLibericaJDK21</code>, <code>BellSoftLibericaJDK22</code>, <code>ManicTimeClient</code> #572</li> <li>Fixes an issue with <code>ProtonDrive</code> to account for duplicate keys in the update feed preventing conversion with <code>ConvertTo-Json</code></li> <li>Updates the URL used for <code>TelerikFiddlerClassic</code> to return the latest version</li> <li>Updates <code>LibreOffice</code> to remove <code>Stable</code> release which was returning the same details from the <code>Latest</code> release only anyway</li> <li>Removes <code>FileZilla</code> #581</li> </ul>"},{"location":"changelog/#24071149","title":"2407.1149","text":"<ul> <li>Adds <code>OmnissaHorizonClient</code>, <code>Elgato4KCaptureUtility</code>, <code>ElgatoAudioEffects</code>, <code>ElgatoCameraHub</code>, <code>ElgatoControlCenter</code>, <code>ElgatoEpocCam</code>, <code>ElgatoGameCapture</code>, <code>ElgatoStreamDeck</code>, <code>ElgatoVideoCapture</code>, <code>ElgatoWaveLink</code></li> <li>Fixes an issue with <code>MicrosoftAzureDataStudio</code> #708</li> </ul> <p>BREAKING CHANGES</p> <ul> <li>Removes <code>MicrosoftOutlook</code> - new Outlook uses a new update API and we haven't yet found a valid query to that API</li> </ul>"},{"location":"changelog/#24061124","title":"2406.1124","text":"<ul> <li>Update <code>Slack</code> to remove <code>x86</code> download (which is no longer available)</li> </ul>"},{"location":"changelog/#24061100","title":"2406.1100","text":"<ul> <li>Adds <code>QGIS</code></li> <li>Updates internal function <code>Get-GitHubRelease</code> to allow returning all releases and then filtering the results in an app function</li> <li>Updates <code>PDFArranger</code> to return the latest Windows release with downloads</li> </ul> <p>IMPORTANT UPDATES</p> <ul> <li>Renames <code>Invoke-EvergreenApp</code> to <code>Get-EvergreenAppFromApi</code>. <code>Invoke-EvergreenApp</code> remains as the alias</li> <li>Renames <code>Invoke-EvergreenLibraryUpdate</code> to <code>Start-EvergreenLibraryUpdate</code>. <code>Invoke-EvergreenLibraryUpdate</code> remains as the alias</li> <li>Renames <code>Get-EvergreenEndpoint</code> to <code>Get-EvergreenEndpointFromApi</code>. <code>Get-EvergreenEndpoint</code> remains as the alias</li> </ul> <p>BREAKING CHANGES</p> <ul> <li>Removes <code>JetBrainsHub</code> - the update source no longer includes Windows specific update info</li> </ul>"},{"location":"changelog/#24051076","title":"2405.1076","text":"<ul> <li>Adds  <code>DockerCompose</code></li> <li>Updates <code>NETworkManager</code> to return new MSI installers</li> <li>Updates <code>MicrosoftAzureCLI</code> to return <code>x64</code> and <code>x86</code> architectures #691</li> <li>Fixes an issue with <code>GoogleChrome</code> where source data returns date value as an array</li> <li>Minor updates to <code>MicrosoftWvdMultimediaRedirection</code> and <code>MicrosoftWvdRtcService</code></li> </ul>"},{"location":"changelog/#24051054","title":"2405.1054","text":"<ul> <li>Fixes an issue with <code>MicrosoftSsms</code></li> </ul>"},{"location":"changelog/#24051033","title":"2405.1033","text":"<ul> <li>Adds <code>MicrosoftOpenJDK21</code>, <code>AdoptiumTemurin21</code>, <code>AzulZulu21</code>, <code>Proxyman</code>, <code>RedHatOpenJDK21</code></li> <li>Adds <code>MicrosoftODBCDriverForSQLServer17</code> #685, <code>MicrosoftOLEDBDriverForSQLServer18</code> #686</li> <li>Updates <code>MicrosoftODBCDriverForSQLServer</code> #685, <code>MicrosoftOLEDBDriverForSQLServer18</code> #686, <code>MicrosoftOLEDBDriverForSQLServer</code> #686</li> <li>Updates <code>MicrosoftSsms</code> with new source URL that should ensure latest version is always found, and simplifies function code #687</li> <li>Updates <code>Resolve-MicrosoftFwLink</code> to support more flexible queries</li> </ul>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Removes <code>VMwareHorizonClient</code>, <code>VMwareOSOptimizationTool</code>, <code>VMwareSDWANClient</code>, <code>VMwareWorkstationPlayer</code>, <code>VMwareWorkstationPro</code> #678</li> </ul>"},{"location":"changelog/#24051013","title":"2405.1013","text":"<ul> <li>Adds <code>AkeoRufusAlt</code></li> <li>Update <code>Gimp</code> with <code>Revision</code> property #639</li> <li>Updates <code>MicrosoftOneDrive</code> to convert sha256 value from base64 to string #481</li> <li>Update <code>MestrelabMnova</code> to throw an error when update feed is not in the expected format</li> <li>Fix an issue with <code>MozillaFirefox</code> #676</li> <li>Adds <code>ConvertFrom-Base64String</code> private function</li> </ul>"},{"location":"changelog/#2405976","title":"2405.976","text":"<ul> <li>Adds <code>GoogleChromeForTesting</code>, <code>GoogleChromeHeadlessShell</code> #674</li> <li>Updates <code>MozillaThunderbird</code> with human readable channel names, adds Beta channel, MSIX file types</li> </ul>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>Removes <code>ChromiumChromeDriver</code> #674</li> </ul>"},{"location":"changelog/#2405976_1","title":"2405.976","text":"<ul> <li>Adds <code>VSCodium</code></li> <li>Updates <code>MozillaFirefox</code> with additional channels</li> <li>Updates <code>MicrosoftAzureDataStudio</code> to throw if the update feed is unavailable</li> <li>Updates <code>ProtonDrive</code> to throw if the update feed includes parsing issues</li> <li>Updates <code>Get-SourceForgeRepoRelease</code> to use null UserAgent and resolve correct download hosts #669</li> <li>Updates <code>Resolve-InvokeWebRequest</code> with support for Headers, ability to set UserAgent to null</li> <li>Fixes an issue with <code>AdobeConnect</code></li> <li>Fixes an issue with <code>McNeelRhino</code> #670</li> <li>Fixes <code>TableauDesktop</code>, <code>TableauPrep</code>, <code>TableauReader</code> #658</li> <li>Fixes an issue with <code>Resolve-SystemNetWebRequest</code> with ability to set UserAgent to null #669</li> <li>Adds a custom user agent to <code>Invoke-EvergreenApp</code> to improve reporting on Cloudflare Workers</li> </ul>"},{"location":"changelog/#breaking-changes_2","title":"Breaking Changes","text":"<ul> <li>Changes values for <code>MozillaFirefox</code> to be human readable #667 #672</li> </ul>"},{"location":"changelog/#2405959","title":"2405.959","text":"<ul> <li>Fix an issue with date/time conversion on Windows PowerShell for <code>GoogleChrome</code> #668</li> </ul>"},{"location":"changelog/#2405943","title":"2405.943","text":"<ul> <li>Update default user agent #642</li> <li>Fix an issue with <code>Get-Architecture</code> returning <code>AMD64</code> #663</li> <li>Adds <code>Get-EvergreenAppFromApi</code>, <code>Start-EvergreenLibraryUpdate</code> aliases. Public functions will be renamed in a future release</li> <li>Fix various issues with help URI links for public functions</li> <li>Update help XML</li> <li>Adds <code>OracleJava22</code></li> <li>Fixes <code>AdobeDigitalEditions</code>, <code>JetBrainsYouTrack</code>, <code>ProgressChefInfraClient</code></li> <li>Updates <code>GoogleChrome</code> with start date for each channel</li> </ul>"},{"location":"changelog/#2404928","title":"2404.928","text":"<ul> <li>Adds <code>DrataAgent</code></li> <li>Restores <code>LibreOffice</code> - note this function currently returns only the 7.x release of Libre Office</li> <li>Fix <code>DevToys</code> to reference the moved repository</li> <li>Update <code>DockerDesktop</code> to return both MSI and EXE installers</li> <li>Update <code>deviceTRUST</code> to filter update feed for latest Windows installers only</li> </ul>"},{"location":"changelog/#2404914","title":"2404.914","text":"<ul> <li>Adds <code>Get-EvergreenEndpoint</code></li> </ul>"},{"location":"changelog/#2404901","title":"2404.901","text":"<ul> <li>Adds argument completer for <code>Get-EvergreenApp</code></li> <li>Updates the default user agent used by Evergreen to match Microsoft Edge #642</li> <li>Adds <code>TeraTerm</code>, <code>SUSERancherDesktop</code> #635, <code>GrafanaAgent</code> #628, <code>PlexDesktop</code>, <code>PlexHTPC</code>, <code>PlexMediaServer</code> #270, <code>Flameshot</code> #597, <code>1PasswordCLI</code> #589, <code>ProtonDrive</code> #595</li> <li>Updates <code>MicrosoftTeams</code> to support Teams 2.0 (removes <code>MicrosoftTeamsPreview</code>), Adds <code>MicrosoftTeamsClassic</code> to return details of Teams 1.0 #625</li> <li>Updates <code>Microsoft365Apps</code> to dynamically determine channel names and removed from hard coded channel details from the manifest #650</li> <li>Fixes the source releases feed for <code>MicrosoftSsms</code> to return current releases #651</li> <li>Updates various functions to use a consistent approach to enabling TLS 1.2 #643</li> <li>Fixes an issue with <code>KubernetesKubectl</code></li> <li>Fixes an issue with <code>ScooterBeyondCompare</code> to resolve an with XML conversion of the update source feed</li> </ul>"},{"location":"changelog/#2403889","title":"2403.889","text":"<ul> <li>Adds <code>KubernetesKubectl</code> #634, <code>ProtonVPN</code> #596, <code>eduVPN</code>, <code>AdobeDigitalEditions</code> #621, <code>ClarivateEndNote</code>, <code>DBBrowserforSQLite</code>, <code>JabraDirect</code>, <code>MicrosoftWSL</code>, <code>Npcap</code>, <code>PodmanDesktop</code>, <code>Podman</code></li> <li>Update URLs for <code>MicrosoftODBCDriverForSQLServer</code> and <code>MicrosoftOLEDBDriverForSQLServer</code> #567</li> <li>Updates <code>Invoke-EvergreenLibraryUpdate</code> #488 #566</li> <li>Updates <code>MicrosoftPowerShell</code> to return <code>msixbundle</code> file type</li> <li>Fixes update source for <code>MasterPackager</code></li> <li>Address PSScriptAnalyzer issues</li> </ul>"},{"location":"changelog/#2312878","title":"2312.878","text":"<ul> <li>Adds <code>CitrixShareFile</code> #564, <code>ParallelsClient</code> #577</li> <li>Updates <code>Microsoft.NET</code> for all available supported channels #583</li> <li>Updates <code>mySQLWorkbench</code> download URL</li> <li>Updates source URL used in <code>MicrosoftSsms</code> to fix version numbers</li> <li>Updates <code>DruvainSyncClient</code> for Cloud and GovCloud releases</li> <li>Fix date property on <code>MicrosoftWvdMultimediaRedirection</code></li> </ul>"},{"location":"changelog/#2310868","title":"2310.868","text":"<ul> <li>Adds <code>OracleJava21</code>, <code>ZoomVDI</code></li> <li>Updates <code>RStudio</code> to use the Stable release feed instead of the Dailies feed #554</li> <li>Updates <code>Zoom</code> to use the download JSON found in the Zoom downloads page #555</li> <li>Fixes an issue with <code>OracleJava17</code> (and all Oracle Java apps) where a later version was returned instead of the release version #558</li> </ul>"},{"location":"changelog/#breaking-changes_3","title":"Breaking Changes","text":"<ul> <li><code>Zoom</code> has been split into <code>Zoom</code> and <code>ZoomVDI</code>. These functions also provide different property values. #556</li> </ul>"},{"location":"changelog/#2309859","title":"2309.859","text":"<ul> <li>Adds <code>OracleJava20</code>, <code>OracleJava17</code> #381</li> <li>Adds <code>Get-VMwareSDWANClient</code>, <code>MicrosoftODBCDriverForSQLServer</code>, <code>MicrosoftOLEDBDriverForSQLServer</code></li> <li>Updates <code>GoogleChrome</code> to address missing <code>x86</code> installers #550</li> <li>Updates <code>GhislerTotalCommander</code> to address version and URL issue #552</li> <li>Updates <code>GitForWindows</code> to address version string issue #511</li> <li>Optimises shared code for Hashicorp apps</li> <li>Optimises shared code for Opera apps</li> <li>Optimises shared code for Oracle Java apps</li> <li>Optimises shared code for VMware apps #474</li> <li>Updates <code>MicrosoftVisualStudio</code> to return release <code>17</code></li> </ul>"},{"location":"changelog/#2309850","title":"2309.850","text":"<ul> <li>Adds <code>UnitySetup</code> #245</li> <li>Updates <code>GoogleChrome</code> to address retirement of update source #546</li> <li>Updates <code>MicrosoftOneDrive</code> to add the <code>Throttle</code> property to assist filtering the current rollout version #547</li> <li>Removes <code>MicrosoftOpenJDK16</code>, <code>MicrosoftOpenJDK8</code> as binaries are not available</li> </ul>"},{"location":"changelog/#2309840","title":"2309.840","text":"<ul> <li>Adds <code>BellSoftLibericaJDK20</code>, <code>BellSoftLibericaJDK17</code>, <code>BellSoftLibericaJDK11</code>, <code>BellSoftLibericaJDK8</code> #539</li> <li>Adds <code>AdoptiumTemurin20</code>, <code>AdoptiumTemurin19</code> #540</li> <li>Adds <code>MicrosoftOpenJDK17</code>, <code>MicrosoftOpenJDK16</code>, <code>MicrosoftOpenJDK11</code>, <code>MicrosoftOpenJDK8</code> #540</li> <li>Adds <code>AzulZulu17</code>, <code>AzulZulu11</code>, <code>AzulZulu8</code> #540</li> <li>Adds <code>RedHatOpenJDK17</code>, <code>RedHatOpenJDK8</code>, <code>RedHatOpenJDK11</code> #540</li> <li>Updates <code>AdoptiumTemurin</code> apps to optimise shared code</li> <li>Removes <code>AdoptOpenJDK11</code>, <code>AdoptOpenJDK16</code>, <code>AdoptOpenJDK8</code>, <code>AdoptOpenJDKIcedTeaWeb</code>, <code>AdoptOpenJDKSemuru11</code>, <code>AdoptOpenJDKSemuru17</code>, <code>AdoptOpenJDKSemuru18</code>, <code>AdoptOpenJDKSemuru8</code> #540</li> </ul>"},{"location":"changelog/#2308831","title":"2308.831","text":"<ul> <li>Adds <code>GoogleChromeDriver</code> #537, <code>ControlUpRemoteDX</code></li> <li>Adds <code>Get-JetBrainsYouTrack</code>, <code>Get-JetBrainsGateway</code>, <code>Get-JetBrainsHub</code>, <code>Get-JetBrainsTeamCity</code>, <code>JetBrainsToolbox</code></li> <li>Adds internal function <code>Get-JetBrainsApp</code> for shared code for JetBrains functions</li> </ul>"},{"location":"changelog/#2308823","title":"2308.823","text":"<ul> <li>Adds <code>DruvainSyncClient</code> #524, <code>JetBrainsCLion</code>, <code>JetBrainsDataGrip</code>, <code>JetBrainsDataSpell</code>, <code>JetBrainsGoLand</code>, <code>JetBrainsPhpStorm</code>, <code>JetBrainsRubyMine</code>, <code>JetBrainsWebStorm</code></li> <li>Updates <code>JetBrainsIntelliJIDEA</code>, <code>JetBrainsPyCharm</code></li> <li>Updates <code>OpenLens</code> with additional installer types</li> </ul>"},{"location":"changelog/#2307816","title":"2307.816","text":"<ul> <li>Fixes an issue in <code>Get-EvergreenApp</code> where <code>-AppParams</code> was not being passed to the application function</li> </ul>"},{"location":"changelog/#2307810","title":"2307.810","text":"<ul> <li>Adds <code>NodeJs</code> #510, <code>GeoGebraClassic</code>, <code>LehrerOffice</code>, <code>ThymioSuite</code>, <code>TPGiColourContrastAnalyser</code> #519</li> <li>Fixes an issue with <code>MicrosoftVisualStudioCode</code> #518</li> <li>Fixes an issue with <code>jq</code> due to a change in repository</li> <li>Removes <code>CitrixVMTools</code> - Citrix VM Tools requires a login to download #512</li> <li>Updates <code>Get-EvergreenApp</code> to return clearer output when an application function fails</li> </ul>"},{"location":"changelog/#2305801","title":"2305.801","text":"<ul> <li>Add <code>mySQLWorkbench</code> #499, <code>MicrosoftAzureCLI</code> #506</li> <li>Adds MSI file type to <code>Win32OpenSSH</code> #505</li> <li>Adds Windows Server Hosting and ASP Net Core Runtimes to <code>Microsoft.NET</code> #501</li> <li>Update <code>Get-EvergreenLibraryApp</code> to account for non-standard version numbers #502</li> <li>Update <code>Get-GitHubRepoRelease</code> to support finding a version number from repository tags</li> <li>Fix a duplicate object issue in <code>Anaconda</code> #503</li> <li>Fix an issue in <code>ChromiumChromeDriver</code> where the version doesn't match Google Chrome #500</li> <li>Removes version <code>3.1</code> from <code>Microsoft.NET</code> #507</li> </ul>"},{"location":"changelog/#2305798","title":"2305.798","text":"<ul> <li>Adds <code>OCSInventoryWindowsAgent</code> #496, <code>GoogleDrive</code> #480, <code>gsudo</code> #464</li> <li>Removes HDX RTME from <code>CitrixWorkspaceApp</code> #493</li> <li>Fixes an issue with the <code>-Body</code> parameter on the internal function <code>Invoke-RestMethodWrapper</code></li> </ul>"},{"location":"changelog/#2305795","title":"2305.795","text":"<ul> <li>Fixes an issue with <code>MicrosoftWvdInfraAgent</code> where the source no longer returns the download size #490</li> <li>Updates private function <code>GitHubRepoRelease</code> to return a new property <code>InstallerType</code> with values for <code>Portable</code>, <code>User</code>, or <code>Debug</code> based on the installer type. This property has a default value of <code>Default</code> where none of the other types are supported</li> <li>Adds private function <code>Get-InstallerType</code> to determine the installer type</li> <li>Fixes an issue with <code>Export-EvergreenApp</code> where the version property is not a proper version number #491</li> <li>Some small code improvements in public functions</li> </ul>"},{"location":"changelog/#2305793","title":"2305.793","text":"<ul> <li>Update <code>MicrosoftWvdMultimediaRedirection</code> to remove file size as value is not returned from Microsoft source</li> </ul>"},{"location":"changelog/#2304791","title":"2304.791","text":"<ul> <li>Fix an issue in <code>Get-SourceForgeRepoRelease.ps1</code> - fix an issue introduced in <code>2304.790</code> on Windows PowerShell where URLs are being returned with <code>\\</code> instead of <code>/</code> - updates the approach to building the file URL path #483</li> </ul>"},{"location":"changelog/#2304790","title":"2304.790","text":"<ul> <li>Adds <code>MicrosoftTeamsPreview</code> which will return versions and installers for the Microsoft Teams preview. Note: this function will change in a future release once this version of Teams is out of preview</li> <li>Adds <code>ARM64</code> architecture to <code>MicrosoftOneDrive</code></li> <li>Updates <code>Minitab</code> by removing version 19 and adding version 21</li> <li>Updates internal function <code>Get-SourceForgeRepoRelease</code> to determine a download mirror and return that in URLs #483</li> </ul>"},{"location":"changelog/#2303789","title":"2303.789","text":"<ul> <li>Adds <code>GoToConnect</code> #469, <code>MicrosoftAzurePipelinesAgent</code> #472, <code>AutodeskFusion360</code>, <code>GoToConnect</code> #469, <code>PDFArranger</code> #471</li> <li>Adds a temporary fix for <code>VMwareWorkstationPlayer</code>, and <code>VMwareWorkstationPro</code> with new download URLs #474</li> </ul>"},{"location":"changelog/#breaking-changes_4","title":"Breaking Changes","text":"<ul> <li>Renames <code>LogMeInGoToMeeting</code> and <code>LogMeInGoToOpener</code> to <code>GoToMeeting</code> and <code>GoToOpener</code></li> </ul>"},{"location":"changelog/#2303788","title":"2303.788","text":"<ul> <li>Adds <code>ResponsivelyApp</code></li> <li>Addresses a change in source update data for <code>VMwareHorizonClient</code> #460</li> <li>Fixes an issue in <code>Export-EvergreenApp</code> #463</li> <li>Fixes an issue with <code>AWSCLI</code> where the incorrect version number would be returned</li> <li>Fixes an issue with ESET applications where the version number for a specific language can be higher than other languages, and only releases for a single language is returned #466</li> <li>Reverts changes to the URLs used by <code>OctopusTentacle</code></li> <li>Fix an issue with incorrect application name and URLs in <code>MicrosoftOutlook</code> #465</li> </ul>"},{"location":"changelog/#2301787","title":"2301.787","text":"<ul> <li>Fix an issue in <code>Resolve-InvokeWebRequest</code> where a throw would only occur under Windows PowerShell preventing app functions that require loops to exit without returning data #452</li> <li>Fix an issue in <code>Get-EvergreenApp</code> where null was sent to Write-Information</li> </ul>"},{"location":"changelog/#2301786","title":"2301.786","text":"<ul> <li>Adds <code>Get-EvergreenLibraryApp</code></li> <li>Fix an issue with <code>OctopusTentacle</code> where URL redirects are not followed</li> </ul>"},{"location":"changelog/#2301769","title":"2301.769","text":"<ul> <li>Fixes an issue with <code>MicrosoftWvdRemoteDesktop</code></li> <li>Removes <code>x86</code> architecture from <code>OBSStudio</code></li> </ul>"},{"location":"changelog/#2301767","title":"2301.767","text":"<ul> <li>Fixes an issue with <code>OBSStudio</code> where the incorrect URI was returned where build number equals 0 #445</li> <li>Updates <code>Invoke-EvergreenApp</code> to check for supported applications before posting a request</li> <li>Updates <code>MozillaFirefox</code> to suppress errors and warning when attempting to return installers for specific languages</li> <li>Updates various private functions to ensure consistent use of <code>throw</code> when encountering an error</li> </ul>"},{"location":"changelog/#2301717","title":"2301.717","text":"<ul> <li>Fixes filename case for <code>AppVentiX</code> which was causing issues when run on Linux</li> <li>Remove the use of the <code>-Depth</code> parameter when used with <code>ConvertFrom-Json</code> as this is not supported on PowerShell 5.1 #442</li> <li>Code optimisations for various functions via improved Pester tests and code coverage review (CodeCov) including removing code that would never be executed under normal circumstances</li> </ul>"},{"location":"changelog/#2212715","title":"2212.715","text":"<ul> <li>Adds <code>MicrosoftVdot</code></li> <li>Adds parameter <code>-UserAgent</code> to <code>Test-EvergreenApp</code></li> </ul>"},{"location":"changelog/#2212709","title":"2212.709","text":"<ul> <li>Adds <code>NanaZip</code> #430</li> <li>Adds parameter <code>-UserAgent</code> to <code>Save-EvergreenApp</code> #437 #436</li> </ul>"},{"location":"changelog/#2212704","title":"2212.704","text":"<ul> <li>Adds <code>GitHubDesktop</code></li> <li>Fixes <code>GhislerTotalCommander</code> due to change in version number format #423</li> <li>Updates <code>DockerDesktop</code> with release type. Switches installers from MSI to supported EXE installers</li> <li>Updates <code>Zoom</code> with Universal VDI and AVD plug-ins</li> </ul>"},{"location":"changelog/#2211697","title":"2211.697","text":"<ul> <li>Fixes an issue with returning data for <code>MicrosoftWvdMultimediaRedirection</code> due to a change in the Microsoft source #418. Note: due to a change in the source file name, determining the version is difficult, thus the version string will be returned as-is</li> </ul>"},{"location":"changelog/#2211694","title":"2211.694","text":"<ul> <li>Adds <code>XnSoftXnViewMP</code>, <code>XnSoftXnConvert</code> #416, <code>KDiff3</code></li> <li>Adds <code>MicrosoftTerminal</code>, <code>AWSCLI</code>, <code>YubicoAuthenticator</code></li> </ul>"},{"location":"changelog/#2211686","title":"2211.686","text":"<ul> <li>Adds <code>SafingPortmaster</code>, <code>VMPlexWorkstation</code>, <code>AdoptOpenJDKIcedTeaWeb</code>, <code>AdoptOpenJDKSemuru18</code>, <code>AdoptOpenJDKSemuru17</code>, <code>AdoptOpenJDKSemuru11</code>, <code>AdoptOpenJDKSemuru8</code>, <code>AirtameApp</code>, <code>MicrosoftAzureWindowsVMAgent</code> #413</li> <li>Adds <code>-SkipCertificateCheck</code> parameter to <code>Get-EvergreenApp</code> - allows for ignoring certificate errors when checking for application updates. Useful for when a vendor forgets to renew a certificate #412; however, data returned should be validated</li> <li>Fixes an issue with <code>FoxitReader</code> and <code>FoxitPDFEditor</code> when resolving the installer URI</li> </ul>"},{"location":"changelog/#2210676","title":"2210.676","text":"<ul> <li>Updates <code>MozillaFirefox</code>, <code>MozillaThunderbird</code>, <code>CendioThinLinc</code>, <code>MendeleyDesktop</code>, <code>OctopusTentacle</code> to improve performance. Execution time has been improved by 30% or more</li> <li>Remove <code>Unstable</code> channel from <code>ProgressChefWorkstation</code> (which isn't supported by the update API anyway)</li> </ul>"},{"location":"changelog/#2210674","title":"2210.674","text":"<ul> <li>Adds <code>ProgressChefInfraClient</code>, <code>ProgressChefInSpec</code>, <code>ProgressChefWorkstation</code></li> <li>Adds <code>ESETSecureAuthentication</code>, <code>ESETEndpointAntivirus</code>, <code>ESETEndpointSecurity</code>, <code>ESETFullDiskEncryption</code>, <code>ESETInspectConnector</code>, <code>ESETPROTECTServer</code>, <code>ESETSecureAuthentication</code>, <code>ESETServerSecurity</code> #347</li> <li>Updates <code>WinMerge</code> to query application updates from GitHub #404</li> <li>Adds proxy server support for the following functions - <code>Get-EvergreenApp</code>, <code>Save-EvergreenApp</code>, <code>Invoke-EvergreenLibraryUpdate</code>. Adds <code>-Proxy</code> and <code>-ProxyCredential</code> arguments. <code>Get-EvergreenApp</code> sets an environment variable for the proxy server address and credential for use by internal app and private functions. <code>Save-EvergreenApp</code> and <code>Invoke-EvergreenLibraryUpdate</code> either use these parameters directly or pass the parameters to other functions</li> <li>Fix spelling on <code>Microsoft365Apps</code> channels #406</li> </ul>"},{"location":"changelog/#2210661","title":"2210.661","text":"<ul> <li>Adds <code>OpenLens</code>, <code>MicrosoftOutlook</code>, <code>AWSSAMCLI</code>, <code>ChromiumChromeDriver</code> #375, <code>GitExtensions</code>, <code>KeeWeb</code>, <code>Maximus5ConEmu</code></li> <li>Updates <code>OracleVirtualBox</code> with release channels - <code>STABLE</code>, <code>LATEST</code>, <code>BETA</code></li> <li>Updates <code>AdobeAcrobatProStdDC</code> to address an issue with the source query, and adds download URIs for <code>x86</code></li> <li>Fixes <code>MicrosoftWvdMultimediaRedirection</code> where the source URL has changed #401</li> </ul>"},{"location":"changelog/#2210645","title":"2210.645","text":"<ul> <li>Adds <code>OnlyOfficeDesktopEditors</code>, <code>OperaCryptoBrowser</code>. <code>AdobeConnect</code> #382</li> <li>Updates channels for <code>OperaBrowser</code> #299</li> <li>Updates property output for <code>OperaBrowser</code> and <code>OperaGXBrowser</code> #299</li> </ul>"},{"location":"changelog/#2209641","title":"2209.641","text":"<ul> <li>Adds <code>PiriformCCleanerFree</code> #291, <code>RizonesoftNotepad3</code>, <code>ZorgmailVeiligVerzendenAddin</code>, <code>SoberLemurPDFSamBasic</code> #390</li> <li>Updates <code>Zoom</code> with additional installers #377</li> <li>Updates <code>AdobeAcrobat</code> with the 64-bit MUI update</li> <li>Fixes missing manifest for <code>ConnectionExperienceIndicator</code></li> <li>Updates <code>MozillaFirefox</code> with the <code>FIREFOX_ESR_NEXT</code> channel #383</li> </ul>"},{"location":"changelog/#2209629","title":"2209.629","text":"<ul> <li>Adds <code>TrackerSoftwarePDFXChangeEditor</code> #371, <code>MozillaGeckoDriver</code> #375</li> <li>Adds additional release rings for <code>MicrosoftTeams</code></li> <li>Updates <code>MicrosoftOneDrive</code> to better handle the update source that returns BOM characters without having to perform a find/replace</li> <li>Updates public functions for better support for <code>-WhatIf</code> #372</li> </ul>"},{"location":"changelog/#2209622","title":"2209.622","text":"<ul> <li>Updates <code>BitwardenDesktop</code> to fix an issue with a change in GitHub repositories #365</li> <li>Updates <code>VMwareTools</code> to address returning the latest Tools version where that version is not yet bundled with ESXi. #336</li> <li>Updates <code>PDFForgePDFCreator</code> to change the source location for updates and ensure it returns the current version #368</li> </ul>"},{"location":"changelog/#2208618","title":"2208.618","text":"<ul> <li>Updates <code>Zoom</code> to add <code>x64</code> and <code>ARM64</code> support for meetings clients. Updates <code>Platform</code> property to better identify application installer</li> <li>Updates <code>Invoke-EvergreenLibraryUpdate</code> to add installer path to application version information JSON file #362</li> </ul>"},{"location":"changelog/#breaking-changes_5","title":"Breaking Changes","text":"<ul> <li>The values of the <code>Property</code> property in <code>Zoom</code> have changed. The values are <code>Meetings</code>, <code>Rooms</code>, <code>Plugin</code>, <code>VDI</code>, <code>Citrix</code>, <code>VMware</code></li> </ul>"},{"location":"changelog/#2207609","title":"2207.609","text":"<ul> <li>Adds functions to create an Evergreen library - a library is a directory that contains application installers and allows you to keep multiple versions. Functions are <code>New-EvergreenLibrary</code>, <code>Invoke-EvergreenLibraryUpdate</code>, and <code>Get-EvergreenLibrary</code> #357</li> <li>Updates <code>MicrosoftFSLogixApps</code> to revert the source URL to <code>https://aka.ms/fslogix/download</code>. Hey, Microsoft, any chance you could stop changing the source URL please!? #359</li> <li>Updates output from <code>Get-EvergreenApp</code> where a an unsupported value for <code>-Name</code> is specified. <code>Get-EvergreenApp</code> will attempt to output supported similar applications</li> <li>Fixes an issue in <code>AdoptiumTemurin8</code>, <code>AdoptiumTemurin11</code>, <code>AdoptiumTemurin16</code>, <code>AdoptiumTemurin17</code>, <code>AdoptiumTemurin18</code> to address instances where releases returned from the update feed don't include details for MSI installers #360</li> </ul>"},{"location":"changelog/#2207596","title":"2207.596","text":"<ul> <li>Adds function <code>Export-EvergreenApp</code> - exports application details gathered by <code>Get-EvergreenApp</code> to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file.</li> </ul>"},{"location":"changelog/#2207592","title":"2207.592","text":"<ul> <li>Updates the approach to detecting new versions in <code>MicrosoftWvdRemoteDesktop</code>. Uses update details available in JSON format and addresses issue #352</li> <li>Fixes and issue in <code>VMwareTools</code> where the download URL returned doesn't match the latest version available #336</li> <li>Removes hard-coded <code>ErrorAction = Continue</code> in private function <code>Invoke-WebRequestWrapper</code> to enable setting <code>ErrorAction</code> preference when calling this function from an application function</li> </ul>"},{"location":"changelog/#2206583","title":"2206.583","text":"<ul> <li>Fixes an issue with <code>MozillaThunderbird</code> when attempting to return downloads for the full language list #350</li> </ul>"},{"location":"changelog/#2206581","title":"2206.581","text":"<ul> <li>Adds <code>AppVentiX</code> #205</li> <li>Updates <code>MozillaThunderbird</code> to align with <code>MozillaFirefox</code> - this function will return <code>en-US</code> as the default language. Additional languages can be passed to <code>MozillaThunderbird</code> via <code>Get-EvergreenApp -AppParams</code></li> <li>Updates private function <code>Get-GitHubRepoRelease</code> to support authentication to the GitHub API with a personal access token. The function will look for the <code>GITHUB_TOKEN</code> or <code>GH_TOKEN</code> environment variables and use the value of that variable in the authentication request, if the variable exists #195</li> </ul>"},{"location":"changelog/#2206574","title":"2206.574","text":"<ul> <li>Adds <code>AutoDarkMode</code> #335, <code>CodelerityApacheNetBeans</code> #339, <code>JeremyMainGPUProfiler</code> #337,<code>EgnyteDesktopApp</code> #340</li> <li>Fixes <code>SumatraPDFReader</code> due to changes in download URLs #338</li> </ul>"},{"location":"changelog/#2205567","title":"2205.567","text":"<ul> <li>Adds <code>DockerDesktop</code> #332</li> <li>Updates <code>1Password</code> to return 1Password 8.x update; <code>1Password7</code> will now continue to return updates for 1Password 7.x #330</li> <li>Addresses an issue in <code>RCoreTeamRforWindows</code> to better handle when the source site is down</li> <li>Updates the source used for <code>MicrosoftFSLogixApps</code> - this is a workaround because Microsoft has changed the aka.ms link to the FSLogix Apps agent download, again. I really wish they would stop doing that.</li> </ul>"},{"location":"changelog/#2205561","title":"2205.561","text":"<ul> <li>Adds <code>VMwareOSOptimizationTool</code></li> <li>Adds <code>VMwareHorizonClientAlt</code> (an alternative method for retrieving details for the VMware Horizon Client.)</li> <li>Fix an issue with <code>VMwareTools</code> due to changes in source data</li> <li>Fix an issue with <code>MattermostDesktop</code> due to changes in releases on the GitHub repository</li> </ul>"},{"location":"changelog/#breaking-changes_6","title":"Breaking Changes","text":"<ul> <li>The following applications have been removed from Evergreen as they provide only links to downloads rather than direct links to installers - <code>CitrixAppLayeringFeed</code>, <code>CitrixApplicationDeliveryManagementFeed</code>, <code>CitrixEndpointManagementFeed</code>, <code>CitrixGatewayFeed</code>, <code>CitrixHypervisorFeed</code>, <code>CitrixLicensingFeed</code>, <code>CitrixReceiverFeed</code>, <code>CitrixSdwanFeed</code>, <code>CitrixVirtualAppsDesktopsFeed</code>, <code>CitrixWorkspaceAppFeed</code></li> </ul>"},{"location":"changelog/#2205555","title":"2205.555","text":"<ul> <li>Adds <code>AdoptiumTemurin18</code>, <code>Tower</code></li> <li>Adds <code>VMwareWorkstationPlayer</code>, <code>VMwareWorkstationPro</code> #275</li> <li>Updates <code>Resolve-DnsNameWrapper</code> (and <code>GhislerTotalCommander</code>) to work under PowerShell Core using DnsClient-PS. Manual installation of DnsClient-PS on macOS or Linux is required</li> </ul>"},{"location":"changelog/#2205549","title":"2205.549","text":"<ul> <li>Fixes an issue in <code>TechSmithSnagit</code> and <code>GitForWindows</code> under Linux where filename case was preventing <code>Get-EvergreenApp</code> from sourcing application functions</li> <li>Removes <code>Date</code> property from <code>PuTTY</code> as the value is updated on each query, rather than when the version was released</li> <li>Updates <code>Resolve-DnsNameWrapper</code> with <code>Import-Module -Name \"DnsClient\"</code> to ensure the <code>Resolve-DnsName</code> command is available</li> </ul>"},{"location":"changelog/#2205546","title":"2205.546","text":"<ul> <li>Updates <code>RStudio</code> with new update sources for all curren branches and now returns Free and Pro editions #318</li> <li>Fixes an issue with installers returned by <code>MicrosoftEdgeDriver</code> and <code>MicrosoftEdgeWebView2Runtime</code></li> <li>Updates <code>McNeelRhino</code> to work under PowerShell 6/7 - resolves an issue when using <code>Invoke-RestMethod</code> which does not follow a HTTP 302 response</li> </ul>"},{"location":"changelog/#breaking-changes_7","title":"Breaking Changes","text":"<ul> <li><code>RStudio</code> returns new properties that will require filtering the output. Properties include: <code>Branch</code>, <code>Channel</code>, <code>ProductName</code>, and <code>InstallerName</code></li> </ul>"},{"location":"changelog/#2205541","title":"2205.541","text":"<ul> <li>Fixes <code>MicrosoftSsms</code> to address returning the latest version and binaries #305</li> <li>Fixes an issue in <code>MicrosoftEdge</code>, <code>MicrosoftEdgeDriver</code>, <code>MicrosoftEdgeWebView2Runtime</code> where versions were sorted differently between PowerShell Core and Windows PowerShell to ensure the correct versions are returned #311</li> <li>Fixes an issue in <code>VeraCrypt</code> where the version string returned was not correct</li> </ul>"},{"location":"changelog/#2205537","title":"2205.537","text":"<ul> <li>Adds <code>AdobeAcrobatProStdDC</code> to return the current version number and the trial installer for Adobe Acrobat DC Standard and Pro</li> <li>Fixes a regression introduced in version <code>2204.534</code> where <code>AdobeAcrobatReaderDC</code> was renamed to <code>AdobeAcrobatReader</code></li> </ul>"},{"location":"changelog/#2204534","title":"2204.534","text":"<ul> <li>Adds <code>Test-EvergreenApp</code> that enables testing of installers returned by <code>Save-EvergreenApp</code> to determine whether the URI is valid</li> <li>Adds <code>AdobeAcrobatDC</code> that uses an alternative method to <code>AdobeAcrobat</code> to determine the current version of Adobe Acrobat Standard/Pro DC and Adobe Acrobat Reader DC. <code>AdobeAcrobat</code> has been left as-is to avoid a breaking change and to continue to provide updates for earlier versions of Acrobat / Reader updates</li> <li>Adds <code>Obsidian</code> #310, <code>ScreenToGif</code></li> <li>Updates <code>MicrosoftEdge</code>, <code>MicrosoftEdgeDriver</code>, <code>MicrosoftEdgeWebView2Runtime</code> to ensure that the correct versions are returned for the <code>Enterprise</code> view for Edge installers #311</li> <li>Updates various functions to use <code>Write-Error</code> instead of <code>throw</code> to ensure that functions continue where a specific query for an installer fails #306</li> </ul>"},{"location":"changelog/#breaking-changes_8","title":"Breaking Changes","text":"<ul> <li>Updates the approach used in <code>AdobeAcrobatReaderDC</code> to determine the version and available downloads for Adobe Acrobat Reader DC. Adobe has changed the available enterprise installers at https://get.adobe.com/uk/reader/enterprise/ #312</li> </ul>"},{"location":"changelog/#2202525","title":"2202.525","text":"<ul> <li>Adds <code>DevToys</code>, <code>DebaucheeBarrier</code></li> <li>Update <code>Save-EvergreenApp</code> to return error code on download failure instead of Throw. This allows the function to continue when multiple objects are passed into the function</li> </ul>"},{"location":"changelog/#2202521","title":"2202.521","text":"<ul> <li>Adds <code>HashicorpPacker</code>, <code>HashicorpBoundary</code>, <code>HashicorpVault</code>, <code>HashicorpWaypoint</code>, <code>HashicorpConsul</code>, <code>HashicorpTerraform</code>, <code>HashicorpNomad</code> #241</li> </ul>"},{"location":"changelog/#2201519","title":"2201.519","text":"<ul> <li>Adds <code>TogglDesktop</code> #281, <code>OperaBrowser</code> #299, <code>OperaGXBrowser</code> #299</li> <li>Adds Hindi language to <code>AdobeAcrobatReaderDC</code> to add the MUI installer to the list of returned installers #297</li> <li>Updates the approach used in <code>Microsoft365Apps</code> to find branch version details #294. The previous approach would occasionally list incorrect versions</li> </ul>"},{"location":"changelog/#2112512","title":"2112.512","text":"<ul> <li>Adds <code>MicrosoftWvdMultimediaRedirection</code> https://docs.microsoft.com/en-us/azure/virtual-desktop/multimedia-redirection</li> <li>Updates the source URL for <code>MicrosoftWvdRtcService</code> #288</li> <li>Updates installer types for <code>NotepadPlusPlus</code> #287</li> <li>Fixes an issue with <code>MicrosoftPowerShell</code> due to changes in the update source #282</li> <li>Addresses code issues identified with PSScriptAnalyzer</li> </ul>"},{"location":"changelog/#2112504","title":"2112.504","text":"<ul> <li>Adds <code>ImageMagickStudioImageMagick</code> #242, <code>Miniconda</code> #246, <code>TorProjectTorBrowser</code> #246, <code>diagrams.net</code> #276</li> <li>Adds <code>AdoptiumTemurin8</code>, <code>AdoptiumTemurin11</code>, <code>AdoptiumTemurin16</code>, <code>AdoptiumTemurin17</code> and addresses #273 #199,</li> <li>Updates <code>MicrosoftOneDrive</code> with new update sources and adds more update channels. Now includes: <code>Production</code>, <code>Enterprise</code>, <code>Insider</code>, <code>InternalSlow</code>, <code>InternalFast</code> #269</li> <li>Updates <code>MicrosoftTeams</code> with new approach for dynamically determining download URLs and adds <code>.exe</code> installers</li> <li>Updates <code>Microsoft.NET</code> due to changes in source location for .NET 6. Dynamically finds installer source URLs and provides <code>windowsdesktop</code>, <code>runtime</code>, <code>sdk</code> installers. Includes .NET <code>6.0</code>, <code>5.0</code> and <code>3.1</code> #278</li> <li>Updates <code>FoxitPDFEditor</code> to fix an issue with changes to language properties from the update source #274</li> <li>Updates <code>GitHubRelease</code> with additional file types to return by default Thanks to @JonathanPitre</li> </ul>"},{"location":"changelog/#2111488","title":"2111.488","text":"<ul> <li>Adds <code>-CustomPath</code> parameter to <code>Save-EvergreenApp</code> - allows for specifying a specific target directory for downloads instead of building the directory structure automatically from the input object #260</li> <li>Adds <code>OctopusDeployServer</code> #238, <code>OctopusTentacle</code> #239, <code>7ZipZS</code> #232, <code>PDF24Creator</code> #258, <code>MicrosoftEdgeDriver</code> #262, <code>MirantisLens</code> #248, <code>GeekSoftwarePDF24Creator</code> #256</li> <li>Adds <code>dbeaver</code>, <code>MattermostDesktop</code>, <code>PuTTY</code> #255. Thanks to @BornToBeRoot</li> <li>Adds <code>VisualCppRedistAIO</code> #250, <code>OpenWebStart</code> #263. Thanks to @JonathanPitre</li> <li>Updates <code>MozillaFirefox</code> to output MSIX file type and ARM64 architecture</li> <li>Updates <code>AmazonCorretto</code> to include version 17 #249</li> <li>Updates <code>GoogleChrome</code> to include channels <code>Dev</code> and <code>Beta</code> #243</li> <li>Updates source URI for <code>MicrosoftFSLogixApps</code> due to changes in source #259</li> <li>Fixes URI values for <code>SumatraPDFViewer</code> due to changes in source #211</li> <li>Fixes URI values for <code>FoxitReader</code> due to changes in source #261</li> </ul>"},{"location":"changelog/#breaking-changes_9","title":"Breaking Changes","text":"<ul> <li>Removes all default languages from <code>MozillaFirefox</code> and includes <code>en-US</code> only. Any supported languages can be passed to <code>MozillaFirefox</code> by passing a hashtable to <code>-AppParams</code>. For example: <code>Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{Language=\"en-GB\", \"es-ES\"}</code></li> <li>Removes <code>FIREFOX_ESR_NEXT</code> from <code>MozillaFirefox</code> as the Firefox update feed is not including the version number</li> </ul>"},{"location":"changelog/#2110467","title":"2110.467","text":"<ul> <li>Fixes an issue with <code>AdobeAcrobat</code> where the string returned from the Adobe update API added a new line after the version number #233</li> <li>Adds <code>GhislerTotalCommander</code> #229, <code>PaintDotNetOfflineInstaller</code> #235, <code>TelerikFiddlerClassic</code>, <code>voidtoolsEverything</code> #230</li> <li>Adds <code>USBPcap</code>. Thanks to Dan Gough</li> <li>Updates method used to determine version and download for <code>JSAP</code></li> <li>Adds private function <code>Resolve-DnsNameWrapper</code> to resolve DNS TXT records. Used by <code>GhislerTotalCommander</code>. Currently supports Windows only</li> </ul>"},{"location":"changelog/#breaking-changes_10","title":"Breaking Changes","text":"<ul> <li>Disables <code>LibreOffice</code> - the update method keeps changing requiring a significant amount of work to fix each time. #218</li> <li>Updates <code>Microsoft365Apps</code> to fix some instances where the incorrect version number returned, and updates channel names in <code>Channel</code> property using the names listed in the <code>Channel</code> property in the configuration.xml. A <code>Name</code> property has been added with the full channel names to ensure readability. This reflects the same channel names used when creating a configuration in the Microsoft 365 Apps admin center</li> <li>Channel properties are listed in the following articles: Configuration options for the Office Deployment Tool, Update channel for Office LTSC 2021, Update channel for Office 2019</li> <li>Full channel names are listed here: Update history for Microsoft 365 Apps</li> </ul>"},{"location":"changelog/#2108458","title":"2108.458","text":"<ul> <li>Adds <code>MicrosoftEdgeWebView2Runtime</code>, <code>MicrosoftBotFrameworkEmulator</code>, <code>Naps2</code>, <code>SmartBearSoapUI</code>, <code>NevcairielLAVFilters</code></li> <li>Adds the parameter <code>-AppParams</code> to <code>Get-EvergreenApp</code> that takes a hashtable of parameters to be passed to the internal application functions. Right now, this will only work with <code>GitHubRelease</code> - enabling Evergreen to return the releases for any GitHub repository with Windows releases that you pass via <code>-AppParams</code></li> <li>Updates the approach used for <code>TelegramDesktop</code>, because Telegram posts a release to GitHub that doesn't match the latest Windows release</li> </ul>"},{"location":"changelog/#breaking-changes_11","title":"Breaking Changes","text":"<ul> <li>Updates the channel names, and adds additional channels, in <code>Microsoft365Apps</code> - this release adds all available Microsoft 365 Apps channels - <code>FirstReleaseCurrent</code>, <code>Insiders</code>, <code>Monthly</code>, <code>Current</code>, <code>MonthlyEnterprise</code>, <code>Deferred</code>, <code>Broad</code>, <code>Targeted</code>, <code>FirstReleaseDeferred</code>, <code>Perpetual2019</code>, <code>PerpetualVL2019</code></li> <li>Disables <code>CiscoWebEx</code> - function is unable to return the current WebEx version using the existing method and no working method has been found</li> </ul>"},{"location":"changelog/#2108450","title":"2108.450","text":"<ul> <li>Adds <code>deviceTRUST</code></li> <li>Fixes an issue in <code>Save-EvergreenApp</code> when the path specified in the <code>-Path</code> parameter does not exist</li> <li>Updates <code>LibreOffice</code> to gracefully handle download a scenario where the The Document Foundation pulls the download links for a published version #218</li> </ul>"},{"location":"changelog/#breaking-changes_12","title":"Breaking Changes","text":"<ul> <li>Updates <code>Postman</code> with <code>x86</code> and <code>x64</code> architecture</li> <li>Updates <code>LibreOffice</code> with <code>Release</code> property with a value of <code>Still</code> or <code>Fresh</code></li> </ul>"},{"location":"changelog/#2107441","title":"2107.441","text":"<ul> <li>Adds <code>FoxitPDFEditor</code></li> <li>Adds <code>FreedomScientificFusion</code>, <code>FreedomScientificJAWS</code>, <code>FreedomScientificZoomText</code>, <code>MestrelabMnova</code>, <code>jrsoftwareInnoSetup</code>. Thanks to @adotcoop</li> <li>Updates the process used to determine updates in <code>TableauDesktop</code>. Thanks to @adotcoop</li> <li>Updates <code>DatePattern</code> in <code>PSFPython</code> to return the correct localised date</li> <li>Updates <code>AdobeReaderDC</code> with internal function <code>Invoke-RestMethodWrapper</code> replacing direct use of <code>Invoke-RestMethod</code></li> <li>Updates <code>MicrosoftWvdBootloader</code>, <code>MicrosoftWvdInfraAgent</code>, <code>MicrosoftWvdRemoteDesktop</code>, <code>MicrosoftWvdRtcService</code>, <code>OracleVirtualBox</code>, and <code>LibreOffice</code> to use internal function <code>Invoke-WebRequestWrapper</code> replacing direct use of <code>Invoke-WebRequest</code></li> <li>Updates internal function <code>Invoke-WebRequestWrapper</code> with parameter <code>-ReturnObject</code> to enable application functions to return Headers, Content, RawContent etc.</li> <li>Updates internal function <code>Invoke-WebRequestWrapper</code> with parameter <code>-Method</code> that allows, <code>Default</code>, <code>Head</code>, <code>Post</code>, etc., required by various application functions</li> </ul>"},{"location":"changelog/#2107431","title":"2107.431","text":"<ul> <li>Adds <code>SignalDesktop</code></li> <li>Updates <code>MicrosoftAzureCoreFunctionTools</code> to return MSI installers #213</li> <li>Updates <code>CitrixWorkspaceApp</code> to return a <code>Stream</code> property that includes a value of <code>Current</code> or <code>LTSR</code></li> <li>Updates <code>LibreOffice</code> #171, <code>CitrixWorkspaceApp</code>, <code>OracleJava8</code>, <code>MicrosoftSsms</code> to use <code>Invoke-RestMethodWrapper</code> to avoid needing to convert update feed into XML simplifying the code</li> </ul>"},{"location":"changelog/#breaking-changes_13","title":"Breaking Changes","text":"<ul> <li>Renames <code>AtlassianBitbucket</code> to <code>AtlassianSourcetree</code> #177</li> </ul>"},{"location":"changelog/#2107425","title":"2107.425","text":"<ul> <li>Adds <code>jq</code>, <code>PSAppDeployToolkit</code></li> <li>Adds <code>Anaconda</code>, <code>McNeelRhino</code>, <code>PSFPython</code>, <code>TableauPrep</code>, <code>TableauReader</code>, <code>TechSmithCamtasia</code>, <code>TechSmithSnagit</code>. Thanks to @adotcoop</li> <li>Updates <code>Get-GitHubRepoRelease</code> to actively query the GitHub API for available requests to avoid issues when rate limited</li> <li>Updates <code>Get-GitHubRepoRelease</code> with a new parameter - <code>-ReturnVersionOnly</code> that enables returning only the version property of the latest release. This enables finding the version number and using alternative download sources, where the vendor does not include binary releases on the GitHub repository</li> </ul>"},{"location":"changelog/#2107418","title":"2107.418","text":"<ul> <li>Adds <code>BlueJ</code>, <code>Postman</code>, <code>TableauDesktop</code>. Thanks to @adotcoop</li> <li>Adds <code>MicrosoftAzureFunctionsCoreTools</code>, <code>MasterPackager</code></li> <li>Updates <code>Get-EvergreenApp</code> to sort output on the <code>Version</code> property in descending order</li> <li>Updates internal functions <code>Invoke-SystemNetRequest</code>, <code>Invoke-WebRequestWrapper</code>, <code>Resolve-InvokeWebRequest</code>, <code>Resolve-SystemNetWebRequest</code> to not throw in the event of a source URL being unavailable, to allow for more graceful handling of vendor sources being temporarily unavailable</li> </ul>"},{"location":"changelog/#2106407","title":"2106.407","text":"<ul> <li>Adds <code>CendioThinLinc</code>, <code>JASP</code>, <code>JetBrainsIntelliJIDEA</code>, <code>JetBrainsPyCharm</code>, <code>MendeleyDesktop</code>, <code>MiniZincIDE</code>, <code>Minitab</code>, <code>MuseScore</code>, <code>Pandoc</code>, <code>Protege</code>, <code>RDAnalyzer</code>, <code>RStudio</code>, <code>SafeExamBrowser</code>, <code>Zotero</code>.  Thanks to @adotcoop</li> <li>Updates <code>MicrosoftWindowsPackageManagerClient</code> to return the <code>.appxbundle</code> installer</li> <li>Fixes an issue in <code>Save-EvergreenApp</code> when calling <code>Remove-Variable</code></li> </ul>"},{"location":"changelog/#2106402","title":"2106.402","text":"<ul> <li>Adds <code>AmazonCorretto</code>, <code>ArtifexGhostscript</code>, <code>FreeFem</code>, <code>Gephi</code>, <code>Praat</code>, <code>SAGAGIS</code>, <code>Scratch</code>, <code>TeXstudio</code>, <code>gretl</code>. Thanks to @adotcoop</li> <li>Updates private function <code>Get-Architecture</code> with additional processor architecture detections</li> <li>Updates private function <code>Get-GitHubRepoRelease</code> to return a custom object if the GitHub API is rate limited</li> </ul>"},{"location":"changelog/#breaking-changes_14","title":"Breaking Changes","text":"<ul> <li>Remove portable installers and <code>.zip</code> file types from <code>Notepad++</code></li> </ul>"},{"location":"changelog/#2106395","title":"2106.395","text":"<ul> <li>Adds <code>AkeoRufus</code> #179, <code>BlenderLauncher</code> #178</li> <li>Updates <code>MicrosoftFSLogixApps</code> to return both the production and preview releases #176</li> <li>Updates <code>Veracrypt</code> to return the complete version number (e.g. <code>1.24-Update7</code>) #166</li> </ul>"},{"location":"changelog/#breaking-changes_15","title":"Breaking Changes","text":"<ul> <li>Adds the <code>Production</code> and <code>Preview</code> channels to <code>MicrosoftFSLogixApps</code> that will require filtering with <code>Where-Object</code></li> </ul>"},{"location":"changelog/#2105388","title":"2105.388","text":"<ul> <li>Update <code>VMwareHorizonClient</code> with additional filtering to select the latest version correctly to address #161</li> <li>Add internal function <code>Save-File</code> to download a URL with <code>Invoke-WebRequest</code> and return the downloaded file path</li> <li>Update internal application functions for consistent use of <code>Resolve-SystemNetWebRequest</code> to address #174 - <code>Get-FoxitReader</code>, <code>Get-LogMeInGoToOpener</code>, <code>Get-MicrosoftSsms</code>, <code>Get-MicrosoftVisualStudio</code>, <code>Get-RingCentral</code>, <code>Get-Slack</code></li> <li>Update references to documentation site <code>https://stealthpuppy.com/Evergreen</code> to <code>https://stealthpuppy.com/evergreen</code></li> </ul>"},{"location":"changelog/#2105383","title":"2105.383","text":"<ul> <li>Adds <code>CiscoWebEx</code> (#141), <code>VeraCrypt</code> (#160), <code>KarakunOpenWebStart</code> (#163)</li> <li>Updates <code>MicrosoftWvdRemoteDesktop</code> with the Preview release and fixes source URLs for the public release</li> <li>Adds <code>ARM64</code> architecture to <code>MicrosoftTeams</code> #162</li> <li>Adds <code>MSI</code> file type to <code>Wireshark</code></li> <li>Updates internal function <code>Get-SourceForgeRepoRelease</code> with improvements to find releases and download URIs</li> </ul>"},{"location":"changelog/#2105371","title":"2105.371","text":"<ul> <li>Adds <code>Audacity</code>, <code>Wireshark</code> (#153), <code>LogMeInGoToMeeting</code> (#152), <code>LogMeInGoToOpener</code></li> <li>Updates <code>AdobeAcrobat</code> to include Reader updates for <code>2015</code>, <code>2017</code>, <code>2020</code></li> <li>Updates <code>AdobeAcrobat</code> to include 64-bit updates for Reader and Acrobat DC</li> </ul>"},{"location":"changelog/#breaking-changes_16","title":"Breaking Changes","text":"<ul> <li>Adds the <code>Architecture</code> property to <code>AdobeAcrobat</code></li> </ul>"},{"location":"changelog/#2105366","title":"2105.366","text":"<ul> <li>Fixes an issue with <code>Remove-Variable</code> in <code>Save-EvergreenApp</code> Fix #149</li> <li>Updates <code>Save-EvergreenApp</code> to skip downloading a file if it already exists and adds support for <code>-Force</code></li> <li>Updates help for <code>Save-EvergreenApp</code></li> <li>Adds <code>nb-NO</code> language support to <code>MozillaFirefox</code> Fix #146</li> </ul>"},{"location":"changelog/#2105363","title":"2105.363","text":"<ul> <li>Adds <code>ImageGlass</code>, <code>MicrosoftAzureStorageExplorer</code>, <code>Nomacs</code>, <code>Notable</code>, <code>OBSStudio</code></li> <li>Updates URL used by <code>TeamViewer</code> to return the current version #147</li> <li>Updates <code>Save-EvergreenApp</code> to output the result of <code>Get-ChildItem</code> as the output to the pipeline</li> <li>Updates module to use external help MAML-based help with platyPS to make updating help content easier</li> <li>General code improvements</li> </ul>"},{"location":"changelog/#2104355","title":"2104.355","text":"<ul> <li>Changes <code>FoxitReader</code> to return MSI installers instead of EXEs. Removes Elex, Portuguese (Portugal), and Turkish language support from this application because the installers returned are out of date.</li> <li>Adds the following languages to <code>AdobeAcrobatReaderDC</code>: Swedish, Basque, Catalan, Croatian, Czech, Hungarian, Polish, Romanian, Russian, Slovakian, Slovenian, Turkish, Ukrainian</li> <li>Adds a known issues list to the documentation: https://stealthpuppy.com/evergreen/knownissues.html</li> </ul>"},{"location":"changelog/#2104348","title":"2104.348","text":"<ul> <li>Adds the Consumer release (to the existing Enterprise release) and Dev, Beta channels, and ARM64 architecture to <code>MicrosoftEdge</code></li> <li>Adds 64-bit architecture to <code>MicrosoftOneDrive</code></li> <li>Adds <code>BeekeeperStudio</code>, <code>VMwareHorizonClient</code>, <code>AdoptOpenJDK 8</code>, <code>AdoptOpenJDK 11</code>, <code>AdoptOpenJDK 16</code></li> <li>Modifies <code>Get-EvergreenApp</code> to load internal per-application functions on demand, instead of loading all of these function into memory at module import</li> <li>Updates <code>Get-CitrixRssFeed</code> to use <code>Invoke-RestMethod</code> to simplify handling of the XML feed</li> <li>Updates various functions to Throw more consistently when encountering errors</li> <li>General code improvements</li> </ul>"},{"location":"changelog/#2104337","title":"2104.337","text":"<ul> <li>BREAKING CHANGE: This version removes the <code>Get-</code> function for each application and introduces <code>Get-EvergreenApp</code>. See the docs site on how to use the new functions https://stealthpuppy.com/evergreen/</li> <li>Adds <code>Get-EvergreenApp</code>, <code>Find-EvergreenApp</code> and <code>Save-EvergreenApp</code></li> <li>Adds file type to SourceForge applications</li> <li>Re-instates <code>ControlUpAgent</code> and <code>ControlUpConsole</code></li> <li>Fixes the <code>LTS</code> release in <code>Microsoft.NET</code></li> <li>Fixes localised date format for <code>Gimp</code>, <code>GoogleChrome</code>, <code>MicrosoftEdge</code>, <code>MicrosoftFSLogixApps</code>, <code>MicrosoftSsms</code>, <code>FoxitReader</code></li> <li>Migrates tests to Pester 5</li> <li>Adds additional Pester tests for private functions</li> <li>General code optimisations and fixes</li> </ul>"},{"location":"changelog/#2103305","title":"2103.305","text":"<ul> <li>Fixes an issue with <code>Get-AdobeAcrobat</code> to ensure that <code>Track</code> property has the correct value (DC, 2020, etc.) and the <code>Language</code> property (Neutral, Multi) #130</li> </ul>"},{"location":"changelog/#2103303","title":"2103.303","text":"<ul> <li>Adds <code>Get-NETworkManager</code>, <code>Get-Anki</code></li> <li>Updates <code>Get-AdobeAcrobat</code> to include updates for Adobe Acrobat Reader DC. This function now returns updates for both Acrobat Pro and Reader</li> <li>Retrieve the installers for Adobe Acrobat Reader DC with <code>Get-AdobeAcrobatReaderDC</code> and any available updates with <code>Get-AdobeAcrobat</code></li> <li>Temporarily disables <code>Get-ControlUpAgent</code> and <code>Get-ControlUpConsole</code></li> </ul>"},{"location":"changelog/#2103298","title":"2103.298","text":"<ul> <li>Adds <code>Get-MicrosoftAzureDataStudio</code>, <code>Get-ControlUpConsole</code></li> <li>Updates <code>Get-ControlUpAgent</code> to use the published JSON at https://www.controlup.com/latest-agent-console/ - the last vestiges of any screen scraping code have been swept away</li> <li>Updates <code>Get-AdobeAcrobatReaderDC</code> to account for the new 64-bit version of Reader to add #121. Filter with <code>Where-Object</code> to return the required version, language and architecture</li> </ul>"},{"location":"changelog/#breaking-changes_17","title":"Breaking Changes","text":"<ul> <li>Adds <code>Architecture</code> property and removes <code>Type</code> property from the output of <code>Get-AdobeAcrobatReaderDC</code></li> <li>Removes the Adobe Acrobat Reader DC updaters from <code>Get-AdobeAcrobatReaderDC</code> as there is no consistent automated method to determine whether an update is required or optional</li> <li>Changes the output of <code>Get-ControlUpAgent</code> - the values in the <code>Framework</code> property have changed and the function only returns the most recent agent version</li> </ul>"},{"location":"changelog/#2102291","title":"2102.291","text":"<ul> <li>Renames function <code>Get-AdobeAcrobatProDC</code> to <code>Get-AdobeAcrobat</code> and includes support for returning updates for Adobe Acrobat Pro/Standard DC, 2020, 2017, and 2015. Addresses #114</li> <li>Alias <code>Get-AdobeAcrobatProDC</code> included for backward compatibility</li> <li>Adds <code>Preview</code> ring to <code>Get-MicrosoftTeams</code></li> <li>Updates function comment-based help and corrects spelling across several functions</li> </ul>"},{"location":"changelog/#breaking-changes_18","title":"Breaking Changes","text":"<ul> <li>Adds <code>Track</code> property to <code>Get-AdobeAcrobat</code> with values of <code>DC</code>, <code>2020</code>, <code>2017</code>, <code>2015</code> - filter with <code>Where-Object</code></li> <li>Adds <code>Ring</code> property to <code>Get-MicrosoftTeams</code> for <code>General</code> (i.e., current / production ring) and <code>Preview</code> rings - filter with <code>Where-Object</code></li> </ul>"},{"location":"changelog/#2102286","title":"2102.286","text":"<ul> <li>Adds the <code>ARM</code> architecture to <code>Get-MicrosoftVisualStudioCode</code></li> <li>Updates <code>Get-MicrosoftWvdRemoteDesktop</code> to output the <code>URI</code> property value in the format <code>https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4MntQ</code> instead of the original <code>fwlink</code> source URL (e.g. <code>https://go.microsoft.com/fwlink/?linkid=2068602</code>)</li> <li>Updates the following functions to use <code>Invoke-RestMethod</code> (via <code>Invoke-RestMethodWrapper</code>) instead of <code>Invoke-WebRequest</code> to simplify code and fix an issue where some functions where returning <code>Version</code> as a PSObject instead of System.String (#109)</li> <li><code>Get-AtlassianBitbucket</code>, <code>Get-Cyberduck</code>, <code>Get-FileZilla</code>, <code>Get-Fork</code>, <code>Get-RingCentral</code>, <code>Get-ScooterBeyondCompare</code>, <code>Get-SumatraPDFReader</code>, <code>Get-VideoLanVlcPlayer</code></li> <li>Updates module <code>ReleaseNotes</code> location to: https://stealthpuppy.com/evergreen/changelog.html</li> </ul>"},{"location":"changelog/#2101281","title":"2101.281","text":"<ul> <li>Renames <code>Get-MicrosoftOffice</code>, to <code>Get-Microsoft365Apps</code> to align with product name. The alias <code>Get-MicrosoftOffice</code> is included for backward compatibility</li> <li>Adds the <code>Monthly Enterprise</code> channel to <code>Get-Microsoft365Apps</code> output. See #107</li> <li>Adds private function <code>Invoke-RestMethodWrapper</code> to enable normalisation across public functions and PowerShell/Windows PowerShell that use <code>Invoke-RestMethod</code></li> <li>Updates private function <code>Get-GitHubRepoRelease</code> to use <code>Invoke-RestMethodWrapper</code></li> <li>Updates several public functions to use <code>Invoke-RestMethodWrapper</code> instead of the previous method of <code>Invoke-WebRequest | ConvertTo-Json</code> - <code>Get-1Password</code>, <code>Get-CitrixVMTools</code>, <code>Get-FoxitReader</code>, <code>Get-GoogleChrome</code>, <code>Get-Microsoft365Apps</code>, <code>Get-MicrosoftEdge</code>, <code>Get-MicrosoftTeams</code>, <code>Get-MicrosoftVisualStudioCode</code>, <code>Get-MozillaFirefox</code>, <code>Get-MozillaThunderbird</code></li> <li>Updates public functions that used <code>Invoke-RestMethod</code> to use <code>Invoke-RestMethodWrapper</code> instead - <code>Get-Gimp</code>, <code>Get-MicrosoftPowerShell</code>, <code>Get-MicrosoftVisualStudio</code></li> <li>Renames private function <code>Invoke-WebContent</code> to <code>Invoke-WebRequestWrapper</code> and makes general improvements to the handling of <code>Invoke-WebRequest</code></li> <li>Renames private function <code>ConvertFrom-SourceForgeReleasesJson</code> to <code>Get-SourceForgeRepoRelease</code></li> <li>Updates and optimises this function to make use of <code>Invoke-RestMethodWrapper</code> so that it can query a SourceForge repository and return the required output in a single function</li> <li>Simplifies code in public functions that return SourceForge releases - <code>Get-7zip</code>, <code>Get-KeePass</code>, <code>Get-PDFForgePDFCreator</code>, <code>Get-ProjectLibre</code>, <code>Get-WinMerge</code>, <code>Get-WinSCP</code></li> <li>Renames private functions for more descriptive function names (these resolve HTTP 301/302 return codes):</li> <li><code>Resolve-Uri</code> to <code>Resolve-SystemNetWebRequest</code></li> <li><code>Resolve-RedirectedUri</code> to <code>Resolve-InvokeWebRequest</code></li> </ul>"},{"location":"changelog/#breaking-changes_19","title":"Breaking Changes","text":"<ul> <li>Removes parameter from several functions (below) to simplify existing functions and support a move to a single <code>Get-EvergreenApp</code> function</li> <li>Removes the <code>-Channel</code> and <code>-Platform</code> parameters from <code>Get-MicrosoftVisualStudioCode</code>. Filter output using <code>Where-Object</code> on the <code>Channel</code> and <code>Platform</code> parameters on the function output</li> <li>Removes the <code>-Language</code> parameter from <code>Get-MozillaFirefox</code> and <code>Get-MozillaThunderbird</code>. Filter output using <code>Where-Object { $_.Language -eq \"en-US\" }</code> or similar. These functions will return the following languages (for additional languages, please open an issue on the project): <code>en-US</code>, <code>en-GB</code>, <code>en-CA</code>, <code>es-ES</code>, <code>sv-SE</code>, <code>pt-BR</code>, <code>pt-PT</code>, <code>de</code>, <code>fr</code>, <code>it</code>, <code>ja</code>, <code>nl</code>, <code>zh-CN</code>, <code>zh-TW</code>, <code>ar</code>, <code>hi-IN</code>, <code>ru</code></li> </ul>"},{"location":"changelog/#2101275","title":"2101.275","text":"<ul> <li>Adds <code>Get-AtlassianBitbucket</code>, <code>Get-TelegramDesktop</code>, <code>Get-Gimp</code>, <code>Get-BitwardenDesktop</code>, <code>Get-MicrosoftBicep</code></li> <li>Updates <code>Get-MicrosoftPowerShell</code> to return both the <code>Stable</code> and <code>LTS</code> releases of PowerShell</li> </ul>"},{"location":"changelog/#breaking-changes_20","title":"Breaking Changes","text":"<ul> <li>Update output of <code>Get-MicrosoftOneDrive</code> - changes property <code>Sha256Hash</code> to <code>Sha256</code> to be consistent with other functions</li> <li>Adds a <code>Release</code> property to the output of <code>Get-MicrosoftPowerShell</code> - use <code>Where-Object</code> to filter on <code>Stable</code> or <code>LTS</code></li> </ul>"},{"location":"changelog/#2101263","title":"2101.263","text":"<ul> <li>Adds <code>Get-AdobeBrackets</code>, <code>Get-Fork</code>, <code>Get-MicrosoftVisualStudio</code>, <code>Get-VercelHyper</code></li> <li>Updates manifest for <code>MicrosoftWvdRemoteDesktop</code> to ensure evergreen source URLs used for resolving downloads</li> <li>Updates manifest for <code>MicrosoftVisualStudioCode</code></li> </ul>"},{"location":"changelog/#2101256","title":"2101.256","text":"<ul> <li>Adds <code>Get-Terminals</code>, <code>Get-PeaZipPeaZip</code>, <code>Get-Slack</code>, <code>Get-MicrosoftWindowsPackageManagerClient</code>, <code>Get-KeePassXCTeamKeePassXC</code>, <code>Get-SumatraPDFReader</code></li> <li>Renames <code>Get-Atom</code>, to <code>Get-GitHubAtom</code> to better align with vendor name. The alias <code>Get-Atom</code> is included for backward compatibility</li> <li>Fixes an issue with <code>Get-AdobeAcrobatReaderDC</code> - Adobe doesn't use HTTPS with their download locations yet. See #99</li> <li>Updates <code>Get-AdobeAcrobatReaderDC</code> to simplify code and better align manifest with standard structure</li> </ul>"},{"location":"changelog/#2101249","title":"2101.249","text":"<ul> <li>Adds <code>Get-MicrosoftWvdRemoteDesktop</code>, <code>Get-MozillaThunderbird</code>, <code>Get-ProjectLibre</code>, <code>Get-RingCentral</code>, <code>Get-RCoreTeamRforWindows</code>, <code>Get-StefansToolsgregpWin</code></li> <li>Renames <code>Get-MicrosoftPowerShellCore</code> to <code>Get-MicrosoftPowerShell</code> - PowerShell Core was renamed to PowerShell with the release of PowerShell 7.0. The alias <code>Get-MicrosoftPowerShellCore</code> is included for backward compatibility</li> <li>Fixes an issue with <code>Get-GitHubRelease</code> that ignored anything passed to the <code>-Uri</code> parameter</li> <li>Adds the MSIX format to the output of <code>Get-MicrosoftOneDrive</code> - filter output with the <code>Type</code> property (I'm not really sure how useful MSIX format for the OneDrive client is right now though...)</li> <li>Adds the VboxGuestAdditions ISO to the output of <code>Get-OracleVirtualBox</code> - filter output with the <code>Type</code> property</li> <li>Refactors <code>Get-Zoom</code> to simplify function code and improve output</li> <li>Updates version output for <code>Get-MicrosoftWvdRtcService</code> and <code>Get-MicrosoftWvdInfraAgent</code></li> <li>Updates manifest for a number of functions to better align with an updated standard structure (see <code>Manifests/Template.json</code>)</li> </ul>"},{"location":"changelog/#breaking-changes_21","title":"Breaking Changes","text":"<ul> <li>Output of <code>Get-MicrosoftOneDrive</code> has changed - <code>Platform</code> has been removed and <code>Type</code> has been added</li> <li>Output of <code>Get-OracleVirtualBox</code> has changed - <code>Type</code> property has been added</li> <li>Output of <code>Get-Zoom</code> has changed - filter output with the <code>Platform</code> and <code>Type</code> properties</li> </ul>"},{"location":"changelog/#2012242","title":"2012.242","text":"<ul> <li>Adds <code>Get-AdobeAcrobatProDC</code>, <code>Get-TelerikFiddlerEverywhere</code>, <code>Get-1Password</code></li> <li>Adds Windows Installer downloads output to <code>Get-FoxitReader</code></li> <li>Updates <code>Get-MicrosoftSsms</code> to query an evergreen update URL to gather new versions from the product releases feed</li> <li>NOTE: the version of SSMS in the releases feed is not the actual current release version - we can only work with what the feed returns; See #82</li> <li>Updates <code>Get-MicrosoftSsms</code> to output all supported languages for downloads - filter output on the <code>Language</code> property</li> <li>Updates <code>Get-MozillaFirefox</code> to return both Exe and Msi versions of the Firefox installer</li> <li>Adds SHA256 hash property to output from <code>Get-MicrosoftVisualStudioCode</code></li> <li>Fixes an issue with the <code>URI</code> output in <code>Get-Cyberduck</code> that was returning an additional <code>/</code> character</li> <li>Refactors private function to query the GitHub releases API (<code>Get-GitHubRepoRelease</code>, replacing <code>ConvertFrom-GitHubReleasesJson</code>) to use <code>Invoke-RestMethod</code> for simpler public functions used to return GitHub releases</li> <li>Updates the following functions to use <code>Get-GitHubRepoRelease</code> - <code>Get-Atom</code>, <code>Get-AdoptOpenJdk</code>, <code>Get-BISF</code>, <code>Get-dnGrep</code>, <code>Get-GitForWindows</code>, <code>Get-GitHubRelease</code>, <code>Get-Greenshot</code>, <code>Get-Handbrake</code>, <code>Get-MicrosoftPowerShellCore</code>, <code>Get-MicrosoftPowerToys</code>, <code>Get-mRemoteNG</code>, <code>Get-NotepadPlusPlus</code>, <code>Get-OpenJDK</code>, <code>Get-OpenShellMenu</code>, <code>Get-ShareX</code>, <code>Get-Win32OpenSSH</code>, <code>Get-WixToolSet</code></li> <li>Updates manifest for a number of functions to better align with an updated standard structure (see <code>Manifests/Template.json</code>)</li> <li>Updates private function <code>ConvertTo-DateTime</code> to better handle date/time format conversion. Still some improvements to be made here</li> </ul>"},{"location":"changelog/#breaking-changes_22","title":"Breaking Changes","text":"<ul> <li>Updates <code>Get-OpenJDK</code> to return only Msi releases and removes Debug, zip etc. On-going improvements - see #76</li> <li>Removes Beta and Snapshots releases from <code>Get-Cyberduck</code></li> <li>Removes Debug releases from <code>Get-Greenshot</code></li> <li>Removes SafeMode releases from <code>Get-Handbrake</code></li> <li>Removes Beta channel and ARM64 releases from <code>Get-MicrosoftEdge</code></li> <li>Removes Zip format releases from <code>Get-MicrosoftPowerShellCore</code></li> <li>Removes Symbols releases from <code>Get-Win32OpenSSH</code></li> </ul>"},{"location":"changelog/#2012225","title":"2012.225","text":"<ul> <li>Adds <code>Get-Microsoft.NET</code> (.NET 5.0 and .NET Core), <code>Get-Win32OpenSSH</code>, <code>Get-MicrosoftPowerToys</code></li> <li>Updates <code>Get-OpenJDK</code> to return all releases. Further filtering will be added in the future per #76</li> <li>Updates <code>Get-MozillaFirefox</code> to resolve download URIs for both EXE and MSI Firefox installers and updates output with additional properties (<code>Architecture</code>, <code>Channel</code> and <code>Type</code>). See #83.</li> <li>Note: this introduces a breaking change - the <code>-Platform</code> switch has been removed, you will need to filter the output on the <code>Architecture</code> property</li> <li>Updates <code>Get-AdobeAcrobatReader</code> to return additional languages #84. Note that Reader DC does not provide the latest version for all languages - it may be a better approach to use the MUI version of the Reader installer if your language is supported</li> </ul>"},{"location":"changelog/#2010219","title":"2010.219","text":"<ul> <li>Update <code>Get-FileZilla</code> to fix invalid download URI returned from the FileZilla update feed. Fix #75</li> <li>Update <code>Get-Cyberduck</code> to remove code that replaces <code>//</code> with <code>/</code>. Returns unfiltered URL from Cyberduck update feed. Fix #75</li> </ul>"},{"location":"changelog/#2009218","title":"2009.218","text":"<ul> <li>Fix <code>Get-FoxitReader</code> with changes to download page in <code>FoxitReader.json</code>. Address #72</li> <li>Fix <code>Get-Zoom</code> with changes to resolved URIs. Address #73</li> <li>Update <code>MicrosoftWvdRtcService.json</code> to new version of the Microsoft Remote Desktop WebRTC Redirector Service</li> <li>Update <code>Resolve-Uri</code> with additional verbose output</li> </ul>"},{"location":"changelog/#2006212","title":"2006.212","text":"<ul> <li>Renames <code>Get-CitrixXenServerTools</code> to <code>Get-CitrixVMTools</code> and adds <code>Get-CitrixXenServerTools</code> alias</li> <li>Updates <code>Get-CitrixVMTools</code> with new release URL for v7 updates and add v9 updates</li> <li>Updates install command lines for <code>Get-CitrixVMTools</code></li> <li>Adds <code>Get-AdoptOpenJDK</code> - closes #69</li> </ul>"},{"location":"changelog/#2006207","title":"2006.207","text":"<ul> <li>Fix path in downloads from apps hosted on Source Forge returned in <code>ConvertFrom-SourceForgeReleasesJson.ps1</code>. Fixes #67</li> <li>Update <code>Get-MozillaFirefox</code> to return Extended Support Release as well as Current Release. Address #61</li> <li>Update manifests to address #57 #54 #53 #52</li> </ul>"},{"location":"changelog/#2006203","title":"2006.203","text":"<ul> <li>Removes Size property from <code>Get-FoxitReader</code> because this isn't being gathered consistently for each download</li> <li>Updates version / releases feed for <code>Get-MicrosoftSsms</code> to ensure the current version is returned</li> <li>Updates the way private function <code>ConvertFrom-SourceForgeReleasesJson</code> returns available downloads from SourceForge</li> <li>Updates <code>Get-7zip</code>, <code>Get-KeePass</code>, <code>Get-PDFForgePDFCreator</code> and <code>Get-WinMerge</code> to support new approach to retrieving SourceForge downloads</li> </ul>"},{"location":"changelog/#2005190","title":"2005.190","text":"<ul> <li>Adds <code>Get-MicrosoftWvdBootLoader</code> - Get the filename and download URL for the Microsoft Windows Virtual Desktop Remote Desktop Boot Loader</li> <li>Updates <code>Get-FoxitReader</code> to sort release versions correctly and return latest (v10.x)</li> </ul>"},{"location":"changelog/#2005187","title":"2005.187","text":"<ul> <li>Adds <code>Get-MicrosoftWvdRtcService</code> - returns the version, filename and download for the Microsoft Remote Desktop WebRTC Redirector service for Windows Virtual Desktop</li> </ul>"},{"location":"changelog/#2005183","title":"2005.183","text":"<ul> <li>Updates <code>Get-VMwareTools</code> to return the very latest version with updated download URL</li> <li>Adds <code>Get-WixToolset</code></li> </ul>"},{"location":"changelog/#2005176","title":"2005.176","text":"<ul> <li>Fixes an issue where <code>Get-MicrosoftEdge</code> was only returning ARM64 downloads</li> <li>Updates <code>Get-MicrosoftEdge</code> to only return downloads for the Enterprise ring (removed Consumer ring)</li> <li>Fixes an issue with <code>Get-MicrosoftTeams</code> where it was returning an incorrect download URL</li> </ul>"},{"location":"changelog/#2005172","title":"2005.172","text":"<ul> <li>Updates <code>Get-MicrosoftEdge</code> to correctly return the latest version and policy files for the Enterprise ring</li> <li>Updates output for private function <code>Resolve-Uri</code> with addition properties</li> <li>Updates <code>Get-FoxitReader</code>, <code>Get-MicrosoftFSLogixApps</code>, and <code>Get-MicrosoftSsms</code> to use <code>Resolve-Uri</code> instead of <code>Resolve-RedirectedUri</code> for improved performance</li> <li>Updates <code>Get-LibreOffice</code> to retrieve latest version from the update API instead of page scraping</li> <li>Updates private function <code>ConvertTo-DateTime</code> with improvements in returning localised date (so the rest of us don't need to be stuck with US date formats)</li> <li>Aligns <code>Get-NotepadPlusPlus</code> with private function <code>ConvertFrom-GitHubReleasesJson</code> to return GitHub release data</li> <li>Fixes output in <code>Get-VMwareTools</code> to ensure correct version and download URL are returned</li> <li>Adds date to output in several functions</li> <li>General code and inline help improvements</li> <li>Adds module icon for display in the PowerShell Gallery</li> </ul>"},{"location":"changelog/#2004161","title":"2004.161","text":"<ul> <li>Updates <code>Get-MicrosoftEdge</code> with the following:</li> <li>Returns Edge for Windows only</li> <li>Removes <code>-Channels</code> and <code>-Platforms</code> parameters. Filter output with <code>Where-Object</code> instead</li> <li>Returns these channels and downloads only <code>Stable</code>, <code>Beta</code>, <code>EdgeUpdate</code>, and <code>Policy</code> (administrative templates)</li> <li>Filters and returns only the latest version of each of the above channels and downloads</li> <li>Output includes <code>Channel</code> (Stable, Beta etc.) and <code>Release</code> (Enterprise, Consumer) to enable filtering</li> </ul>"},{"location":"changelog/#2004157","title":"2004.157","text":"<ul> <li>Adds <code>Get-MicrosoftWvdInfraAgent</code></li> <li>Adds <code>Get-dnGrep</code></li> <li>Recode of <code>Get-PaintDotNet</code> (or how did I not know about <code>ConvertFrom-StringData</code> before?)</li> <li>To simplify output, removes Linux, macOS output from <code>Get-CitrixWorkspaceApp</code>, <code>Get-GoogleChrome</code>, <code>Get-OracleVirtuaBox</code>, <code>Get-LibreOffice</code>, <code>Get-MicrosoftVisualStudioCode</code>, <code>Get-MozillaFirefox</code>, <code>Get-OracleVirtualBox</code>, <code>Get-TeamViewer</code></li> <li>Updates RegEx method to extract version across various functions to simplify code</li> <li>Splits Pester tests for Public functions to allow for faster local testing</li> </ul>"},{"location":"changelog/#2004147","title":"2004.147","text":"<ul> <li>Adds <code>Get-Handbrake</code>, <code>Get-KeePass</code>, <code>Get-OpenShellMenu</code>, <code>Get-VastLimitsUberAgent</code>, <code>Get-WinSCP</code></li> <li>Removes macOS and Linux output from <code>Get-AdobeAcrobatReader</code>, <code>Get-LibreOffice</code></li> <li>Filters macOS and Linux output from private function <code>ConvertFrom-GitHubReleasesJson.ps1</code></li> <li>Fixes spaces in private function <code>ConvertFrom-SourceForgeReleasesJson</code></li> </ul>"},{"location":"changelog/#2004141","title":"2004.141","text":"<ul> <li>Adds private function <code>ConvertFrom-SourceForgeReleasesJson</code> to convert JSON release info from SourceForge projects and simplify adding additional functions that pull release info from SourceForge projects. Release information is limited by what's provided from SourceForge</li> <li>Updates <code>Get-WinMerge</code> to use <code>ConvertFrom-SourceForgeReleasesJson</code></li> <li>Adds <code>Get-7Zip</code>, <code>Get-PDFForgePDFCreator</code></li> <li>Renames <code>-TrustCertificate</code> parameter in private function <code>Invoke-WebContent</code> to <code>-SkipCertificateCheck</code> to align with <code>-SkipCertificateCheck</code> available in '<code>Invoke-WebRequest</code> in PowerShell Core</li> <li>Enables <code>-SkipCertificateCheck</code> for both PowerShell Core and Windows PowerShell in <code>Invoke-WebContent</code>. Previously supported Windows PowerShell only</li> <li>Improves code in <code>Invoke-WebContent</code></li> <li>Adds <code>-Uri</code> parameter validation in <code>Get-GitHubRelease</code> to ensure valid GitHub URLs are passed to the function</li> <li>Sets function global <code>ErrorPreference</code> to <code>Stop</code> to ensure better exception output from functions in the event of failures</li> </ul>"},{"location":"changelog/#2004139","title":"2004.139","text":"<ul> <li>Adds <code>ConvertFrom-GitHubReleasesJson</code> to standardise queries to GitHub repositories</li> <li>Updates <code>Get-Atom</code>, <code>Get-BISF</code>, <code>Get-GitForWindows</code>, <code>Get-Greenshot</code>, <code>Get-MicrosoftPowerShellCore</code>, <code>Get-OpenJDK</code>, <code>Get-ShareX</code>, <code>Get-mRemoteNG</code> to use <code>ConvertFrom-GitHubReleasesJson</code></li> <li>Updates RegEx for version matching strings for <code>BISF</code>, <code>GitForWindows</code>, <code>ShareX</code></li> <li>Adds <code>Get-Architecture</code> and <code>Get-Platform</code> private functions</li> <li>Adds <code>Get-GitHubRelease</code> to enable returning version and downloads from any GitHub repository. Use to get versions of applications on GitHub that aren't yet included in <code>Evergreen</code></li> </ul>"},{"location":"changelog/#2004134","title":"2004.134","text":"<ul> <li>Fixes an issue where <code>Get-Zoom</code> was still returning a URI to downloads with query strings attached.</li> </ul>"},{"location":"changelog/#2004133","title":"2004.133","text":"<ul> <li>Updates URL to current version for <code>TeamViewer</code>. New URL requires different approach to query</li> <li>Adds <code>Invoke-SystemNetRequest</code> that uses <code>System.Net.WebRequest</code> to make a HTTP request and return response</li> <li>Updates <code>Get-TeamViewer</code> to use <code>Invoke-SystemNetRequest</code> to retrieve version from updated URL. Updates code to return version and download URL as a result</li> <li>Updates <code>Get-Zoom</code> to use <code>Resolve-Uri</code> to follow download URLs and find version number. <code>Get-Zoom</code> now returns more versions numbers for Zoom downloads than previously. Updates RegEx approach that returns version numbers from download URLs</li> </ul>"},{"location":"changelog/#2004126","title":"2004.126","text":"<ul> <li>Adds back <code>Get-FileZilla</code> using the application update API. Currently returns only the 64-bit version of FileZilla for Windows.</li> </ul>"},{"location":"changelog/#2004125","title":"2004.125","text":"<ul> <li>Adds <code>Get-MicrosoftOneDrive</code>. We recommend validating versions returned by this function with OneDrive release notes</li> <li>Removes <code>Get-FileZilla</code> until a more robust process to return versions and download can be created</li> <li>Removes progress bar for <code>Invoke-WebRequest</code> for faster query of APIs</li> <li>Updates <code>Get-NotepadPlusPlus</code> to use the GitHub releases API to find new versions as the application update API can be out of date</li> </ul>"},{"location":"changelog/#2002120","title":"2002.120","text":"<ul> <li>Updates <code>Get-GitForWindows</code> to return correct version number</li> <li>Updates <code>Get-Zoom</code> to return version number correctly</li> <li>Adds <code>Resolve-Uri</code> with a new method of returning redirects from 301/302 via @iainbrighton</li> </ul>"},{"location":"changelog/#2001117","title":"2001.117","text":"<ul> <li>Updates <code>Get-FileZilla</code> to return 32-bit and 64-bit download URIs</li> </ul>"},{"location":"changelog/#2001110","title":"2001.110","text":"<ul> <li>Adds <code>Get-MicrosoftTeams</code></li> <li>Update error handling in <code>Get-VideoLanVlcPlayer</code></li> </ul>"},{"location":"changelog/#2001104","title":"2001.104","text":"<ul> <li>Adds <code>Get-MicrosoftEdge</code> for the new Chromium based Microsoft Edge</li> <li>Additional verbose output in <code>Invoke-WebContent</code></li> </ul>"},{"location":"changelog/#1911101","title":"1911.101","text":"<ul> <li>Adds <code>Get-ScooterBeyondCompare</code></li> <li>Updates XML parsing approach in <code>Get-CitrixRssFeed</code>, <code>Get-CitrixWorkspaceApp</code>, <code>Get-NotepadPlusPlus</code>, <code>Get-VideoLanVlcPlayer</code></li> </ul>"},{"location":"changelog/#191197","title":"1911.97","text":"<ul> <li>Adds private function <code>Resolve-RedirectedUri</code> to handle resolving 301/302 redirects on PowerShell Core and Windows PowerShell</li> <li>Updates <code>Get-VideoLanVlcPlayer</code>, <code>Get-MicrosoftSsms</code>, <code>Get-FoxitReader</code>, <code>Get-MicrosoftFSLogixApps</code>, <code>Get-Zoom</code> with full support for PowerShell Core</li> <li>Updates logic to filter out prerelease assets in <code>Get-Atom</code>, <code>Get-BISF</code>, <code>Get-GitForWindows</code>, <code>Get-Greenshot</code>, <code>Get-MicrosoftPowerShellCore</code>, <code>Get-OpenJDK</code>, <code>Get-ShareX</code>, <code>Get-mRemoteNG</code></li> <li>Prevents <code>Get-MicrosoftSsms</code>, <code>Get-CitrixRssFeed</code>, <code>Get-Cyberduck</code>, <code>Get-OracleJava8</code> from throwing on error</li> <li>Updates to application manifests with some work on silent install commands</li> </ul>"},{"location":"changelog/#191195","title":"1911.95","text":"<ul> <li>Adds <code>Get-MicrosoftFSLogixApps</code></li> </ul>"},{"location":"changelog/#191193","title":"1911.93","text":"<ul> <li>Fixes version match in <code>Get-ControlUpAgent</code></li> </ul>"},{"location":"changelog/#191191","title":"1911.91","text":"<ul> <li>Adds <code>Get-Cyberduck</code></li> </ul>"},{"location":"changelog/#191187","title":"1911.87","text":"<ul> <li>Adds <code>Get-JamTreeSizeFree</code> and <code>Get-JamTreeSizeProfessional</code></li> <li>Fixes URL to Release notes / CHANGELOG in module manifest</li> </ul>"},{"location":"changelog/#191184","title":"1911.84","text":"<ul> <li>Changes approach used in <code>Get-ControlUpAgent</code> to retrieve agent details and enables PowerShell Core support</li> <li>Implemented per-application manifests (URLs, RegEx, strings etc.) for simpler function management</li> <li>Adds <code>Export-EvergreenFunctionStrings</code> to export per-application manifests</li> <li>Renames function <code>Get-Java8</code> to <code>Get-OracleJava8</code></li> <li>Adds Pester tests for Public functions to ensure URI properties are valid</li> </ul>"},{"location":"changelog/#191175","title":"1911.75","text":"<ul> <li>Updates <code>Get-LibreOffice</code> update query approach to provide a more consistent output</li> <li>Updates <code>Get-LibreOffice</code> to work on PowerShell Core</li> <li>Changes <code>Get-LibreOffice</code> output and parameters to align with other functions</li> <li>Updates <code>Get-NotepadPlusPlus</code> to gracefully handle update server issues (CloudFlare DDOS challenges)</li> <li>Fixes version output in <code>Get-OpenJDK</code></li> <li>Updates <code>Get-mRemoteNG</code> with handling issues when getting Updates</li> <li>Updates to Public function Pester tests</li> <li>Updates <code>Evergreen.json</code> with consistent property naming and corresponding functions</li> </ul>"},{"location":"changelog/#191062","title":"1910.62","text":"<ul> <li>Updates <code>Get-MicrosoftSsms</code> to ensure that the URI property returns the correct SSMS download for the latest version</li> </ul>"},{"location":"changelog/#191053","title":"1910.53","text":"<ul> <li>Adds <code>Get-WinMerge</code></li> </ul>"},{"location":"changelog/#191050","title":"1910.50","text":"<ul> <li>Updates <code>Get-VideoLanVlcPlayer</code> output to include ZIP and MSI links for VLC Player for Windows</li> </ul>"},{"location":"changelog/#191049","title":"1910.49","text":"<ul> <li>Updates <code>Get-MicrosoftSsms</code> to URL (e.g. <code>https://go.microsoft.com/fwlink/?LinkId=761491</code>) to return actual URI</li> </ul>"},{"location":"changelog/#191048","title":"1910.48","text":"<ul> <li>Updates <code>Get-VideoLanVlcPlayer</code> to return download mirrors for URI values</li> </ul>"},{"location":"changelog/#191047","title":"1910.47","text":"<ul> <li>Adds <code>Get-Atom</code> and <code>Get-TeamViewer</code></li> </ul>"},{"location":"changelog/#191039","title":"1910.39","text":"<ul> <li>Update <code>Get-Zoom</code> to the same HTTP post as <code>https://zoom.us/support/download</code> to return the download URI. Returns download for Windows and VDI environments</li> <li>Build script changes</li> </ul>"},{"location":"changelog/#191028","title":"1910.28","text":"<ul> <li>Adds <code>Get-mRemoteNG</code></li> <li>Update version format to <code>YearMonth.Build</code> (hopefully we won't change this again)</li> <li>Automate versioning in the module to the new format</li> <li>Automate update of <code>appveyor.yml</code> as <code>YearMonth</code> changes</li> <li>Output variables in AppVeyor to <code>\\tests\\appveyor.md</code></li> </ul>"},{"location":"changelog/#19101826","title":"1910.18.26","text":"<ul> <li>Adds <code>Get-OpenJDK</code></li> <li>Changes version notation to: YearMonth.Day.Build</li> </ul>"},{"location":"changelog/#191025","title":"19.10.25","text":"<ul> <li>Adds <code>Get-MicrosoftOffice</code></li> </ul>"},{"location":"changelog/#191024","title":"19.10.24","text":"<ul> <li>Fixes URIs for updates in <code>Get-AdobeAcrobatReaderDC</code></li> <li>Adds additional Pester tests for Public functions to ensure generated URI values are valid</li> </ul>"},{"location":"changelog/#191021","title":"19.10.21","text":"<ul> <li>Adds <code>Get-FoxitReader</code></li> </ul>"},{"location":"changelog/#191020","title":"19.10.20","text":"<ul> <li>Fixes output in <code>Get-GitForWindows</code>, <code>Get-MicrosoftSmss</code></li> </ul>"},{"location":"changelog/#191019","title":"19.10.19","text":"<ul> <li>Adds <code>Get-GitForWindows</code>, <code>Get-ShareX</code></li> </ul>"},{"location":"changelog/#191011","title":"19.10.11","text":"<ul> <li>Adds <code>Get-Java8</code></li> </ul>"},{"location":"changelog/#19109","title":"19.10.9","text":"<ul> <li>Adds <code>Get-BISF</code></li> <li>Adds <code>ConvertTo-DateTime</code> private function to handle DateTime conversion on PowerShell Core / Windows PowerShell</li> </ul>"},{"location":"changelog/#19102","title":"19.10.2","text":"<ul> <li>First version pushed to the PowerShell Gallery</li> <li>Initial functions are:</li> </ul> <p><code>Export-EvergreenResourceStrings</code>, <code>Get-AdobeAcrobatReaderDC</code>, <code>Get-CitrixAppLayeringFeed</code>, <code>Get-CitrixApplicationDeliveryManagementFeed</code>, <code>Get-CitrixEndpointManagementFeed</code>, <code>Get-CitrixGatewayFeed</code>, <code>Get-CitrixHypervisorFeed</code>, <code>Get-CitrixLicensingFeed</code>, <code>Get-CitrixReceiverFeed</code>, <code>Get-CitrixSdwanFeed</code>, <code>Get-CitrixVirtualAppsDesktopsFeed</code>, <code>Get-CitrixWorkspaceApp</code>, <code>Get-CitrixWorkspaceAppFeed</code>, <code>Get-CitrixXenServerTools</code>, <code>Get-ControlUpAgent</code>, <code>Get-FileZilla</code>, <code>Get-GoogleChrome</code>, <code>Get-Greenshot</code>, <code>Get-LibreOffice</code>, <code>Get-MicrosoftPowerShellCore</code>, <code>Get-MicrosoftSsms</code>, <code>Get-MicrosoftVisualStudioCode</code>, <code>Get-MozillaFirefox</code>, <code>Get-NotepadPlusPlus</code>, <code>Get-OracleVirtualBox</code>, <code>Get-PaintDotNet</code>, <code>Get-VideoLanVlcPlayer</code>, <code>Get-VMwareTools</code>, <code>Get-Zoom</code></p>"},{"location":"endpoints/","title":"Retrieve endpoints used by Evergreen","text":"<p>The Evergreen API can return the endpoint URLs used by Evergreen to retrieve application version and download details, and endpoints URLs required to download application installers.</p> <p>The list of endpoints can be imported into firewall or proxy server systems where an allowed list of endpoints is required before using Evergreen to download application installers. All endpoints are accessed on TCP 80 or 443.</p>"},{"location":"endpoints/#api-usage","title":"API Usage","text":"<p>The API provides two lists of endpoints - URLs used by Evergreen to determine application versions and downloads, and URLs used to download application installers.</p>"},{"location":"endpoints/#return-a-list-of-urls-used-to-determine-application-versions","title":"Return a list of URLs used to determine application versions","text":"<p>The list of URLs used to determine application versions is used by the Evergreen PowerShell module. This information is already hosted in the Evergreen API and is not required if you are using the <code>/app/{appName}</code> API endpoint to find application version and installers. This list of URLs will update as supported applications in Evergreen are updated.</p> <p>Here is an example using <code>Invoke-RestMethod</code> to return the list of URLs used by Evergreen to determine application versions:</p> <pre><code>PS C:\\&gt; Invoke-RestMethod -Uri \"https://evergreen-api.stealthpuppy.com/endpoints/versions\"\n</code></pre>"},{"location":"endpoints/#return-a-list-of-urls-used-to-download-application-installers","title":"Return a list of URLs used to download application installers","text":"<p>This list of URLs is used when downloading application installers as determined by Evergreen. This list of URLs should remain largely static; however the list can change for some applications. For example, <code>Get-EvergreenApp -Name \"VideoLanVlcPlayer</code> will return a list of download URLs based on the list of mirrors returned by VLC.</p> <p>Here is an example using <code>Invoke-RestMethod</code> to return the list of URLs used by Evergreen when downloading application installers with <code>Save-EvergreenApp</code>:</p> <pre><code>PS C:\\&gt; Invoke-RestMethod -Uri \"https://evergreen-api.stealthpuppy.com/endpoints/downloads\"\n</code></pre>"},{"location":"endpoints/#output","title":"Output","text":"<p>Output returns from both of these endpoints is in JSON format - the name of the application (a string) and the endpoints (an array) for that application are both returned. Here's sample output filtered for Microsoft Edge:</p> <pre><code>{\n    \"Application\": \"MicrosoftEdge\",\n    \"Endpoints\": [\n        \"msedge.sf.dl.delivery.mp.microsoft.com\"\n    ],\n    \"Ports\": [\n        \"443\"\n    ]\n}\n</code></pre> <p>If you are using PowerShell, use <code>Invoke-RestMethod</code> to return an object of applications and endpoints:</p> <pre><code>$Endpoints = Invoke-RestMethod -Uri \"https://evergreen-api.stealthpuppy.com/endpoints/versions\"\n$Endpoints | Where-Object { $_.Application -eq \"MicrosoftEdge\" }\n\nApplication   Endpoints                                      Ports\n-----------   ---------                                      -----\nMicrosoftEdge {edgeupdates.microsoft.com, www.microsoft.com} {443}\n</code></pre>"},{"location":"endpoints/#using-get-evergreenendpointfromapi","title":"Using Get-EvergreenEndpointFromApi","text":"<p><code>Get-EvergreenEndpointFromApi</code> can be used to simplify usage of the API, by returning all endpoints used by Evergreen in a single object. Running <code>Get-EvergreenEndpointFromApi</code> with no parameters, will return a complete list of endpoints and ports used for all applications.</p> <pre><code>PS C:\\&gt; Get-EvergreenEndpointFromApi\n\nApplication          Endpoints                                                                              Ports\n-----------          ---------                                                                              -----\n1Password            {1password.com, app-updates.agilebits.com, downloads.1password.com, cdn.agilebits.com} {443}\n1Password7           {1password.com, c.1password.com}                                                       {443}\n1PasswordCLI         {app-updates.agilebits.com, cache.agilebits.com, developer.1password.com}              {443}\n7zip                 {nchc.dl.sourceforge.net, sourceforge.net, www.7-zip.org, versaweb.dl.sourceforge.net} {443}\n7ZipZS               {api.github.com, mcmilk.de, github.com}                                                {443}\nAdobeAcrobat         {ardownload2.adobe.com, armmf.adobe.com, helpx.adobe.com}                              {443}\nAdobeAcrobatDC       {ardownload2.adobe.com, rdc.adobe.io, www.adobe.com}                                   {443}\nAdobeAcrobatProStdDC {helpx.adobe.com, rdc.adobe.io, trials.adobe.com}                                      {443}\nAdobeAcrobatReaderDC {acrobat.adobe.com, rdc.adobe.io, ardownload2.adobe.com}                               {443}\nAdobeBrackets        {brackets.io, api.github.com, github.com}                                              {80, 443}\n</code></pre> <p><code>Get-EvergreenEndpointFromApi</code> can return endpoints for a single application or an array of with the <code>-Name</code> parameter. In the example below <code>Get-EvergreenEndpointFromApi</code> is used to return the endpoints and ports for the Microsoft Teams and Microsoft Edge endpoints.</p> <pre><code>PS C:\\&gt; Get-EvergreenEndpointFromApi -Name \"MicrosoftTeams\", \"MicrosoftEdge\"\n\nApplication    Endpoints                                                                              Ports\n-----------    ---------                                                                              -----\nMicrosoftEdge  {edgeupdates.microsoft.com, www.microsoft.com, msedge.sf.dl.delivery.mp.microsoft.com} {443}\nMicrosoftTeams {config.teams.microsoft.com, www.microsoft.com, statics.teams.cdn.office.net}          {443}\n</code></pre>"},{"location":"endpoints/#return-a-simple-list-of-all-endpoints","title":"Return a simple list of all endpoints","text":"<p>The output of <code>Get-EvergreenEndpointFromApi</code> can be filtered to create a simple list of all unique endpoint URLs. The command below will generate an array of URLs that can then be used for an allow list of all endpoints required by Evergreen.</p> <pre><code>PS C:\\&gt; Get-EvergreenEndpointFromApi | Select-Object -ExpandProperty \"Endpoints\" -Unique\n</code></pre>"},{"location":"endpoints/#convert-output-to-csv","title":"Convert output to CSV","text":"<p>The code below can be used to convert the output from <code>Get-EvergreenEndpointFromApi</code> to a file in CSV format. The file will include the application name, endpoints URLs in a comma separated list, and ports in a comma separated list.</p> <pre><code>$Path = \"./Endpoints.csv\"\nGet-EvergreenEndpointFromApi | ForEach-Object {\n    [PSCustomObject]@{\n        Application = $_.Application\n        Endpoints   = $_.Endpoints -join \",\"\n        Ports       = $_.Ports -join \",\"\n    }\n} | Export-Csv -Path $Path -NoTypeInformation -Encoding \"Utf8\" -Append\n</code></pre>"},{"location":"examples/","title":"Example usage","text":"<p>Here's a few examples of using Evergreen functions to return application versions and downloads.</p>"},{"location":"examples/#microsoft-edge","title":"Microsoft Edge","text":"<p><code>Get-EvergreenApp -Name MicrosoftEdge</code> will return the latest versions and downloads for Microsoft Edge, including Group Policy administrative templates. To return the latest version of Microsoft Edge and the download URI for 64-bit Windows, use the following syntax:</p> <pre><code>Get-EvergreenApp -Name MicrosoftEdge | Where-Object { $_.Architecture -eq \"x64\" -and $_.Channel -eq \"Stable\" -and $_.Release -eq \"Enterprise\" }\n</code></pre> <p>This will return output similar to the following:</p> <pre><code>Version      : 97.0.1072.69\nPlatform     : Windows\nChannel      : Stable\nRelease      : Enterprise\nArchitecture : x64\nDate         : 20/1/2022\nHash         : AB27CC051E07ADF4EDD807699541A7516E18C32794272482B7F24ECE18917BE3\nURI          : https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/9f730c98-d191-4607-aa1e-e28bd4d9f67e/MicrosoftEdgeEnterpriseX64.msi\n</code></pre>"},{"location":"examples/#microsoft-fslogix-apps","title":"Microsoft FSLogix Apps","text":"<p><code>Get-EvergreenApp -Name MicrosoftFSLogixApps</code> will return the latest version and download URI for Microsoft FSLogix Apps. Because the output is simple, no additional filtering is required:</p> <pre><code>Get-EvergreenApp -Name MicrosoftFSLogixApps\n\nVersion : 2.9.7654.46150\nDate    : 9/1/2021 12:54:48 am\nURI     : https://download.microsoft.com/download/4/8/2/4828e1c7-176a-45bf-bc6b-cce0f54ce04c/FSLogix_Apps_2.9.7654.46150.zip\n</code></pre>"},{"location":"examples/#microsoft-teams","title":"Microsoft Teams","text":"<p>Most Windows desktop environments are going to be on 64-bit Windows, so to get the 64-bit version of Microsoft Teams use the following syntax:</p> <pre><code>Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_.Architecture -eq \"x64\" -and $_.Ring -eq \"General\" -and $_.Type -eq \"msi\" }\n</code></pre>"},{"location":"examples/#microsoft-onedrive","title":"Microsoft OneDrive","text":"<p><code>Get-EvergreenApp -Name MicrosoftOneDrive</code> uses the OneDrive update feed to return version from several release rings - <code>Enterprise</code>, <code>Production</code> and <code>Insider</code>. Often the Production ring returns more than one release:</p> <pre><code>Version : 21.016.0124.0002\nRing    : Insider\nSha256  : BP/TxWlUFk0rbPVXRlbjYLhddSROtWOFTk7gCK8PWJc=\nType    : Exe\nURI     : https://oneclient.sfx.ms/Win/Insiders/21.016.0124.0002/OneDriveSetup.exe\n\nVersion : 21.016.0124.0002\nRing    : Insider\nSha256  : N/A\nType    : Msix\nURI     : https://oneclient.sfx.ms/Win/Insiders/21.016.0124.0002/Microsoft.OneDriveSyncClient_8wekyb3d8bbwe.msix\n\nVersion : 21.002.0104.0005\nRing    : Production\nSha256  : 8xzNz/Yt2ahAc/BZxN5j5gWc7aWypo0A46uUROq8vzg=\nType    : Exe\nURI     : https://oneclient.sfx.ms/Win/Prod/21.002.0104.0005/OneDriveSetup.exe\n\nVersion : 21.002.0104.0005\nRing    : Production\nSha256  : N/A\nType    : Msix\nURI     : https://oneclient.sfx.ms/Win/Prod/21.002.0104.0005/Microsoft.OneDriveSyncClient_8wekyb3d8bbwe.msix\n\nVersion : 20.169.0823.0008\nRing    : Enterprise\nSha256  : kDd6mfMp34H7gp4JRBoM//3WNnMZGpz7mba5Ns/OtBs=\nType    : Exe\nURI     : https://oneclient.sfx.ms/Win/Enterprise/20.169.0823.0008/OneDriveSetup.exe\n\nVersion : 20.169.0823.0008\nRing    : Enterprise\nSha256  : N/A\nType    : Msix\nURI     : https://oneclient.sfx.ms/Win/Enterprise/20.169.0823.0008/Microsoft.OneDriveSyncClient_8wekyb3d8bbwe.msix\n</code></pre> <p>To ensure that we return only the very latest <code>Production</code> version, we need to filter the output:</p> <pre><code>(Get-EvergreenApp -Name MicrosoftOneDrive | Where-Object { $_.Type -eq \"Exe\" -and $_.Ring -eq \"Production\" }) | `\n    Sort-Object -Property @{ Expression = { [System.Version]$_.Version }; Descending = $true } | Select-Object -First 1\n</code></pre>"},{"location":"examples/#adobe-acrobat-reader-dc","title":"Adobe Acrobat Reader DC","text":"<p>Adobe Acrobat Reader DC returns a large number of languages as well as <code>x86</code> and <code>x64</code> installers, thus filtering the output is required to return a single installer that might be used in creating a gold image:</p> <pre><code>Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_.Language -eq \"English\" -and $_.Architecture -eq \"x64\" }\n</code></pre> <p>Output should then look similar to the following:</p> <pre><code>Version      : 21.011.20039\nLanguage     : English\nArchitecture : x64\nName         : Reader DC 2021.011.20039 English Windows(64Bit)\nURI          : http://ardownload.adobe.com/pub/adobe/acrobat/win/AcrobatDC/2101120039/AcroRdrDCx642101120039_en_US.exe\n</code></pre> <p>The installer can then be downloaded with <code>Save-EvergreenApp</code>:</p> <pre><code>$Reader = Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_.Language -eq \"English\" -and $_.Architecture -eq \"x64\" }\n$Reader | Save-EvergreenApp -Path \"C:\\Temp\\Reader\"\n</code></pre>"},{"location":"examples/#mozilla-firefox","title":"Mozilla Firefox","text":"<p><code>Get-EvergreenApp -Name MozillaFirefox</code> returns both the current version and extended support release, along with installers in several languages. This means that to return a single version of the Firefox installer, we have a fairly complex query. The example below will return the 64-bit current release of Firefox in the US language and a Windows Installer package. To be doubly sure that we get a single installer, <code>Sort-Object</code> is also used to sort the <code>Version</code> property and return the most recent:</p> <pre><code>Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{Language=\"en-GB\"} | Where-Object { $_.Channel -eq \"LATEST_FIREFOX_VERSION\" -and $_.Architecture -eq \"x64\" -and $_.type -eq \"msi\" } | `\n    Sort-Object -Property @{ Expression = { [System.Version]$_.Version }; Descending = $true } | Select-Object -First 1\n\nVersion      : 96.0.2\nArchitecture : x64\nChannel      : LATEST_FIREFOX_VERSION\nLanguage     : en-GB\nType         : msi\nFilename     : Firefox Setup 96.0.2.msi\nURI          : https://download-installer.cdn.mozilla.net/pub/firefox/releases/96.0.2/win64/en-GB/Firefox%20Setup%2096.0.2.msi\n</code></pre>"},{"location":"export/","title":"Export version information","text":"<p><code>Export-EvergreenApp</code> can be used to export application version information, returned from <code>Get-EvergreenApp</code>, to JSON and store the information in a file. This can be useful for tracking details of application versions in a software library.</p> <p>The following example shows how to gather application version information for Microsoft OneDrive, save the OneDrive installers to a target directory and store the application version information in a JSON file.</p> <pre><code>$OneDrive = Get-EvergreenApp -Name \"MicrosoftOneDrive\"\nSave-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\"\nExport-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\"\n</code></pre> <p>If an existing JSON file is specified on the <code>-Path</code> parameter of<code>Export-EvergreenApp</code>, the new application version information will be added to the file, with duplicates removed. The file will include JSON data similar to the following:</p> <pre><code>[\n  {\n    \"Version\": \"22.077.0410.0007\",\n    \"URI\": \"https://oneclient.sfx.ms/Win/Enterprise/22.077.0410.0007/OneDriveSetup.exe\",\n    \"Type\": \"exe\",\n    \"Sha256\": \"jjiooBnk6w0tEt20O1IWzT63jvuFUxpZgJDoJdpkDgg=\",\n    \"Ring\": \"Enterprise\",\n    \"Architecture\": \"x86\"\n  },\n  {\n    \"Version\": \"22.077.0410.0007\",\n    \"URI\": \"https://oneclient.sfx.ms/Win/Enterprise/22.077.0410.0007/amd64/OneDriveSetup.exe\",\n    \"Type\": \"exe\",\n    \"Sha256\": \"JjoeTY78Krp49KXJEyjtE1O9WSuFmFoNKECtVwKGDW8=\",\n    \"Ring\": \"Enterprise\",\n    \"Architecture\": \"AMD64\"\n  },\n  {\n    \"Version\": \"22.131.0619.0001\",\n    \"URI\": \"https://oneclient.sfx.ms/Win/Prod/22.131.0619.0001/OneDriveSetup.exe\",\n    \"Type\": \"exe\",\n    \"Sha256\": \"ObZEdqfd8gn9RhzR4SkuVS+Xu4R0vye5OnAaUgRl9E4=\",\n    \"Ring\": \"Production\",\n    \"Architecture\": \"x86\"\n  }\n]\n</code></pre> <p>Note</p> <p><code>Export-EvergreenApp</code> does not truncate date in the exported file. You will have to manage data with a seperate process as the file grows.</p> <p>The JSON file can be read back into an object with <code>ConvertFrom-Json</code>:</p> <pre><code>Get-Content -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\" | ConvertFrom-Json\n</code></pre>"},{"location":"find/","title":"Find supported applications","text":"<p><code>Find-EvergreenApp</code> is used to return a list of applications supported by Evergreen. For example, let's find out whether the Microsoft FSLogix Apps agent is supported by Evergreen:</p> <pre><code>Find-EvergreenApp -Name \"FSLogix\"\n</code></pre> <p>The Microsoft FSLogix Apps agent is supported by Evergreen, so this returns output like this:</p> <pre><code>Name        : MicrosoftFSLogixApps\nApplication : Microsoft FSLogix Apps\nLink        : https://docs.microsoft.com/fslogix/\n</code></pre> <p>The value of the <code>Name</code> property can be used with <code>Get-EvergreenApp</code> to return the latest the Microsoft FSLogix Apps agent:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftFSLogixApps\"\n</code></pre> <p>Alternatively, we can pass the output from <code>Find-EvergreenApp</code> directly to <code>Get-EvergreenApp</code>:</p> <pre><code>Find-EvergreenApp -Name \"FSLogix\" | Get-EvergreenApp\n</code></pre> <p>Output from <code>Find-EvergreenApp</code> can be paged to review the entire supported application list with the following command:</p> <pre><code>Find-EvergreenApp | Out-Host -Paging\n</code></pre>"},{"location":"find/#output","title":"Output","text":"<p><code>Find-EvergreenApp</code> outputs three properties:</p> <ul> <li><code>Name</code> - the identifier of the supported application. This name matches that used in the application manifest</li> <li><code>Application</code> - the application manifest includes the full application name</li> <li><code>Link</code> - each application manifest includes a URL to the application's primary home page</li> </ul> <p>The output from <code>Find-EvergreenApp</code> will look similar to the following example:</p> <pre><code>Name                 Application             Link\n----                 -----------             ----\n1Password            1Password               https://1password.com/\n7zip                 7zip                    https://www.7-zip.org/\nAdobeAcrobat         Adobe Acrobat           https://helpx.adobe.com/au/enterprise/using/deploying-acrobat.html\nAdobeAcrobatReaderDC Adobe Acrobat Reader DC https://acrobat.adobe.com/us/en/acrobat/pdf-reader.html\nAdobeBrackets        Adobe Brackets          http://brackets.io/\n</code></pre>"},{"location":"find/#parameters","title":"Parameters","text":""},{"location":"find/#name","title":"Name","text":"<p>The <code>-Name</code> parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with <code>Find-EvergreenApp</code>.</p>"},{"location":"find/#alias","title":"Alias","text":"<p><code>Find-EvergreenApp</code> has an alias of <code>fea</code> to simplify retrieving supported applications, for example:</p> <pre><code>PS /Users/aaron&gt; fea\n\nName      Application   Link\n----      -----------   ----\n1Password 1Password     https://1password.com/\n7zip      7zip          https://www.7-zip.org/\n</code></pre>"},{"location":"getlibrary/","title":"Retrieve details from an Evergreen library","text":"<p>Once the library has been populated it will contain information that describes the library - the library configuration file, application version information for each application, and the application installers. Over time, the library will contain information on multiple applications and versions. <code>Get-EvergreenLibrary</code> can be used to retrieve application information from the library:</p> <pre><code>Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\"\n\nLibrary   : @{Name=EvergreenLibrary; Applications=System.Object[]}\nInventory : {@{ApplicationName=Microsoft.NET; Versions=}, @{ApplicationName=MicrosoftOneDrive; Versions=System.Object[]}, @{ApplicationName=MicrosoftEdge; Versions=System.Object[]},\n            @{ApplicationName=MicrosoftTeams; Versions=}}\n</code></pre> <p>The object returned contains two properties - <code>Library</code> which is the library defined in <code>EvergreenLibrary.json</code>:</p> <pre><code>Name         : EvergreenLibrary\nApplications : {@{Name=Microsoft.NET; EvergreenApp=Microsoft.NET; Filter=$_.Architecture -eq \"x64\" -and $_.Installer -eq \"windowsdesktop\" -and $_.Channel -eq \"LTS\"},\n               @{Name=MicrosoftOneDrive; EvergreenApp=MicrosoftOneDrive; Filter=$_.Architecture -eq \"AMD64\" -and $_.Ring -eq \"Production\"}, @{Name=MicrosoftEdge;\n               EvergreenApp=MicrosoftEdge; Filter=$_.Platform -eq \"Windows\" -and $_.Channel -eq \"Stable\" -and $_.Release -eq \"Enterprise\" -and $_.Architecture -eq \"x64\"},\n               @{Name=MicrosoftTeams; EvergreenApp=MicrosoftTeams; Filter=$_.Ring -eq \"General\" -and $_.Architecture -eq \"x64\" -and $_.Type -eq \"msi\"}}\n</code></pre> <p>And <code>Inventory</code> which is the application version information for each application in the library:</p> <pre><code>ApplicationName : Microsoft.NET\nVersions        : @{Version=6.0.7; URI=https://download.visualstudio.microsoft.com/download/pr/dc0e0e83-0115-4518-8b6a-590ed594f38a/65b63e41f6a80decb37fa3c5af79a53d/windowsdesktop-runtime-6\n                  .0.7-win-x64.exe; Type=exe; Installer=windowsdesktop; Channel=LTS; Architecture=x64}\n\nApplicationName : MicrosoftOneDrive\nVersions        : {@{Version=22.131.0619.0001; URI=https://oneclient.sfx.ms/Win/Prod/22.131.0619.0001/amd64/OneDriveSetup.exe; Type=exe;\n                  Sha256=oRJK6vbSwqa8EUWBwjnXitZxz8r4RDrTcamdbEB20Mg=; Ring=Production; Architecture=AMD64}, @{Version=22.141.0703.0002;\n                  URI=https://oneclient.sfx.ms/Win/Prod/22.141.0703.0002/amd64/OneDriveSetup.exe; Type=exe; Sha256=4jrVokZX9R7AGT9wyrwdVeQWxW1q1/4YTYW/A+EVUrk=; Ring=Production;\n                  Architecture=AMD64}}\n\nApplicationName : MicrosoftEdge\nVersions        : {@{Version=103.0.1264.62;\n                  URI=https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/4a067ebd-1766-4463-a54b-1e5a525cb90f/MicrosoftEdgeEnterpriseX64.msi; Release=Enterprise;\n                  Platform=Windows; Hash=5DA115179E6D4C84B5204BC135ABCB81AA8512C2AD0909440663E8332EE20FD0; Channel=Stable; Architecture=x64}, @{Version=103.0.1264.71;\n                  URI=https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/52956063-8ecb-4407-9ac1-52db779bb126/MicrosoftEdgeEnterpriseX64.msi; Release=Enterprise;\n                  Platform=Windows; Hash=9AB4B17469440056F2E59D7AA04622C6584DC8B47C087300DC97D979AC7D9F99; Channel=Stable; Architecture=x64}}\n\nApplicationName : MicrosoftTeams\nVersions        : @{Version=1.5.00.17656; URI=https://statics.teams.cdn.office.net/production-windows-x64/1.5.00.17656/Teams_windows_x64.msi; Type=msi; Ring=General; Architecture=x64}\n</code></pre>"},{"location":"getlibraryapp/","title":"Install an application from a library","text":"<p>Once an Evergreen library is populated with application downloads, it can be queried for a specific application for the available versions of that application with <code>Get-EvergreenAppFromLibrary</code>. Details of the Evergreen library must be passed to <code>Get-EvergreenAppFromLibrary</code> from <code>Get-EvergreenLibrary</code>.</p> <p>The application details that are returned will include the version and path to the installer binaries for installing the target application. Application details are returned in descending order of version, thus the latest available version can be used or the details filtered for a specific version.</p>"},{"location":"getlibraryapp/#examples","title":"Examples","text":"<p>In this example, details of the target library at <code>\\\\server\\EvergreenLibrary</code> are returned with <code>Get-EvergreenLibrary</code> and placed into a variable <code>$Library</code>. <code>Get-EvergreenAppFromLibrary</code> is then used to search for Microsoft Visual Studio Code in the library.</p> <pre><code>PS C:\\&gt; $Library = Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\"\nPS C:\\&gt; Get-EvergreenAppFromLibrary -Inventory $Library -Name \"MicrosoftVisualStudioCode\"\n\nVersion      : 1.74.3\nURI          : https://az764295.vo.msecnd.net/stable/97dec172d3256f8ca4bfb2143f3f76b503ca0534/VSCodeSetup-x64-1.74.3.exe\nSha256       : cea32aa015116f8346e054c59497908f6da6059361c1b33d5b68059031f2dc97\nPlatform     : win32-x64\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftVisualStudioCode\\Stable\\1.74.3\\x64\\VSCodeSetup-x64-1.74.3.exe\nChannel      : Stable\nArchitecture : x64\n\nVersion      : 1.74.0\nURI          : https://az764295.vo.msecnd.net/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCodeSetup-x64-1.74.0.exe\nSha256       : fbe977aa69a1c1438d2c2b9d5525415e1fd8d97b6dbb149301a7c3bf3a84b14a\nPlatform     : win32-x64\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftVisualStudioCode\\Stable\\1.74.3\\x64\\VSCodeSetup-x64-1.74.0.exe\nChannel      : Stable\nArchitecture : x64\n</code></pre> <p>This syntax can be simplified by passing details of the Evergreen library at <code>\\\\server\\EvergreenLibrary</code> to <code>Get-EvergreenAppFromLibrary</code> via the pipeline to return details for Microsoft Visual Studio Code.</p> <pre><code>PS C:\\&gt; Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\" | Get-EvergreenAppFromLibrary -Name \"MicrosoftVisualStudioCode\"\n\nVersion      : 1.74.3\nURI          : https://az764295.vo.msecnd.net/stable/97dec172d3256f8ca4bfb2143f3f76b503ca0534/VSCodeSetup-x64-1.74.3.exe\nSha256       : cea32aa015116f8346e054c59497908f6da6059361c1b33d5b68059031f2dc97\nPlatform     : win32-x64\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftVisualStudioCode\\Stable\\1.74.3\\x64\\VSCodeSetup-x64-1.74.3.exe\nChannel      : Stable\nArchitecture : x64\n\nVersion      : 1.74.0\nURI          : https://az764295.vo.msecnd.net/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCodeSetup-x64-1.74.0.exe\nSha256       : fbe977aa69a1c1438d2c2b9d5525415e1fd8d97b6dbb149301a7c3bf3a84b14a\nPlatform     : win32-x64\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftVisualStudioCode\\Stable\\1.74.3\\x64\\VSCodeSetup-x64-1.74.0.exe\nChannel      : Stable\nArchitecture : x64\n</code></pre> <p>Application information returned from an Evergreen library can be used in a script to install the latest available version (in this case) of Microsoft Visual Studio Code:</p> <pre><code>$App = Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\" | Get-EvergreenAppFromLibrary -Name \"MicrosoftVisualStudioCode\" | Select-Object -First 1\n$params = @{\n    FilePath     = $App.Path\n    ArgumentList = \"/VERYSILENT /NOCLOSEAPPLICATIONS /NORESTARTAPPLICATIONS /NORESTART /SP- /SUPPRESSMSGBOXES /MERGETASKS=!runcode\"\n    NoNewWindow  = $true\n    Wait         = $true\n    PassThru     = $true\n    ErrorAction  = \"Continue\"\n}\nStart-Process @params\n</code></pre> <p>Where a specific version of Visual Studio Code needs to be installed instead of the latest version, the specific version can be selected before installing:</p> <pre><code>$App = Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\" | Get-EvergreenAppFromLibrary -Name \"MicrosoftVisualStudioCode\" | Where-Object { $_.Version -eq \"1.74.0\" }\n$params = @{\n    FilePath     = $App.Path\n    ArgumentList = \"/VERYSILENT /NOCLOSEAPPLICATIONS /NORESTARTAPPLICATIONS /NORESTART /SP- /SUPPRESSMSGBOXES /MERGETASKS=!runcode\"\n    NoNewWindow  = $true\n    Wait         = $true\n    PassThru     = $true\n    ErrorAction  = \"Continue\"\n}\nStart-Process @params\n</code></pre>"},{"location":"how/","title":"How Evergreen works","text":"<p>Attention</p> <p>Application version and download information is only pulled from official vendor sources (vendor web site, vendor maintained application update API, vendor's official repositories on GitHub or SourceForge etc.) and never a third party.</p> <p>Evergreen uses an approach that returns at least the version number and download URI for applications programmatically - thus for each run an Evergreen function it should return the latest version and download link.</p> <p>Evergreen uses several strategies to return the latest version of software:</p> <ol> <li>Application update APIs - by using the same approach as the application itself, Evergreen can consistently return the latest version number and download URI - e.g., Microsoft Edge, Mozilla Firefox or Microsoft OneDrive. Fiddler can often be used to find where an application queries for updates</li> <li>Repository APIs - repo hosts including GitHub and SourceForge have APIs that can be queried to return application version and download links - e.g., Audacity, Notepad++ or WinMerge</li> <li>Web page queries - often a vendor download pages will include a query that returns JSON when listing versions and download links - this avoids page scraping. Evergreen can mimic this approach to return application download URLs; however, this approach is likely to fail if the vendor changes how their pages work - e.g., Adobe Acrobat Reader DC</li> <li>Static URLs - some vendors provide static or evergreen URLs to their application installers. These URLs often provide additional information in the URL that can be used to determine the application version and can be resolved to the actual target URL - e.g., Microsoft FSLogix Apps or Zoom</li> </ol>"},{"location":"how/#what-evergreen-does-not-do","title":"What Evergreen Does Not Do","text":"<p>Evergreen does not scrape HTML - scraping web pages to parse text and determine version strings and download URLs can be problematic when text in the page changes or the page is out of date. While the use of RegEx to determine application properties (particularly version numbers) is used for some applications, this approach is not preferred, if possible.</p> <p>Pull requests to the Evergreen project that use web page scraping will be closed. For additional applications where the only recourse it to use web page scraping, see the Nevergreen project.</p> <p>Evergreen does not query non-vendor sources - the intention is to use the same update mechanisms that an application uses to find an update. Where this is not possible, Evergreen may use data sources (i.e. JSON or XML) used by a vendor's download web page (e.g., <code>AdobeAcrobatReaderDC</code>) or another vendor maintained source (e.g., an official GitHub repository).</p>"},{"location":"install/","title":"Installing Evergreen","text":""},{"location":"install/#powershell-support","title":"PowerShell Support","text":"<p>Evergreen supports Windows PowerShell 5.1 and PowerShell 7.0+. Evergreen should work on PowerShell Core 6.x; however, we are not actively testing on that version of PowerShell, so support cannot be guaranteed.</p>"},{"location":"install/#install-from-the-powershell-gallery","title":"Install from the PowerShell Gallery","text":"<p>The Evergreen module is published to the PowerShell Gallery and can be found here: Evergreen. The module can be installed from the gallery with:</p> <pre><code>Install-Module -Name Evergreen\nImport-Module -Name Evergreen\n</code></pre>"},{"location":"install/#updating-the-module","title":"Updating the Module","text":"<p>If you have installed a previous version of the module from the gallery, you can install the latest update with <code>Update-Module</code> and the <code>-Force</code> parameter:</p> <pre><code>Update-Module -Name Evergreen -Force\n</code></pre>"},{"location":"install/#advanced-installation","title":"Advanced Installation","text":"<p>In scripted installations (e.g. operating system deployment), you may wish to ensure that the PowerShell Gallery is first trusted before attempting to install the module:</p> <pre><code>if (Get-PSRepository | Where-Object { $_.Name -eq \"PSGallery\" -and $_.InstallationPolicy -ne \"Trusted\" }) {\n    Install-PackageProvider -Name \"NuGet\" -MinimumVersion 2.8.5.208 -Force\n    Set-PSRepository -Name \"PSGallery\" -InstallationPolicy \"Trusted\"\n}\n</code></pre> <p>Then we can install or update Evergreen based on whether the module is already installed or out of date:</p> <pre><code>$Installed = Get-Module -Name \"Evergreen\" -ListAvailable | `\n    Sort-Object -Property @{ Expression = { [System.Version]$_.Version }; Descending = $true } | `\n    Select-Object -First 1\n$Published = Find-Module -Name \"Evergreen\"\nif ($Null -eq $Installed) {\n    Install-Module -Name \"Evergreen\"\n}\nelseif ([System.Version]$Published.Version -gt [System.Version]$Installed.Version) {\n    Update-Module -Name \"Evergreen\"\n}\n</code></pre>"},{"location":"install/#manual-installation-from-the-repository","title":"Manual Installation from the Repository","text":"<p>The module can be downloaded from the GitHub source repository which includes the module in the <code>Evergreen</code> folder. The folder needs to be copied into one of your PowerShell Module Paths. To see the full list of available PowerShell Module paths, use <code>$env:PSModulePath.split(';')</code> in a PowerShell console.</p> <p>Common PowerShell module paths include:</p> <ul> <li>Current User: <code>%USERPROFILE%\\Documents\\WindowsPowerShell\\Modules\\</code></li> <li>All Users: <code>%ProgramFiles%\\WindowsPowerShell\\Modules\\</code></li> <li>OneDrive: <code>$env:OneDrive\\Documents\\WindowsPowerShell\\Modules\\</code></li> </ul> <p>To install from the repository</p> <ol> <li>Download the <code>main branch</code> to your workstation</li> <li>Copy the contents of the Evergreen folder onto your workstation into the desired PowerShell Module path</li> <li>Open a Powershell console with the Run as Administrator option</li> <li>Run <code>Set-ExecutionPolicy</code> using the parameter <code>RemoteSigned</code> or <code>Bypass</code></li> <li>Unblock the files with <code>Get-ChildItem -Path &lt;path to module&gt; -Recurse | Unblock-File</code></li> </ol> <p>Once installation is complete, you can validate that the module exists by running <code>Get-Module -ListAvailable Evergreen</code>. To use the module, load it with:</p> <pre><code>Import-Module Evergreen\n</code></pre>"},{"location":"issues/","title":"Known issues","text":""},{"location":"issues/#general","title":"General","text":"<p>Where an application source is unavailable the value of the <code>URI</code> property returned may be <code>https://stealthpuppy.com/evergreen/issues/</code>. If you encounter this scenario, follow the troubleshooting steps.</p>"},{"location":"issues/#public-functions","title":"Public Functions","text":""},{"location":"issues/#get-evergreenapp","title":"Get-EvergreenApp","text":"<p><code>Get-EvergreenApp</code> may not fully support proxy servers. This will be fixed in a future release.</p>"},{"location":"issues/#private-functions","title":"Private Functions","text":""},{"location":"issues/#resolve-dnsnamewrapper","title":"Resolve-DnsNameWrapper","text":"<p>Supports Windows platforms only - this function wraps <code>Resolve-DnsName</code> which is not available under PowerShell 6+ on macOS or Linux. Application functions that use this private function will return an error on non-Windows platforms.</p>"},{"location":"issues/#get-githubreporelease","title":"Get-GitHubRepoRelease","text":"<p><code>Get-GitHubRepoRelease</code> queries release information from a specified GitHub repository to return version and binaries or is used to source the version number for some applications. This function uses an unauthenticated session to the GitHub REST API, thus requests will be [rate limited]. Using the <code>-Verbose</code> parameter with <code>Get-EvergreenApp</code> for those applications that use GitHub as the source, will display the number of available requests to the API.</p> <p>Updating <code>Get-GitHubRepoRelease</code> to support authenticated requests is planned for a future release.</p>"},{"location":"issues/#application-functions","title":"Application Functions","text":""},{"location":"issues/#adobeacrobat","title":"AdobeAcrobat","text":"<p>Where Adobe releases an update for Acrobat/Reader DC for Windows ahead of macOS, the current patch release may not be returned. In most cases, Adobe keeps both platforms in sync, so this should be a rare occurrence.</p> <p>The determine the current update version of <code>AdobeAcrobat</code>, the URL for macOS updates is used. This provides a simple text lookup of the latest version number.</p> <p>Note</p> <p>The Windows version of Adobe Acrobat and Reader uses an update URL like: <code>https://armmf.adobe.com/arm-manifests/win/AcrobatDCManifest3.msi</code>, which would require unpacking and parsing the MSI file. Sample code to query the MSI database has been posted here: AdobeReader download links not valid; however, this approach will only work on a Windows hosts and will not support macOS or Linux.</p> <p>Alternative application - <code>AdobeAcrobatDC</code> and <code>AdobeAcrobatReaderDC</code> use a web API lookup to determine the current version of Adobe Acrobat Reader DC, Acrobat Standard DC, and Acrobat Pro DC. Earlier version of Acrobat are still affected by this issue.</p>"},{"location":"issues/#adobeacrobatreaderdc","title":"AdobeAcrobatReaderDC","text":"<p><code>AdobeAcrobatReaderDC</code> may not return an installer with the latest update. This application determines the available installers from the Adobe Acrobat Reader download page - Adobe does not always immediately make the latest update available in the current downloadable installer version.</p> <p>Validate whether <code>AdobeAcrobat</code> returns the latest update version.</p>"},{"location":"issues/#citrixworkspaceapp","title":"CitrixWorkspaceApp","text":"<p>Citrix occasionally makes changes to the update feed for Citrix Workspace app resulting in the version number and/or the installer URI not returning the correct data. We suspect this issue may be related to Citrix throttling updates for the Citrix Workspace app. The issue with the data source is typically fixed within 72 hours.</p> <p>When the incorrect data is returned, Evergreen will return data similar to the below.</p> <pre><code>Version : 24.2.0.172\nTitle   : Citrix Workspace - LTSR\nSize    : 380803896\nHash    : 7efe56e0f177cf9de336fa48daa8b6461080909fd37f7d550fd4f313221091b8\nDate    : 10/4/2024\nStream  : LTSR\nURI     : https://downloadplugins.citrix.com/ReceiverUpdates/Prod/Receiver/Win/CitrixWorkspaceApp24.2.0.172.exe\n\nVersion : 0.0.0.0\nTitle   : Citrix Workspace - Current Release\nSize    : 382956344\nHash    : 5c369d1c127b14a8530b7441a6d3ec49c681fe672e8447c63ecf453cf8b87237\nDate    : 25/4/2024\nStream  : Current\nURI     : https://downloadplugins.citrix.com/ReceiverUpdates/Prod/Receiver/Win/CitrixWorkspaceApp24.3.0.93.exe\n</code></pre>"},{"location":"issues/#404-error","title":"404 Error","text":"<p>Occasionally <code>Get-EvergreenApp -Name \"CitrixWorkspaceApp\"</code> may fail with the following error:</p> <pre><code>WARNING: Invoke-EvergreenRestMethod: Error at URI: https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml.\nWARNING: Invoke-EvergreenRestMethod: Error encountered: Response status code does not indicate success: 404 (Not Found)..\nWARNING: Invoke-EvergreenRestMethod: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\n</code></pre> <p>This typically occurs right after the release of a new version of the Workspace app and may return this result for some time. Right after a new release of the Workspace app, Citrix often makes the update XML file unavailable so that clients do not update immediately. You may have to wait until Citrix makes the URL available again for this function to work.</p>"},{"location":"issues/#out-of-date-update-feed","title":"Out of Date Update Feed","text":"<p>Occasionally <code>Get-EvergreenApp -Name \"CitrixWorkspaceApp\"</code> may not return the latest version of the Citrix Workspace app. This is due to Citrix making changes to the update feed at <code>https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml</code> to throttle or prevent automatic rollout of the latest Workspace app. The only recourse is to wait until Citrix corrects the update feed to include the latest version of the Workspace app again.</p>"},{"location":"issues/#filezilla","title":"FileZilla","text":"<p><code>FileZilla</code> does not currently return data on PowerShell Core and inconsistently returns data on Windows PowerShell. FileZilla uses a self-signed certificate on their update server and the server uses HSTS, which present some challenges with getting Evergreen to work with the server.</p> <p>Note</p> <p><code>FileZilla</code> has been removed from Evergreen until a better solution can be identified.</p>"},{"location":"issues/#ghislertotalcommander","title":"GhislerTotalCommander","text":"<p>This application function works OK without additional requirements on Windows, but requires installation of the <code>DnsClient-PS</code> PowerShell module on macOS or Linux.</p>"},{"location":"issues/#libreoffice","title":"LibreOffice","text":"<p><code>LibreOffice</code> uses the update host at <code>https://update.libreoffice.org/check.php</code> to determine the available update release. The Document Foundation does not immediately make the update host return the latest version at the time of release. In a scenario where the update host does not return the very latest version and the TDF has pulled the downloads for the same version returned from the update host, <code>LibreOffice</code> is unable to build valid download links.</p> <p>The only recourse at this time is to wait until the TDF tells the update host to return the latest version. Also see LibreOffice version</p>"},{"location":"issues/#microsoft365apps","title":"Microsoft365Apps","text":"<p><code>Microsoft365Apps</code> returns publicly documented channels only. Additional channels may be available from the Microsoft 365 Apps update API; however, these may not align to channels documented at microsoft.com, so are not included in this function.</p> <p>Channel properties are listed in the following articles: Configuration options for the Office Deployment Tool, Update channel for Office LTSC 2021, Update channel for Office 2019.</p> <p>Full channel names are listed here: Update history for Microsoft 365 Apps.</p>"},{"location":"issues/#microsoftteamsclassic","title":"MicrosoftTeamsClassic","text":"<p>The version number returned by the Microsoft Teams update API may be slightly different to the version number displayed in the <code>ProductVersion</code> property in the MSI or in Programs and Features. For example, <code>Get-EvergreenApp -Name MicrosoftTeams</code> may report a version number of <code>1.4.00.8872</code>, but the Windows Installer may report <code>1.4.0.8872</code>. Also see Get-MicrosoftTeams displays slightly wrong formatted version number.</p>"},{"location":"issues/#microsoftwvdremotedesktop","title":"MicrosoftWvdRemoteDesktop","text":"<p><code>MicrosoftWvdRemoteDesktop</code> may report an HTTP 503 error from some URLs (see an example below). This is intermittent behavior, but the function should still usable data. Suppress this warning with `-WarningAction \"SilentlyContinue\".</p> <pre><code>WARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE50Mp8.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWARNING: Get-MicrosoftWvdRemoteDesktop: Unable to retrieve headers from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE50Mp8.\nWARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE50t3P.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWARNING: Get-MicrosoftWvdRemoteDesktop: Unable to retrieve headers from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE50t3P.\n</code></pre>"},{"location":"issues/#mozillafirefox","title":"MozillaFirefox","text":""},{"location":"issues/#language-support","title":"Language Support","text":"<p><code>MozillaFirefox</code> will only return the English US installer by default. This has been done due to the lengthy amount of time that the function takes to query the Mozilla site to find the installers for each channel, architecture and file type. This could be up to 12 objects for each language - if the supported languages are included by default, then the function will take several minutes to return an object.</p> <p>Any supported language can be passed to <code>MozillaFirefox</code> by passing a hashtable to <code>-AppParams</code>. For example: <code>Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{Language=\"en-GB\", \"es-ES\"}</code> will return the English (UK) and Spanish language installers for Firefox.</p> <p>Most supported languages can be passed to the function as the language short code. The list of languages can be found in the MozillaFirefox manifest.</p>"},{"location":"issues/#obsstudio","title":"OBSStudio","text":"<p>Returning the latest version and download for OBS Studio may fail when the OBS Project modifies the availability of the update manifest at <code>https://obsproject.com/update_studio/manifest.json</code>. <code>Get-EvergreenApp -Name OBSStudio</code> will return a 404 error. The only recourse is to wait until the OBS Project makes the manifest available again.</p> <p>Evergreen could query versions from the GitHub repository; however, the the OBS Project does not consistently maintain releases in the repository. In some instances a specific release of OBS Studio may address an issue with the macOS version only and <code>OBSStudio</code> would then return no results.</p> <p>Also see Get-EvergreenApp OBSStudio not working due to a 404 errors.</p>"},{"location":"issues/#omnissahorizonclient","title":"OmnissaHorizonClient","text":"<p><code>OmnissaHorizonClient</code> may not always return the current release - the major version property in the VMware Horizon Client software update data does not use easily sortable versioning. This may be fixed in a future release. Also see VMware Horizon Client reporting out of date version.</p>"},{"location":"issues/#paintdotnet","title":"PaintDotNet","text":"<p><code>Get-EvergreenApp -Name PaintDotNet</code> produces the following error under PowerShell on Linux. As a workaround, use <code>Get-EvergreenApp -Name PaintDotNetOfflineInstaller</code> instead.</p> <pre><code>WARNING: Invoke-EvergreenWebRequest: Error at URI: https://www.getpaint.net/updates/versions.8.1000.0.x64.en.txt.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: The SSL connection could not be established, see inner exception..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWrite-Error: /home/aaron/.local/share/powershell/Modules/Evergreen/2205.561/Apps/Get-PaintDotNet.ps1:20\nLine |\n  20 |      $Content = Invoke-EvergreenWebRequest -Uri $res.Get.Uri\n     |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     | Invoke-EvergreenWebRequest: The SSL connection could not be established, see inner exception.\n</code></pre>"},{"location":"issues/#videolanvlcplayer","title":"VideoLanVlcPlayer","text":"<p><code>VideoLanVlcPlayer</code> may not always return the latest available release - the release returned by the update feed used by the VLC media player may not be the same as the current version available for download from the videolan.org site, due to the version returned in the update feed.</p> <p>The source code for the update site can be found here: VideoLAN organization &gt; update.videolan.org &gt; Repository.</p>"},{"location":"issues/#vmwarehorizonclientalt","title":"VMwareHorizonClientAlt","text":"<p><code>VMwareHorizonClient</code> returns the Horizon Client in .tar format. This the same URL used when the Horizon Client updates itself - you will need to unpack the .tar file to retrieve the executable installer.</p>"},{"location":"newlibrary/","title":"Create a new Evergreen library","text":""},{"location":"newlibrary/#about-evergreen-libraries","title":"About Evergreen Libraries","text":"<p>An Evergreen library is a directory that stores multiple versions of downloaded application installers, defined by <code>EvergreenLibrary.json</code> and gathered by <code>Get-EvergreenApp</code> and <code>Save-EvergreenApp</code>.</p> <p>Evergreen typically returns only the most recent version of an application. An Evergreen library enables the download and storage of multiple versions of an application installer including the details for those versions. This functionality enables the installation of a specific version of an application as required.</p>"},{"location":"newlibrary/#what-makes-an-evergreen-library","title":"What makes an Evergreen library","text":"<p>An Evergreen library is a directory on a file system that contains <code>EvergreenLibrary.json</code> which defines the applications that will be downloaded and stored into the library. In the listing below, <code>EvergreenLibrary.json</code> lists the applications and how the output from <code>Get-EvergreenApp</code> should be filtered to store the specific application installer.</p> <pre><code>{\n    \"Name\": \"EvergreenLibrary\",\n    \"Applications\": [\n        {\n            \"Name\": \"Microsoft.NET\",\n            \"EvergreenApp\": \"Microsoft.NET\",\n            \"Filter\": \"$_.Architecture -eq \\\"x64\\\" -and $_.Installer -eq \\\"windowsdesktop\\\" -and $_.Channel -eq \\\"LTS\\\"\"\n        },\n        {\n            \"Name\": \"MicrosoftOneDrive\",\n            \"EvergreenApp\": \"MicrosoftOneDrive\",\n            \"Filter\": \"$_.Architecture -eq \\\"AMD64\\\" -and $_.Ring -eq \\\"Production\\\"\"\n        },\n        {\n            \"Name\": \"MicrosoftEdge\",\n            \"EvergreenApp\": \"MicrosoftEdge\",\n            \"Filter\": \"$_.Platform -eq \\\"Windows\\\" -and $_.Channel -eq \\\"Stable\\\" -and $_.Release -eq \\\"Enterprise\\\" -and $_.Architecture -eq \\\"x64\\\"\"\n        },\n        {\n            \"Name\": \"MicrosoftTeams\",\n            \"EvergreenApp\": \"MicrosoftTeams\",\n            \"Filter\": \"$_.Ring -eq \\\"General\\\" -and $_.Architecture -eq \\\"x64\\\" -and $_.Type -eq \\\"msi\\\"\"\n        }\n    ]\n}\n</code></pre> <p>The filter can define any property from an application version object, so that you can download only the installer type that you require for the library. For example, you may have a library with production or release version of installers, and another library that hosts preview versions of application installers.</p>"},{"location":"newlibrary/#creating-an-evergreen-library","title":"Creating an Evergreen library","text":"<p>To create a new Evergreen library, use <code>New-EvergreenLibrary</code> and specifiy a valid local or UNC path:</p> <pre><code>New-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\"\n</code></pre> <p><code>New-EvergreenLibrary</code> will create the target directory and copy the default <code>EvergreenLibrary.json</code> into the path. The library will now be ready to download the 64-bit, release versions of:</p> <ul> <li>Microsoft.NET Desktop Runtime</li> <li>Microsoft OneDrive</li> <li>Microsoft Edge</li> <li>Microsoft Teams</li> </ul> <p>If you would like to customise the library, open <code>EvergreenLibrary.json</code> in a JSON editor (e.g. Visual Studio Code) and add or remove applications as required.</p>"},{"location":"save/","title":"Download installers","text":"<p>Evergreen includes the function <code>Save-EvergreenApp</code> that simplifies downloading application installers that are returned from <code>Get-EvergreenApp</code>.</p> <p>All applications will return at least a <code>Version</code> and <code>URI</code> property with many returning additional properties including <code>Architecture</code>, <code>Language</code>, <code>Type</code>, <code>Ring</code>, <code>Channel</code> and <code>Release</code>, dependent on the target application. Additionally, the installer file name is typically determined dynamically  with the <code>URI</code> property.</p> <p>To retrieve and download an application installer, we need to use code similar to the following that the filters for the required download and determines the file name before using <code>Invoke-WebRequest</code> to download the file.</p> <pre><code>$Teams = Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_.Architecture -eq \"x64\" -and $_.Release -eq \"Enterprise\" }\n$TeamsInstaller = Split-Path -Path $Teams.Uri -Leaf\nInvoke-WebRequest -Uri $Teams.Uri -OutFile \".\\$TeamsInstaller\" -UseBasicParsing\n</code></pre> <p>This is a simple example, but an application with additional properties and output values is likely to require more complex code to download. For example, Microsoft OneDrive includes a few additional properties and several items in the returned object</p> <pre><code>Version      : 89.0.774.68\nPlatform     : Windows\nChannel      : Stable\nRelease      : Enterprise\nArchitecture : x64\nDate         : 1/4/2021 7:29:00 pm\nHash         : 6E1856B2972688D109F550B0A62C264E9829FF1F392E3BE0FC308900AEFD3455\nURI          : https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/a67b9c83-1671-45ab-982f-e02318eeffc9/MicrosoftEdgeEnterpriseX64.msi\n</code></pre> <p><code>Save-EvergreenApp</code> accepts the output from each application and simplifies downloading the installers included in an application object by determining the target file name, and constructing a target directory path based on the properties in the application output.</p> <pre><code>Get-EvergreenApp -Name MicrosoftOneDrive | Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\"\n</code></pre> <p><code>Save-EvergreenApp</code> will create a folder structure below the path provided (e.g. <code>C:\\Apps\\OneDrive</code>) built from the various properties in the application object passed to it. A folder structure, based on the available properties in the following list will be created in this order - <code>Channel</code>, <code>Release</code>, <code>Ring</code>, <code>Version</code>, <code>Language</code>, <code>Architecture</code>.</p> <p><code>Save-EvergreenApp</code> will return the path to each downloaded file that can be used passed to other functions in a script.</p> <p>In the example using <code>MicrosoftOneDrive</code> above, <code>Save-EvergreenApp</code> returns output similar to this:</p> <pre><code>Path\n----\nC:\\Apps\\OneDrive\\Enterprise\\20.169.0823.0008\\OneDriveSetup.exe\nC:\\Apps\\OneDrive\\Production\\21.030.0211.0002\\OneDriveSetup.exe\nC:\\Apps\\OneDrive\\Production\\21.052.0314.0001\\OneDriveSetup.exe\nC:\\Apps\\OneDrive\\Insider\\21.056.0318.0001\\OneDriveSetup.exe\n</code></pre> <p>To download application installers into a single directory, the <code>-CustomPath</code> parameter can be used. Note that an application object can return multiple versions or channels of an application with the same installer name - when using <code>-CustomPath</code>, the first installer will be saved and subsequent installers with the same file name will be skipped.</p> <p>Attention</p> <p><code>Save-EvergreenApp -CustomPath</code> will only download the first installer passed to the function where the object includes multiple installers with the same file name.</p> <p>Therefore, when using <code>-CustomPath</code>, it would best to filter the output from <code>Get-EvergreenApp</code> before passing it to <code>Save-EvergreenApp</code>. For example:</p> <pre><code>Get-EvergreenApp -Name MicrosoftOneDrive | `\n    | Where-Object { $_.Ring -eq \"Enterprise\" -and $_.Architecture -eq \"AMD64\" -and $_.Type -eq \"exe\" } | `\n    Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\"\n</code></pre>"},{"location":"save/#parameters","title":"Parameters","text":""},{"location":"save/#inputobject","title":"InputObject","text":"<p>An object returned from <code>Get-EvergreenApp</code> with at least the <code>Version</code> and <code>URI</code> properties.</p>"},{"location":"save/#path","title":"Path","text":"<p>The parent directory under which a directory structure will be created and application installers saved into. Typically the target path used will be a path per application.</p>"},{"location":"save/#custompath","title":"CustomPath","text":"<p>The target directory into which the application installers will be directly saved into. Typically the target path used will be a path per application.</p>"},{"location":"save/#verbose","title":"Verbose","text":"<p>The <code>-Verbose</code> parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the <code>-Verbose</code> parameter, <code>Invoke-WebRequest</code> will show download progress which significantly impacts download speed. To suppress download progress, add the <code>-NoProgress</code> switch parameter as well.</p>"},{"location":"save/#-noprogress","title":"-NoProgress","text":"<p><code>Save-EvergreenApp</code> uses <code>Invoke-WebRequest</code> to download target application installers. Download progress is suppressed by default for faster downloads; however, when <code>-Verbose</code> is used, download progress will be displayed. Use <code>-NoProgress</code> with <code>-Verbose</code> to suppress download progress while also displaying verbose output.</p>"},{"location":"save/#-force","title":"-Force","text":"<p>Forces this function to download the target application installers from the URI property even if they already exist in the target directory.</p>"},{"location":"save/#alias","title":"Alias","text":"<p><code>Save-EvergreenApp</code> has an alias of <code>sea</code> to simplify downloading applications, for example:</p> <pre><code>PS /Users/aaron&gt; gea Slack | sea -Path /Users/aaron/Temp/Slack\n</code></pre>"},{"location":"test/","title":"Test Installers","text":"<p>Evergreen includes the function <code>Test-EvergreenApp</code> that can test whether the application installer URLs returned from <code>Get-EvergreenApp</code> exist at the URL specified. <code>Test-EvergreenApp</code> will enable you to quickly validate whether the application installer exists.</p> <p>In the following example, we can test whether the URLs returned by <code>MicrosoftOneDrive</code> exist:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_.Type -eq \"exe\" } | Test-EvergreenApp\n\nURI                                                                            Result\n---                                                                            ------\nhttps://oneclient.sfx.ms/Win/MsitFast/22.082.0417.0001/amd64/OneDriveSetup.exe   True\nhttps://oneclient.sfx.ms/Win/MsitFast/22.082.0417.0001/OneDriveSetup.exe         True\nhttps://oneclient.sfx.ms/Win/Insiders/22.077.0410.0007/OneDriveSetup.exe         True\nhttps://oneclient.sfx.ms/Win/Insiders/22.077.0410.0007/amd64/OneDriveSetup.exe   True\nhttps://oneclient.sfx.ms/Win/MsitSlow/22.077.0410.0006/OneDriveSetup.exe         True\nhttps://oneclient.sfx.ms/Win/MsitSlow/22.077.0410.0006/amd64/OneDriveSetup.exe   True\nhttps://oneclient.sfx.ms/Win/Insiders/22.070.0403.0004/amd64/OneDriveSetup.exe   True\nhttps://oneclient.sfx.ms/Win/Insiders/22.070.0403.0004/OneDriveSetup.exe         True\nhttps://oneclient.sfx.ms/Win/Prod/22.065.0412.0004/amd64/OneDriveSetup.exe       True\nhttps://oneclient.sfx.ms/Win/Prod/22.065.0412.0004/OneDriveSetup.exe             True\nhttps://oneclient.sfx.ms/Win/Enterprise/21.230.1107.0004/OneDriveSetup.exe       True\nhttps://oneclient.sfx.ms/Win/Enterprise/21.230.1107.0004/amd64/OneDriveSetup.\u2026   True\n</code></pre>"},{"location":"test/#parameters","title":"Parameters","text":""},{"location":"test/#inputobject","title":"InputObject","text":"<p>An object returned from <code>Get-EvergreenApp</code> with at least the <code>Version</code> and <code>URI</code> properties.</p>"},{"location":"test/#verbose","title":"Verbose","text":"<p>The <code>-Verbose</code> parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the <code>-Verbose</code> parameter, <code>Invoke-WebRequest</code> will show download progress which significantly impacts download speed. To suppress download progress, add the <code>-NoProgress</code> switch parameter as well.</p>"},{"location":"test/#alias","title":"Alias","text":"<p><code>Test-EvergreenApp</code> has an alias of <code>tea</code> to simplify testing applications, for example:</p> <pre><code>PS /Users/aaron&gt; gea MicrosoftTeams | tea\n</code></pre>"},{"location":"troubleshoot/","title":"Troubleshooting","text":""},{"location":"troubleshoot/#wait-and-try-again","title":"Wait and Try Again","text":"<p>The most common issues we see are transient - because Evergreen sources updates at the time you run the <code>Get-EvergreenApp</code>, the results can be affected by anything between you and the application vendor data source. An issue could be caused by network or DNS issues, of often by a vendor making changes on their end.</p> <p>If you experience an issue, wait an hour and try again.</p>"},{"location":"troubleshoot/#function-errors","title":"Function Errors","text":"<p>If you encounter an error when returning details for an existing application, re-run the <code>Get-EvergreenApp</code> with the <code>-Verbose</code> parameter. This will display additional details and should provide some indication as to where the request is failing.</p> <p>In most cases, the issue will be caused by the vendor's source locations being temporarily unavailable (which should eventually resolve) or changing, which may require an update to the module.</p>"},{"location":"troubleshoot/#example-microsoftwvdinfraagent","title":"Example - MicrosoftWvdInfraAgent","text":"<p>In this example, we can see that calling <code>MicrosoftWvdInfraAgent</code> results in a HTTP 503 error. Running the command later in the day, resulted in a successful request. Here we've encountered an issue with the vendor's source which was resolved without further action.</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftWvdInfraAgent\"\n\nInvoke-EvergreenWebRequest : Invoke-EvergreenWebRequest: The remote server returned an error: (503) Server Unavailable..\nAt C:\\projects\\evergreen\\Evergreen\\Apps\\Get-MicrosoftWvdInfraAgent.ps1:25 char:16\n+     $Content = Invoke-EvergreenWebRequest @params\n+                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Invoke-EvergreenWebRequest\n</code></pre>"},{"location":"troubleshoot/#example-microsoftwvdmultimediaredirection","title":"Example - MicrosoftWvdMultimediaRedirection","text":"<p>In this example, we again have a HTTP 503 error, so the source location is probably unavailable.</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftWvdMultimediaRedirection\"\n\nWARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4QWrF.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWrite-Error: /Users/aaron/projects/evergreen/Evergreen/Apps/Get-MicrosoftWvdMultimediaRedirection.ps1:25\nLine |\n  25 |      $Content = Invoke-EvergreenWebRequest @params\n     |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     | Invoke-EvergreenWebRequest: Response status code does not indicate success: 503 (Service Unavailable)..\n\nWARNING: Get-MicrosoftWvdMultimediaRedirection: Failed to return a header from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4QWrF.\nException: /Users/aaron/projects/evergreen/Evergreen/Public/Get-EvergreenApp.ps1:80\nLine |\n  80 |                  throw \"Failed to capture output from: Get-$Name.\"\n     |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     | Failed to capture output from: Get-MicrosoftWvdMultimediaRedirection.\n</code></pre> <p>If we run the same command with the <code>-Verbose</code> parameter, some more detail will be provided.</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftWvdMultimediaRedirection\" -Verbose\n\nVERBOSE: Function path: /Users/aaron/projects/evergreen/Evergreen/Apps/Get-MicrosoftWvdMultimediaRedirection.ps1\nVERBOSE: Function exists: /Users/aaron/projects/evergreen/Evergreen/Apps/Get-MicrosoftWvdMultimediaRedirection.ps1.\nVERBOSE: Dot sourcing: /Users/aaron/projects/evergreen/Evergreen/Apps/Get-MicrosoftWvdMultimediaRedirection.ps1.\nVERBOSE: Get-FunctionResource: read application resource strings from [/Users/aaron/projects/evergreen/Evergreen/Manifests/MicrosoftWvdMultimediaRedirection.json]\nVERBOSE: Calling: Get-MicrosoftWvdMultimediaRedirection.\nVERBOSE: Invoke-EvergreenWebRequest: Invoke-WebRequest parameter: [Method: Head].\nVERBOSE: Invoke-EvergreenWebRequest: Invoke-WebRequest parameter: [UserAgent: Mozilla/5.0 (Macintosh; Darwin 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:29 PDT 2022; root:xnu-8020.121.3~4/RELEASE_ARM64_T8101; en-AU) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 Safari/534.6].\nVERBOSE: Invoke-EvergreenWebRequest: Invoke-WebRequest parameter: [UseBasicParsing: True].\nVERBOSE: Invoke-EvergreenWebRequest: Invoke-WebRequest parameter: [Uri: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4QWrF].\nVERBOSE: HEAD with 0-byte payload\nVERBOSE: received 175-byte response of content type text/html\nWARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4QWrF.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWrite-Error: /Users/aaron/projects/evergreen/Evergreen/Apps/Get-MicrosoftWvdMultimediaRedirection.ps1:25\nLine |\n  25 |      $Content = Invoke-EvergreenWebRequest @params\n     |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     | Invoke-EvergreenWebRequest: Response status code does not indicate success: 503 (Service Unavailable)..\n\nWARNING: Get-MicrosoftWvdMultimediaRedirection: Failed to return a header from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4QWrF.\nException: /Users/aaron/projects/evergreen/Evergreen/Public/Get-EvergreenApp.ps1:80\nLine |\n  80 |                  throw \"Failed to capture output from: Get-$Name.\"\n     |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     | Failed to capture output from: Get-MicrosoftWvdMultimediaRedirection.\n</code></pre>"},{"location":"troubleshoot/#example-zoom","title":"Example - Zoom","text":"<p>In the example below, let's return details for <code>Zoom</code> with the <code>-Verbose</code> parameter which will provide an idea of what Evergreen is doing as it retrieves details for Zoom:</p> <pre><code>Get-EvergreenApp -Name \"Zoom\" -Verbose\n\nVERBOSE: Get-EvergreenApp: Function exists: /Users/aaron/Projects/evergreen/Evergreen/Apps/Get-Zoom.ps1.\nVERBOSE: Get-EvergreenApp: Dot sourcing: /Users/aaron/Projects/evergreen/Evergreen/Apps/Get-Zoom.ps1.\nVERBOSE: Get-EvergreenApp: Calling: Get-Zoom.\nVERBOSE: Get-FunctionResource: read application resource strings from [/Users/aaron/Projects/evergreen/Evergreen/Manifests/Zoom.json]\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/download/vdi/ZoomCitrixHDXMediaPlugin.msi.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/vdi/ZoomCitrixHDXMediaPlugin.msi?_x_zm_rtaid=1ntgQ-l3TsyzTXmWzDs59w.1625872867055.20bd6639bacc03053f5e85d49d21fc77&amp;_x_zm_rhtaid=731].\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/client/latest/ZoomInstaller.exe.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/5.7.1.543/ZoomInstaller.exe].\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/client/latest/ZoomOutlookPluginSetup.msi.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/5.7.0.64/ZoomOutlookPluginSetup.msi].\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/client/latest/ZoomNotesPluginSetup.msi.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/5.7.0.65/ZoomNotesPluginSetup.msi].\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/client/latest/ZoomInstallerFull.msi.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/5.7.1.543/ZoomInstallerFull.msi].\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/client/latest/ZoomRooms.exe.\nWARNING: Resolve-SystemNetWebRequest: Error at URI: https://zoom.us/client/latest/ZoomRooms.exe.\nWARNING: Resolve-SystemNetWebRequest: Response:  -\nWARNING: Resolve-SystemNetWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nVERBOSE: Get-Zoom: Setting fallback URL to: https://stealthpuppy.com/evergreen/issues/.\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/client/latest/ZoomLyncPluginSetup.msi.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/5.2.44882.0827/ZoomLyncPluginSetup.msi].\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/download/vdi/ZoomVmwareMediaPlugin.msi.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/vdi/ZoomVmwareMediaPlugin.msi?_x_zm_rtaid=kow6DBRDQhO8sS9-JyHTDQ.1625872876745.f65b9ac6613cb7a22686fc40291be0bf&amp;_x_zm_rhtaid=705].\nVERBOSE: Resolve-SystemNetWebRequest: Attempting to resolve: https://zoom.us/download/vdi/ZoomInstallerVDI.msi.\nVERBOSE: Resolve-SystemNetWebRequest: Response: [OK].\nVERBOSE: Resolve-SystemNetWebRequest: Resolved to: [https://cdn.zoom.us/prod/vdi/ZoomInstallerVDI.msi?_x_zm_rtaid=EiXK_i85Qnyxl0PnXE6ITg.1625872878653.8a666f93edfe18920e810d72dadd4246&amp;_x_zm_rhtaid=751].\nVERBOSE: Get-EvergreenApp: Output result from: /Users/aaron/Projects/evergreen/Evergreen/Apps/Get-Zoom.ps1.\n</code></pre> <p>In this request we can see there's an issue at <code>https://zoom.us/client/latest/ZoomRooms.exe</code>. Validating this URL in the browser or with <code>Invoke-WebRequest</code> we can see the the source is unavailable. The vendor may have temporarily moved the source, thus Evergreen will work once the source is available again. If the vendor has updated the source location permanently, Evergreen will require updates to use the new source locations.</p>"},{"location":"troubleshoot/#output-errors","title":"Output Errors","text":""},{"location":"troubleshoot/#suppressing-errors-and-warning","title":"Suppressing Errors and Warning","text":"<p>Some functions may output errors and warnings, but still return application version information. In the example below, <code>MicrosoftWvdRemoteDesktop</code> returns data, but outputs several warnings:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\"\n\nWARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51od9.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWARNING: Get-MicrosoftWvdRemoteDesktop: Unable to retrieve headers from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51od9.\nWARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy7.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWARNING: Get-MicrosoftWvdRemoteDesktop: Unable to retrieve headers from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy7.\nWARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51od9.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWARNING: Get-MicrosoftWvdRemoteDesktop: Unable to retrieve headers from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51od9.\nWARNING: Invoke-EvergreenWebRequest: Error at URI: https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy7.\nWARNING: Invoke-EvergreenWebRequest: Error encountered: Response status code does not indicate success: 503 (Service Unavailable)..\nWARNING: Invoke-EvergreenWebRequest: For troubleshooting steps see: https://stealthpuppy.com/evergreen/troubleshoot/.\nWARNING: Get-MicrosoftWvdRemoteDesktop: Unable to retrieve headers from https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy7.\n</code></pre> <p>These warnings can be suppressed with the <code>-WarningAction</code> parameter:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" -ErrorAction \"SilentlyContinue\" -WarningAction \"SilentlyContinue\"\n</code></pre>"},{"location":"troubleshoot/#unexpected-output","title":"Unexpected Output","text":"<p>Where the output from a function is producing output that is clearly incorrect, you should log an issue.</p> <p>What may be more common is filtering the output incorrectly and not receiving the expected result. Here's an example output from <code>MicrosoftWvdRemoteDesktop</code> which has several releases with multiple properties. Viewing the output without any filtering will show all releases and all properties:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" | Format-Table\n\nVersion    Architecture Channel Date      Filename                           URI\n-------    ------------ ------- ----      --------                           ---\n1.2.3401.0 ARM64        Insider Unknown   RemoteDesktop_1.2.3401.0_ARM64.msi https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51od9\n1.2.3401.0 x64          Insider 19/7/2022 RemoteDesktop_1.2.3401.0_x64.msi   https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy5\n1.2.3401.0 x86          Insider Unknown   RemoteDesktop_1.2.3401.0_x86.msi   https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy7\n1.2.3401.0 ARM64        Dogfood Unknown   RemoteDesktop_1.2.3401.0_ARM64.msi https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51od9\n1.2.3401.0 x64          Dogfood 19/7/2022 RemoteDesktop_1.2.3401.0_x64.msi   https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy5\n1.2.3401.0 x86          Dogfood Unknown   RemoteDesktop_1.2.3401.0_x86.msi   https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE51gy7\n1.2.3317.0 ARM64        Public  13/7/2022 RemoteDesktop_1.2.3317.0_ARM64.msi https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE50W7e\n1.2.3317.0 x64          Public  13/7/2022 RemoteDesktop_1.2.3317.0_x64.msi   https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE518ld\n1.2.3317.0 x86          Public  13/7/2022 RemoteDesktop_1.2.3317.0_x86.msi   https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE50W7f\n</code></pre> <p>To return a single release, we can filter the output with <code>Where-Object</code>, which does require syntax to be correct and use the expected value for each property in the filter:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" | Where-Object { $_.Architecture -eq \"x64\" -and $_.Channel -eq \"Public\" }\n\nVersion      : 1.2.3317.0\nArchitecture : x64\nChannel      : Public\nDate         : 13/7/2022\nFilename     : RemoteDesktop_1.2.3317.0_x64.msi\nURI          : https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE518ld\n</code></pre>"},{"location":"under/","title":"Under the hood","text":"<p>Evergreen is a self-contained PowerShell module, that once installed does not require access to any additional content other than official vendor sources used to retrieve details for a specified application.</p> <p>Due to Evergreen's approach to finding the latest version and download URL for an application, custom code is required for most applications. While some applications have a common source location such as GitHub (that provides an API for releases), most applications require querying an application specific API or site to return details for that application.</p>"},{"location":"under/#module-structure","title":"Module structure","text":"<p>Evergreen includes the following directory structure:</p> <ul> <li><code>&lt;ModuleBase&gt;/Public</code> - public functions including <code>Get-EvergreenApp</code>, <code>Find-EvergreenApp</code> and <code>Save-EvergreenApp</code></li> <li><code>&lt;ModuleBase&gt;/Apps</code> - internal per-application functions that contain the logic for retrieving application details. These are often unique for each application</li> <li><code>&lt;ModuleBase&gt;/Shared</code> - internal functions used by specific apps to reduce repeated code</li> <li><code>&lt;ModuleBase&gt;/Manifests</code> - each application includes a manifest in JSON format that includes application specific details used by the per-application functions. These describe details of the application including URLs used to determine the latest version of the application</li> <li><code>&lt;ModuleBase&gt;/Private</code> - internal functions containing reusable code</li> </ul>"},{"location":"under/#public","title":"Public","text":"<p>The <code>Public</code> folder includes all functions exported from Evergreen:</p> <ul> <li><code>ConvertTo-DotNetVersionClass.ps1</code></li> <li><code>Export-EvergreenApp.ps1</code></li> <li><code>Export-EvergreenManifest.ps1</code></li> <li><code>Find-EvergreenApp.ps1</code></li> <li><code>Get-EvergreenApp.ps1</code></li> <li><code>Get-EvergreenAppFromApi.ps1</code></li> <li><code>Get-EvergreenAppFromLibrary.ps1</code></li> <li><code>Get-EvergreenEndpointFromApi.ps1</code></li> <li><code>Get-EvergreenLibrary.ps1</code></li> <li><code>New-EvergreenLibrary.ps1</code></li> <li><code>Save-EvergreenApp.ps1</code></li> <li><code>Start-EvergreenLibraryUpdate.ps1</code></li> <li><code>Test-EvergreenApp.ps1</code></li> </ul>"},{"location":"under/#apps","title":"Apps","text":"<p>The <code>Apps</code> folder includes application specific functions that do the hard work of determining details for the target application.</p> <p>For example, <code>Get-MicrosoftEdge</code> queries the official Edge versions list hosted at <code>https://edgeupdates.microsoft.com/api/products</code>. This allows the function to use the same process that Edge itself uses to determine the latest version of Edge and the URL to download the installer. When using <code>Get-EvergreenApp -Name MicrosoftEdge</code>, <code>Get-EvergreenApp</code> calls <code>Get-MicrosoftEdge</code> and passes the result back to the pipeline.</p> <p>While most functions includes code unique to that application, several applications use GitHub or SourceForge as a source to determine application versions and updates thus these functions can use more shared code than other functions.</p>"},{"location":"under/#manifests","title":"Manifests","text":"<p>Each application includes a manifest file in JSON format that includes details that are used by the internal application function when retrieving the application version and download URI. The manifest structure includes three primary properties - <code>Name</code> (the vendor and application name), <code>Source</code> (a link to an official site), and <code>Get</code>, which defines items such as the URL used to find the application updates. The base manifest structure will look similar to the following:</p> <pre><code>{\n    \"Name\": \"Vendor Application name\",\n    \"Source\": \"https://www.vendorwebsite.com/product\",\n    \"Get\": {\n        \"Update\": {\n            \"Uri\": \"https://update.vendorwebsite.com/api/product\"\n        }\n    },\n    \"Download\": {\n            \"Uri\": \"https://download.vendorwebsite.com/files\"\n    },\n}\n</code></pre> <p>Additionally, each manifest defines the property <code>Install</code> that includes details about installing the application; however, note that while this is included for many applications, this isn't intended to provide a definitive construct for installing applications.</p>"},{"location":"under/#private","title":"Private","text":"<p>The <code>Private</code> folder includes re-usable code, used by many of the application functions. Several key functions include:</p> <ul> <li><code>Get-GitHubRepoRelease</code> - returns releases from a target GitHub repository</li> <li><code>Get-SourceForgeRepoRelease</code> - returns releases from a target SourceForge repository</li> <li><code>Invoke-EvergreenRestMethod</code> - provides logic around <code>Invoke-RestMethod</code> to return content from an update API</li> <li><code>Invoke-EvergreenWebRequest</code> - provides logic around <code>Invoke-WebRequest</code> to return the content from a target URI</li> </ul>"},{"location":"updatelibrary/","title":"Update an Evergreen Library","text":"<p>To update a library, use <code>Start-EvergreenLibraryUpdate</code> - this function will read the <code>EvergreenLibrary.json</code> file and use <code>Get-EvergreenApp</code> and <code>Save-EvergreenApp</code> to populate the library with the application installers and maintain a manifest of the application version information for later reference.</p> <p>Here's an example - <code>EvergreenLibrary.json</code> contains the following entry for Microsoft Teams:</p> <pre><code>{\n    \"Name\": \"MicrosoftTeams\",\n    \"EvergreenApp\": \"MicrosoftTeams\",\n    \"Filter\": \"$_.Ring -eq \\\"General\\\" -and $_.Architecture -eq \\\"x64\\\" -and $_.Type -eq \\\"msi\\\"\"\n}\n</code></pre> <ul> <li><code>Name</code> - defines the application folder for the library. You may want to download both the 32-bit and 64-bit version of the Microsoft Teams installer</li> <li><code>EvergreenApp</code> - defines the application name supported by Evergreen. The list of supported application names can be found with <code>Find-EvergreenApp</code></li> <li><code>Filter</code> - this is the filter typically used with <code>Get-EvergreenApp | Where-Object</code> to filter the application version information for a specific application installer</li> </ul> <p>The Microsoft Teams installer will be downloaded in this example to the following folder structure: <code>\\\\server\\EvergreenLibrary\\MicrosoftTeams\\General\\1.5.00.17656\\x64</code>. After the installers are successfully downloaded, the application version information is saved. For this example, <code>\\\\server\\EvergreenLibrary\\MicrosoftTeams\\MicrosoftTeams.json</code> will be saved with the following details:</p> <pre><code>{\n  \"Version\": \"1.5.00.17656\",\n  \"URI\": \"https://statics.teams.cdn.office.net/production-windows-x64/1.5.00.17656/Teams_windows_x64.msi\",\n  \"Type\": \"msi\",\n  \"Ring\": \"General\",\n  \"Path\": \"/Users/aaron/Temp/Evergreen/MicrosoftTeams/General/1.5.00.17656/x64/Teams_windows_x64.msi\",\n  \"Architecture\": \"x64\"\n}\n</code></pre> <p>Each time a new version of Team installer is downloaded, <code>MicrosoftTeams.json</code> is updated with the new version for later use.</p>"},{"location":"updatelibrary/#how-to-update-a-library","title":"How to update a library","text":"<p><code>Start-EvergreenLibraryUpdate</code> has a single parameter - <code>-Path</code>, which should be the path to the Evergreen library:</p> <pre><code>Start-EvergreenLibraryUpdate -Path \"\\\\server\\EvergreenLibrary\"\n</code></pre> <p>If a path is specified that does not contain <code>EvergreenLibrary.json</code> and error will be thrown.</p> <p>To download new application installers when a new version is detected, <code>Start-EvergreenLibraryUpdate</code> can be run via a scheduled task or other automation tools. This provides a simple method to update the library and make new application available for install or packaging.</p>"},{"location":"use/","title":"Using Evergreen","text":"<p><code>Get-EvergreenApp</code> is used to return application details by specifying an application with the <code>-Name</code> parameter.</p> <p>For example, let's find the latest version of the Microsoft FSLogix Apps agent:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftFSLogixApps\"\n</code></pre> <p>This will return output similar to the following that lists the version number and download URL for the application. This application output also includes the release date:</p> <pre><code>Version : 2.9.7979.62170\nDate    : 9/11/2021\nChannel : Production\nURI     : https://download.microsoft.com/download/3/f/7/3f755dbd-debe-46d4-811c-3e7c87bc4408/FSLogix_Apps_2.9.7979.62170.zip\n</code></pre> <p>All output properties are strings that can be acted on with other functions and cmdlets including filtering the output with <code>Where-Object</code>.</p>"},{"location":"use/#output","title":"Output","text":"<p>Each Evergreen application returns at least two properties in the object is sends to the pipeline:</p> <ul> <li><code>Version</code> - a string property that is the version number of the application. If you need these in a version format, cast them with <code>[System.Version]</code></li> <li><code>URI</code> - a string property that is the download location for the latest version of the application. These will be publicly available locations that provide installers in typically Windows installer formats, e.g., <code>exe</code>, <code>msi</code>. Some downloads may be in other formats, such as <code>zip</code> that will need to be extracted before install</li> </ul> <p>Several applications may include additional properties in their output, which will often require filtering, including:</p> <ul> <li><code>Architecture</code> - the processor architecture of the installer</li> <li><code>Type</code> - an application may return installer downloads in <code>exe</code>, <code>msi</code>, <code>zip</code>, format etc. In some instances, <code>Type</code> may return slightly different data</li> <li><code>Ring</code>, <code>Channel</code>, and/or <code>Release</code> - some applications include different release rings or channels for enterprise use. The value of this property is often unique to that application</li> <li><code>Language</code> - some application installers may support specific languages</li> <li><code>Date</code> - in some cases, Evergreen can return the release date of the returned version</li> </ul>"},{"location":"use/#filter-output","title":"Filter Output","text":"<p>Where an application returns more than one object to the pipeline, you will need to filter the output with <code>Where-Object</code> or <code>Sort-Object</code>. For example, <code>Get-EvergreenApp -Name MicrosoftTeams</code> returns both the 32-bit and 64-bit versions of the General and Preview release rings ot the Microsoft Teams installer. As most environments should be on 64-bit Windows these days, we can filter the 64-bit version of Teams with:</p> <pre><code>Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_.Architecture -eq \"x64\" -and $_.Ring -eq \"General\" -and $_.Type -eq \"msi\" }\n</code></pre> <p>This will return details of the 64-bit Microsoft Teams installer that we can use in a script.</p> <pre><code>Version      : 1.4.00.32771\nRing         : General\nArchitecture : x64\nType         : msi\nURI          : https://statics.teams.cdn.office.net/production-windows-x64/1.4.00.32771/Teams_windows_x64.msi\n</code></pre>"},{"location":"use/#use-output","title":"Use Output","text":"<p>With the filtered output we can download the latest version of Microsoft Teams before copying it to a target location or installing it directly to the current system. The following commands filters <code>Get-EvergreenApp -Name MicrosoftTeams</code> to get the latest version and download, then downloads the installer with <code>Save-EvergreenApp</code> and finally uses <code>msiexec</code> to install Teams in a VDI supported configuration:</p> <pre><code>$Teams = Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_.Architecture -eq \"x64\" -and $_.Ring -eq \"General\" -and $_.Type -eq \"msi\" }\n$TeamsInstaller = $Teams | Save-EvergreenApp -Path \"C:\\Temp\\Teams\"\n&amp; \"$env:SystemRoot\\System32\\msiexec.exe\" \"/package $($TeamsInstaller.FullName) ALLUSER=1 ALLUSERS=1 /quiet\"\n</code></pre>"},{"location":"use/#parameters","title":"Parameters","text":""},{"location":"use/#name","title":"Name","text":"<p>The <code>-Name</code> parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with <code>Find-EvergreenApp</code>.</p>"},{"location":"use/#verbose","title":"Verbose","text":"<p>The <code>-Verbose</code> parameter can be useful for observing where the application details are obtained from (e.g. the application update URL) and for troubleshooting when the expected application details are not returned.</p>"},{"location":"use/#alias","title":"Alias","text":"<p><code>Get-EvergreenApp</code> has an alias of <code>gea</code> to simplify retrieving application details, for example:</p> <pre><code>PS /Users/aaron&gt; gea Slack\n\nVersion      : 4.14.0\nPlatform     : PerMachine\nArchitecture : x64\nURI          : https://downloads.slack-edge.com/releases/windows/4.14.0/prod/x64/slack-standalone-4.14.0.0.msi\n</code></pre>"},{"location":"who/","title":"Who Is Using Evergreen","text":"<p>https://letsconfigmgr.com/keeping-your-intune-base-applications-evergreen/ https://ccmexec.com/2021/03/update-edge-source-files-in-memcm-using-powershell/ https://www.msc365.eu/azure/portfolio/2022/11/25/microsoft-intune-plugin.html https://stealthpuppy.com/apptracker/ https://github.com/aaronparker/m365apps https://stealthpuppy.com/packagefactory/ https://github.com/aaronparker/nerdio-actions</p>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/","title":"ConvertTo-DotNetVersionClass","text":""},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#synopsis","title":"SYNOPSIS","text":"<p>Converts a version string to a standard .NET compliant Version class.</p>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#syntax","title":"SYNTAX","text":"<pre><code>ConvertTo-DotNetVersionClass [-Version] &lt;String&gt; [-ProgressAction &lt;ActionPreference&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#description","title":"DESCRIPTION","text":"<p>The ConvertTo-DotNetVersionClass function takes a version string as input and converts it into a .NET Version class.  It normalizes the segments of the version string, ensuring it has exactly four segments by either summing excess segments  or padding with zeros if there are fewer than four segments.</p> <p>If the conversion to a .NET Version class fails, the function will return the normalized version string as a string.</p>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#example-1","title":"EXAMPLE 1","text":"<pre><code>ConvertTo-DotNetVersionClass -Version \"1.2.3.4\"\n1.2.3.4\n</code></pre>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#example-2","title":"EXAMPLE 2","text":"<pre><code>ConvertTo-DotNetVersionClass -Version \"1.2.3\"\n1.2.3.0\n</code></pre>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#example-3","title":"EXAMPLE 3","text":"<pre><code>ConvertTo-DotNetVersionClass -Version \"1.2.3.4.5\"\n1.2.3.9\n</code></pre>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#-version","title":"-Version","text":"<p>A version string to convert to a standard .NET compliant version class.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/ConvertTo-DotNetVersionClass/#related-links","title":"RELATED LINKS","text":"<p>Export application version information</p>"},{"location":"help/en-US/Export-EvergreenApp/","title":"Export-EvergreenApp","text":""},{"location":"help/en-US/Export-EvergreenApp/#synopsis","title":"SYNOPSIS","text":"<p>Exports application details gathered by <code>Get-EvergreenApp</code> to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file.</p>"},{"location":"help/en-US/Export-EvergreenApp/#syntax","title":"SYNTAX","text":"<pre><code>Export-EvergreenApp [-InputObject] &lt;Array&gt; -Path &lt;FileInfo&gt; [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Export-EvergreenApp/#description","title":"DESCRIPTION","text":"<p>Export application details gathered by <code>Get-EvergreenApp</code> to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file.</p>"},{"location":"help/en-US/Export-EvergreenApp/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Export-EvergreenApp/#example-1","title":"EXAMPLE 1","text":"<pre><code>$OneDrive = Get-EvergreenApp -Name \"MicrosoftOneDrive\"\nSave-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\"\nExport-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\"\n</code></pre> <p>Description: <code>Get-EvergreenApp</code> returns version information for <code>MicrosoftOneDrive</code>. <code>Save-EvergreenApp</code> is then used to save the returned installers to <code>C:\\Evergreen\\OneDrive</code>. Version information is then saved to <code>C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json</code> with <code>Export-EvergreenApp</code>. If version information is already stored in the target file, the additional version information is saved to the same file.</p>"},{"location":"help/en-US/Export-EvergreenApp/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Export-EvergreenApp/#-inputobject","title":"-InputObject","text":"<p><code>Export-EvergreenApp</code> accepts the PSObject from <code>Get-EvergreenApp</code>.</p> <pre><code>Type: Array\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Export-EvergreenApp/#-path","title":"-Path","text":"<p>Specifies a path to the JSON file where version information will be stored. If the file does not exist, the parent directory must already exist.</p> <pre><code>Type: FileInfo\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Export-EvergreenApp/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Export-EvergreenApp/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Export-EvergreenApp/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Export-EvergreenApp/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Export-EvergreenApp/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":"<p>Export-EvergreenApp accepts the output from Get-EvergreenApp.</p>"},{"location":"help/en-US/Export-EvergreenApp/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Export-EvergreenApp/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Export-EvergreenApp/#related-links","title":"RELATED LINKS","text":"<p>Export application version information</p>"},{"location":"help/en-US/Export-EvergreenManifest/","title":"Export-EvergreenManifest","text":""},{"location":"help/en-US/Export-EvergreenManifest/#synopsis","title":"SYNOPSIS","text":"<p>Exports an Evergreen application JSON manifest as a hashtable.</p>"},{"location":"help/en-US/Export-EvergreenManifest/#syntax","title":"SYNTAX","text":"<pre><code>Export-EvergreenManifest [-Name] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Export-EvergreenManifest/#description","title":"DESCRIPTION","text":"<p>Exports an Evergreen application JSON manifest as a hashtable that can be used for various functions including scripting or saving to an external file.</p>"},{"location":"help/en-US/Export-EvergreenManifest/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Export-EvergreenManifest/#example-1","title":"EXAMPLE 1","text":"<pre><code>Export-EvergreenManifest -Name \"MicrosoftEdge\"\n</code></pre> <p>Description: Exports the application manifest for the application \"MicrosoftEdge\".</p>"},{"location":"help/en-US/Export-EvergreenManifest/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Export-EvergreenManifest/#-name","title":"-Name","text":"<p>The application name to return details for. The list of supported applications can be found with <code>Find-EvergreenApp</code>.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Export-EvergreenManifest/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Export-EvergreenManifest/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Export-EvergreenManifest/#systemstring","title":"System.String","text":""},{"location":"help/en-US/Export-EvergreenManifest/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Export-EvergreenManifest/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":""},{"location":"help/en-US/Export-EvergreenManifest/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Export-EvergreenManifest/#related-links","title":"RELATED LINKS","text":"<p>Getting started with Evergreen</p>"},{"location":"help/en-US/Find-EvergreenApp/","title":"Find-EvergreenApp","text":""},{"location":"help/en-US/Find-EvergreenApp/#synopsis","title":"SYNOPSIS","text":"<p>Outputs a table with the applications that Evergreen supports.</p>"},{"location":"help/en-US/Find-EvergreenApp/#syntax","title":"SYNTAX","text":"<pre><code>Find-EvergreenApp [[-Name] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Find-EvergreenApp/#description","title":"DESCRIPTION","text":"<p>Returns a table built from the internal application manifests to list the applications supported by Evergreen. The table includes the Name (the internal name used when querying for the application via <code>Get-EvergreenApp</code>), Application (typically the full vendor and application name) and Link (a URL hosting official vendor information about the application) properties.</p>"},{"location":"help/en-US/Find-EvergreenApp/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Find-EvergreenApp/#example-1","title":"EXAMPLE 1","text":"<pre><code>Find-EvergreenApp\n</code></pre> <p>Description: Returns a table with the all of the applications currently supported by Evergreen.</p>"},{"location":"help/en-US/Find-EvergreenApp/#example-2","title":"EXAMPLE 2","text":"<pre><code>Find-EvergreenApp -Name \"Edge\"\n</code></pre> <p>Description: Returns a table with the all of the currently supported applications that match \"Edge\".</p>"},{"location":"help/en-US/Find-EvergreenApp/#example-3","title":"EXAMPLE 3","text":"<pre><code>Find-EvergreenApp -Name \"Microsoft\"\n</code></pre> <p>Description: Returns a table with the all of the currently supported applications that match \"Microsoft\".</p>"},{"location":"help/en-US/Find-EvergreenApp/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Find-EvergreenApp/#-name","title":"-Name","text":"<p>The application name to return details for. This can be the entire application name or a portion thereof.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Find-EvergreenApp/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Find-EvergreenApp/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Find-EvergreenApp/#systemstring","title":"System.String","text":""},{"location":"help/en-US/Find-EvergreenApp/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Find-EvergreenApp/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":""},{"location":"help/en-US/Find-EvergreenApp/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Find-EvergreenApp/#related-links","title":"RELATED LINKS","text":"<p>Find supported applications</p>"},{"location":"help/en-US/Get-EvergreenApp/","title":"Get-EvergreenApp","text":""},{"location":"help/en-US/Get-EvergreenApp/#synopsis","title":"SYNOPSIS","text":"<p>Returns the latest version and download URL/s for an application supported by the Evergreen module.</p>"},{"location":"help/en-US/Get-EvergreenApp/#syntax","title":"SYNTAX","text":"<pre><code>Get-EvergreenApp [-Name] &lt;String&gt; [[-AppParams] &lt;Hashtable&gt;] [-Proxy &lt;String&gt;]\n [-ProxyCredential &lt;PSCredential&gt;] [-SkipCertificateCheck] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#description","title":"DESCRIPTION","text":"<p>Queries the internal application functions and manifests included in the module to find the latest version and download link/s for the specified application.</p> <p>The output from this function can be passed to Where-Object to filter for a specific download based on properties including processor architecture, file type or other properties.</p> <p><code>Get-EvergreenApp</code> uses official vendor sources including update APIs, web queries, and code repository locations to return details of a target application at run time.</p>"},{"location":"help/en-US/Get-EvergreenApp/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Get-EvergreenApp/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-EvergreenApp -Name \"MicrosoftEdge\"\n\nVersion      : 89.0.774.76\nPlatform     : Windows\nChannel      : Stable\nRelease      : Enterprise\nArchitecture : x64\nDate         : 12/4/2021\nHash         : 9E7A29B4BE6E1CD707F80B4B79008F19D2D5DD5C774D317A493EC6DE5BE0B7D7\nURI          : https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/4d12f620-174c-4259-85e6-8a80ea45ff10/MicrosoftEdgeEnterpriseX64.msi\n</code></pre> <p>Description: Returns the current version and download URLs for Microsoft Edge using the official Microsoft Edge update API at https://edgeupdates.microsoft.com/api/products.</p>"},{"location":"help/en-US/Get-EvergreenApp/#example-2","title":"EXAMPLE 2","text":"<pre><code>Get-EvergreenApp -Name \"MicrosoftEdge\" | Where-Object { $_.Architecture -eq \"x64\" -and $_.Channel -eq \"Stable\" -and $_.Release -eq \"Enterprise\" }\n</code></pre> <p>Description: Returns the current version and download URL for the Stable channel of the 64-bit Enterprise ring of Microsoft Edge.</p>"},{"location":"help/en-US/Get-EvergreenApp/#example-3","title":"EXAMPLE 3","text":"<pre><code>(Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_.Type -eq \"Exe\" -and $_.Ring -eq \"Production\" }) | `\n    Sort-Object -Property @{ Expression = { [System.Version]$_.Version }; Descending = $true } | Select-Object -First 1\n</code></pre> <p>Description: Returns the current version and download URL for the Production ring of Microsoft OneDrive and selects the latest version in the event that more that one release is returned.</p>"},{"location":"help/en-US/Get-EvergreenApp/#example-4","title":"EXAMPLE 4","text":"<pre><code>Get-EvergreenApp -Name \"AdobeAcrobatReaderDC\" | Where-Object { $_.Language -eq \"English\" -and $_.Architecture -eq \"x86\" }\n</code></pre> <p>Description: Returns the current version and download URL that matches the English language, 32-bit release of Adobe Acrobat Reader DC.</p>"},{"location":"help/en-US/Get-EvergreenApp/#example-5","title":"EXAMPLE 5","text":"<pre><code>Find-EvergreenApp -Name \"Teams\" | Get-EvergreenApp\n</code></pre> <p>Description: Lists the available applications matching the string \"Teams\" (for example, Microsoft Teams), and passes the output to <code>Get-EvergreenApp</code>, which will query the matching application name. Note that <code>Get-EvergreenApp</code> will only process the first application returned on the pipeline and not all multiple matching applications.</p>"},{"location":"help/en-US/Get-EvergreenApp/#example-6","title":"EXAMPLE 6","text":"<pre><code>Get-EvergreenApp -Name \"MicrosoftTeams\" | Save-EvergreenApp -Path \"C:\\Apps\\Teams\"\n</code></pre> <p>Description: <code>Get-EvergreenApp</code> returns the details for the latest version of Microsoft Teams which is passed via the pipeline to <code>Save-EvergreenApp</code>. The output is used to save the target URLs to C:\\Apps\\Teams using a directory structure based on the returned object. In this case, the Ring and Architecture properties of the returned object will be used in the directory structure.</p>"},{"location":"help/en-US/Get-EvergreenApp/#example-7","title":"EXAMPLE 7","text":"<pre><code>Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{ Language = \"en-GB\", \"es-ES\" }\n</code></pre> <p>Description: Passes en-GB an es-ES languages to MozillaFirefox to return downloads for these languages rather than the default en-US.</p>"},{"location":"help/en-US/Get-EvergreenApp/#example-8","title":"EXAMPLE 8","text":"<pre><code>Get-EvergreenApp -Name \"GitHubRelease\" -AppParams @{ Uri = \"https://api.github.com/repos/atom/atom/releases/latest\" }\n</code></pre> <p>Description: Passes a custom repository to the internal application function for <code>GetHubRelease</code> rather than using the repository embedded into the manifest, allowing <code>Get-EvergreenApp</code> to find the releases for an application hosted on GitHub that isn't already supported by Evergreen.</p>"},{"location":"help/en-US/Get-EvergreenApp/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Get-EvergreenApp/#-name","title":"-Name","text":"<p>The application name to return details for. The list of supported applications can be found with <code>Find-EvergreenApp</code>.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#-appparams","title":"-AppParams","text":"<p>A hashtable of parameters to pass to the internal application function. Accepts a hashtable of keys and values that will be passed to the internal application function to enable additional functionality (application function dependent).</p> <pre><code>Type: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#-proxy","title":"-Proxy","text":"<p>Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#-proxycredential","title":"-ProxyCredential","text":"<p>Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user.</p> <p>Type a user name, such as User01 or Domain01\\User01, User@Domain.Com, or enter a <code>PSCredential</code> object, such as one generated by the <code>Get-Credential</code> cmdlet.</p> <p>This parameter is valid only when the Proxy parameter is also used in the command.</p> <pre><code>Type: PSCredential\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#-skipcertificatecheck","title":"-SkipCertificateCheck","text":"<p>Skips certificate validation checks. This includes all validations such as expiration, revocation, trusted root authority, etc.</p> <p>Warning: Using this parameter isn't secure and isn't recommended. This switch is only intended to be used where a vendor has a temporary certificate issue and should only be used for testing purposes. Use at your own risk.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenApp/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Get-EvergreenApp/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Get-EvergreenApp/#systemstring","title":"System.String","text":""},{"location":"help/en-US/Get-EvergreenApp/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Get-EvergreenApp/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":""},{"location":"help/en-US/Get-EvergreenApp/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Get-EvergreenApp/#related-links","title":"RELATED LINKS","text":"<p>Use Evergreen</p>"},{"location":"help/en-US/Get-EvergreenAppFromApi/","title":"Get-EvergreenAppFromApi","text":""},{"location":"help/en-US/Get-EvergreenAppFromApi/#synopsis","title":"SYNOPSIS","text":"<p>Returns the latest version and download URL/s for an application supported by the Evergreen module. This function returns the same data as Get-EvergreenApp, but queries the Evergreen App Tracker API for this data.</p>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#syntax","title":"SYNTAX","text":"<pre><code>Get-EvergreenAppFromApi [-Name] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#description","title":"DESCRIPTION","text":"<p>Returns the latest version and download URL/s for an application supported by the Evergreen module. This function returns the same data as Get-EvergreenApp, but queries the Evergreen App Tracker API for this data. Data for the API is from a key/value store updated by Get-EvergreenApp every 12-hours.</p>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Get-EvergreenAppFromApi/#example-1","title":"Example 1","text":"<pre><code>Get-EvergreenAppFromApi -Name \"MicrosoftEdge\"\n\nVersion      : 89.0.774.76\nPlatform     : Windows\nChannel      : Stable\nRelease      : Enterprise\nArchitecture : x64\nDate         : 12/4/2021\nHash         : 9E7A29B4BE6E1CD707F80B4B79008F19D2D5DD5C774D317A493EC6DE5BE0B7D7\nURI          : https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/4d12f620-174c-4259-85e6-8a80ea45ff10/MicrosoftEdgeEnterpriseX64.msi\n</code></pre> <p>Description: Returns the current version and download URLs for Microsoft Edge using the official Microsoft Edge update API at https://edgeupdates.microsoft.com/api/products.</p>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#example-2","title":"EXAMPLE 2","text":"<pre><code>Get-EvergreenAppFromApi -Name \"MicrosoftEdge\" | Where-Object { $_.Architecture -eq \"x64\" -and $_.Channel -eq \"Stable\" -and $_.Release -eq \"Enterprise\" }\n</code></pre> <p>Description: Returns the current version and download URL for the Stable channel of the 64-bit Enterprise ring of Microsoft Edge.</p>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Get-EvergreenAppFromApi/#-name","title":"-Name","text":"<p>The application name to return details for. The list of supported applications can be found with <code>Find-EvergreenApp</code>.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Get-EvergreenAppFromApi/#systemstring","title":"System.String","text":""},{"location":"help/en-US/Get-EvergreenAppFromApi/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Get-EvergreenAppFromApi/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":""},{"location":"help/en-US/Get-EvergreenAppFromApi/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Get-EvergreenAppFromApi/#related-links","title":"RELATED LINKS","text":"<p>https://stealthpuppy.com/evergreen/invoke/</p>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/","title":"Get-EvergreenLibraryApp","text":""},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#synopsis","title":"SYNOPSIS","text":"<p>Returns details for a specified application from an Evergreen Library. The output will include version and path information for the application that can be used to install application binaries from the library.</p>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#syntax","title":"SYNTAX","text":"<pre><code>Get-EvergreenLibraryApp [-Inventory] &lt;PSObject&gt; [-Name] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#description","title":"DESCRIPTION","text":"<p>Returns details for a specified application from an Evergreen Library including all version and binaries / installer information stored in the library. Details returned are in descending order by version number so that the latest version can be used or a specific version filtered with Where-Object.</p>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#example-1","title":"Example 1","text":"<pre><code>PS C:\\&gt; Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\" | Get-EvergreenLibraryApp -Name \"MicrosoftVisualStudioCode\"\n\nVersion      : 1.74.3\nURI          : https://az764295.vo.msecnd.net/stable/97dec172d3256f8ca4bfb2143f3f76b503ca0534/VSCodeSetup-x64-1.74.3.exe\nSha256       : cea32aa015116f8346e054c59497908f6da6059361c1b33d5b68059031f2dc97\nPlatform     : win32-x64\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftVisualStudioCode\\Stable\\1.74.3\\x64\\VSCodeSetup-x64-1.74.3.exe\nChannel      : Stable\nArchitecture : x64\n\nVersion      : 1.74.0\nURI          : https://az764295.vo.msecnd.net/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCodeSetup-x64-1.74.0.exe\nSha256       : fbe977aa69a1c1438d2c2b9d5525415e1fd8d97b6dbb149301a7c3bf3a84b14a\nPlatform     : win32-x64\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftVisualStudioCode\\Stable\\1.74.3\\x64\\VSCodeSetup-x64-1.74.0.exe\nChannel      : Stable\nArchitecture : x64\n</code></pre> <p>Returns details about Microsoft Visual Studio Code from the Evergreen library at \\server\\EvergreenLibrary that is sent to Get-EvergreenLibraryApp from Get-EvergreenLibrary via the pipeline.</p>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#example-2","title":"Example 2","text":"<pre><code>PS C:\\&gt; $Library = Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\"\nPS C:\\&gt; Get-EvergreenLibraryApp -Inventory $Library -Name \"MicrosoftTeams\"\n\nVersion      : 1.5.00.36367\nURI          : https://statics.teams.cdn.office.net/production-windows-x64/1.5.00.36367/Teams_windows_x64.msi\nType         : msi\nRing         : General\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftTeams\\General\\1.5.00.36367\\x64\\Teams_windows_x64.msi\nArchitecture : x64\n\nVersion      : 1.5.00.31168\nURI          : https://statics.teams.cdn.office.net/production-windows-x64/1.5.00.31168/Teams_windows_x64.msi\nType         : msi\nRing         : General\nPath         : \\\\server\\EvergreenLibrary\\MicrosoftTeams\\General\\1.5.00.31168\\x64\\Teams_windows_x64.msi\nArchitecture : x64\n</code></pre> <p>Uses Get-EvergreenLibrary to place details about the Evergreen library at \\server\\EvergreenLibrary into an object called $Library, which is then used on the command line for Get-EvergreenLibraryApp to return details about Microsoft Teams.</p>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#-inputobject","title":"-InputObject","text":"<p><code>Get-EvergreenLibraryApp</code> accepts the PSObject output from <code>Get-EvergreenLibrary</code>. <code>Get-EvergreenLibraryApp</code> will test for the existence of the Inventory property on this object and throw an error if it does not exist.</p> <pre><code>Type: PSObject\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#-name","title":"-Name","text":"<p>The application name to return details for. The list of supported applications can be found with <code>Find-EvergreenApp</code>.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":""},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#systemmanagementautomationpsobject_1","title":"System.Management.Automation.PSObject","text":""},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Get-EvergreenAppFromLibrary/#related-links","title":"RELATED LINKS","text":"<p>Create an Evergreen library:</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/","title":"Get-EvergreenEndpointFromApi","text":""},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#synopsis","title":"SYNOPSIS","text":"<p>Returns an array of applications, endpoints and ports required by Evergreen to source application updates and URLs for application downloads.</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#syntax","title":"SYNTAX","text":"<pre><code>Get-EvergreenEndpointFromApi [-Name] &lt;String&gt; [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#description","title":"DESCRIPTION","text":"<p>Queries the Evergreen API to return endpoints URLs and TCP ports required to use Evergreen to find application versions and download application installers.</p> <p>The list of endpoints returned can be used for auditing purposes and to define an allow list for firewalls or proxy servers where internet access is restricted.</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-EvergreenEndpointFromApi\n\nApplication  Endpoints                                                                              Ports\n-----------  ---------                                                                              -----\n1Password    {1password.com, app-updates.agilebits.com, downloads.1password.com, cdn.agilebits.com} {443}\n1Password7   {1password.com, c.1password.com, download.app.com\"}                                    {443}\n1PasswordCLI {app-updates.agilebits.com, cache.agilebits.com, developer.1password.com}              {443}\n7zip         {nchc.dl.sourceforge.net, sourceforge.net, www.7-zip.org, versaweb.dl.sourceforge.net} {443}\n7ZipZS       {api.github.com, mcmilk.de, github.com}                                                {443}\n</code></pre> <p>Description: Returns the list of endpoint URL sources and ports for all of the applications currently supported by Evergreen.</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#example-2","title":"EXAMPLE 2","text":"<pre><code>Get-EvergreenEndpointFromApi -Name \"MicrosoftEdge\", \"MicrosoftTeams\"\n\nApplication    Endpoints                                                                              Ports\n-----------    ---------                                                                              -----\nMicrosoftEdge  {edgeupdates.microsoft.com, www.microsoft.com, msedge.sf.dl.delivery.mp.microsoft.com} {443}\nMicrosoftTeams {config.teams.microsoft.com, www.microsoft.com, statics.teams.cdn.office.net}          {443}\n</code></pre> <p>Description: Returns the list of endpoint URL sources and ports for determining the application versions and downloads for Microsoft Edge and Microsoft Teams.</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#example-3","title":"EXAMPLE 3","text":"<pre><code>Get-EvergreenEndpointFromApi | Select-Object -ExpandProperty Endpoints -Unique\n\n1password.com\napp-updates.agilebits.com\ndownloads.1password.com\ncdn.agilebits.com\nc.1password.com\n</code></pre> <p>Description: Returns a simple array of all of the unique endpoint URLs for the applications currently supported by Evergreen.</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#-name","title":"-Name","text":"<p>The application name to return details for. The list of supported applications can be found with <code>Find-EvergreenApp</code>.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#systemarray","title":"System.Array","text":""},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":""},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Get-EvergreenEndpointFromApi/#related-links","title":"RELATED LINKS","text":"<p>Retrieve endpoints used by Evergreen</p>"},{"location":"help/en-US/Get-EvergreenLibrary/","title":"Get-EvergreenLibrary","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#synopsis","title":"SYNOPSIS","text":"<p>Returns details about an Evergreen library including details about the applications configured in the library and the downloaded application binaries and versions.</p>"},{"location":"help/en-US/Get-EvergreenLibrary/#syntax","title":"SYNTAX","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#path","title":"Path","text":"<pre><code>Get-EvergreenLibrary [-Path] &lt;FileInfo&gt; [-ProgressAction &lt;ActionPreference&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Get-EvergreenLibrary/#uri","title":"URI","text":"<pre><code>Get-EvergreenLibrary -Uri &lt;Uri&gt; [-ProgressAction &lt;ActionPreference&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Get-EvergreenLibrary/#description","title":"DESCRIPTION","text":"<p>Returns details about an Evergreen library at a specified path. This will include details of the library stored in <code>EvergreenLibrary.json</code> and application version information stored for each application in the library. Application downloads and application version information must first be downloaded via <code>Invoke-EvergreenLibraryUpdate</code>.</p>"},{"location":"help/en-US/Get-EvergreenLibrary/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#example-1","title":"Example 1","text":"<pre><code>PS C:\\&gt; Get-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\"\n</code></pre> <p>Returns details about the Evergreen library at \\server\\EvergreenLibrary, including application version information stored for each application.</p>"},{"location":"help/en-US/Get-EvergreenLibrary/#example-2","title":"Example 2","text":"<pre><code>PS C:\\&gt; Get-EvergreenLibrary -Uri \"https://st5srpuzr5v74.blob.core.windows.net/library/EvergreenLibrary.json\"\n</code></pre> <p>Returns details about the Evergreen library at on the storage account - \"st5srpuzr5v74\" under the container \"library\", including application version information stored for each application.</p>"},{"location":"help/en-US/Get-EvergreenLibrary/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#-path","title":"-Path","text":"<p>Specify the local or UNC path to the Evergreen Library.</p> <pre><code>Type: FileInfo\nParameter Sets: Path\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenLibrary/#-uri","title":"-Uri","text":"<p>Specify the URI to an Evergreen Library hosted on blob storage on an Azure storage account.</p> <pre><code>Type: Uri\nParameter Sets: URI\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Get-EvergreenLibrary/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Get-EvergreenLibrary/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#systemiofileinfo","title":"System.IO.FileInfo","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#systemobject","title":"System.Object","text":""},{"location":"help/en-US/Get-EvergreenLibrary/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Get-EvergreenLibrary/#related-links","title":"RELATED LINKS","text":"<p>Create an Evergreen library</p>"},{"location":"help/en-US/New-EvergreenLibrary/","title":"New-EvergreenLibrary","text":""},{"location":"help/en-US/New-EvergreenLibrary/#synopsis","title":"SYNOPSIS","text":"<p>Creates an Evergreen library at the specified path.</p>"},{"location":"help/en-US/New-EvergreenLibrary/#syntax","title":"SYNTAX","text":"<pre><code>New-EvergreenLibrary [-Path] &lt;FileInfo&gt; [-Name &lt;String&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/New-EvergreenLibrary/#description","title":"DESCRIPTION","text":"<p>Creates an Evergreen library at the specified path. An Evergreen library is a directory with a manifest file that defines the application installers to be stored in the library (<code>EvergreenLibrary.json</code>). <code>New-EvergreenLibrary</code> will create a default library in the specified path, after which the manifest file can be manually updated to define the application list for the library.</p>"},{"location":"help/en-US/New-EvergreenLibrary/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/New-EvergreenLibrary/#example-1","title":"EXAMPLE 1","text":"<pre><code>New-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\"\n</code></pre> <p>Description: Creates a new Evergreen library in the path \\server\\EvergreenLibrary.</p>"},{"location":"help/en-US/New-EvergreenLibrary/#example-2","title":"EXAMPLE 2","text":"<pre><code>New-EvergreenLibrary -Path \"\\\\server\\EvergreenLibrary\" -Name \"AzureVirtualDesktopProd\"\n</code></pre> <p>Description: Creates a new Evergreen library in the path \\server\\EvergreenLibrary. Assigns the name AzureVirtualDesktopProd to the manifest file - <code>EvergreenLibrary.json</code>.</p>"},{"location":"help/en-US/New-EvergreenLibrary/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/New-EvergreenLibrary/#-path","title":"-Path","text":"<p>Specifies the path to the Evergreen library. It is expected that the target location is empty. If the path includes EvergreenLibrary.json, <code>New-EvergreenLibrary</code> will not make changes to the manifest.</p> <pre><code>Type: FileInfo\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/New-EvergreenLibrary/#-name","title":"-Name","text":"<p>Specify a name for the library.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/New-EvergreenLibrary/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/New-EvergreenLibrary/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/New-EvergreenLibrary/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/New-EvergreenLibrary/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/New-EvergreenLibrary/#systemstring","title":"System.String","text":"<p>New-EvergreenLibrary accepts string parameters.</p>"},{"location":"help/en-US/New-EvergreenLibrary/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/New-EvergreenLibrary/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen Author: Aaron Parker Twitter: @stealthpuppy</p>"},{"location":"help/en-US/New-EvergreenLibrary/#related-links","title":"RELATED LINKS","text":"<p>Create an Evergreen library:</p>"},{"location":"help/en-US/Save-EvergreenApp/","title":"Save-EvergreenApp","text":""},{"location":"help/en-US/Save-EvergreenApp/#synopsis","title":"SYNOPSIS","text":"<p>Downloads target URIs passed to this function from <code>Get-EvergreenApp</code> into a directory structure.</p>"},{"location":"help/en-US/Save-EvergreenApp/#syntax","title":"SYNTAX","text":""},{"location":"help/en-US/Save-EvergreenApp/#path-default","title":"Path (Default)","text":"<pre><code>Save-EvergreenApp [-InputObject] &lt;PSObject&gt; [[-Path] &lt;FileInfo&gt;] [-Proxy &lt;String&gt;]\n [-ProxyCredential &lt;PSCredential&gt;] [-UserAgent &lt;String&gt;] [-Force] [-NoProgress] [-WhatIf] [-Confirm]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#custompath","title":"CustomPath","text":"<pre><code>Save-EvergreenApp [-InputObject] &lt;PSObject&gt; [[-CustomPath] &lt;FileInfo&gt;] [-Proxy &lt;String&gt;]\n [-ProxyCredential &lt;PSCredential&gt;] [-UserAgent &lt;String&gt;] [-Force] [-NoProgress] [-WhatIf] [-Confirm]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#description","title":"DESCRIPTION","text":"<p>Saves target URLs passed to this function from <code>Get-EvergreenApp</code> output to into a directory structure below -Path using the properties from the object passed to the function.</p> <p><code>Get-EvergreenApp</code> will return an object that may include application properties including (in the following order) - Product, Track, Channel, Release, Ring, Version, Language, and (processor) Architecture. Only properties that exist on the target object will be used.</p> <p>This simplifies saving the target application installers or updaters into a consistent directory structure without having to build the target directory structure yourself or deal with other functions to download the file.</p> <p>To override the default behaviour that creates the directory structure based on the properties of the object passed to the function, use the <code>-CustomPath</code> parameter to specify an exact path to save files into. Note that this method download the first file and then will skip files from an object passed from <code>Get-EvergreenApp</code> that includes files with the same name.</p>"},{"location":"help/en-US/Save-EvergreenApp/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Save-EvergreenApp/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -Path \"C:\\Temp\\Adobe\"\n</code></pre> <p>Description: Downloads each file specified in the URIs returned by <code>Get-EvergreenApp -Name \"AdobeAcrobat\"</code> to a directory structure below C:\\Temp\\Adobe, resulting in a directory structure per file like: C:\\Temp\\Adobe\\\\\\\\\\."},{"location":"help/en-US/Save-EvergreenApp/#example-2","title":"EXAMPLE 2","text":"<pre><code>Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -CustomPath \"C:\\Temp\\Adobe\"\n</code></pre> <p>Description: Downloads all of the URIs returned by <code>Get-EvergreenApp -Name \"AdobeAcrobat\"</code> to a directory named C:\\Temp\\Adobe. All files specified in the URI property will be saved into this directory.</p>"},{"location":"help/en-US/Save-EvergreenApp/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Save-EvergreenApp/#-inputobject","title":"-InputObject","text":"<p><code>Save-EvergreenApp</code> accepts the PSObject from <code>Get-EvergreenApp</code>. <code>Save-EvergreenApp</code> will test for the existence of at least these properties - Version and URI.</p> <pre><code>Type: PSObject\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-path","title":"-Path","text":"<p>The target directory under which a directory structure will be created and application installers saved into. Typically the target path used will be a path per application.</p> <pre><code>Type: FileInfo\nParameter Sets: Path\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: (Resolve-Path -Path $PWD)\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-custompath","title":"-CustomPath","text":"<p>Specify a single directory path where all application installers will be saved into. No sub-directories will be created.</p> <pre><code>Type: FileInfo\nParameter Sets: CustomPath\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-proxy","title":"-Proxy","text":"<p>Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-proxycredential","title":"-ProxyCredential","text":"<p>Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user.</p> <p>Type a user name, such as User01 or Domain01\\User01, User@Domain.Com, or enter a <code>PSCredential</code> object, such as one generated by the <code>Get-Credential</code> cmdlet.</p> <p>This parameter is valid only when the Proxy parameter is also used in the command.</p> <pre><code>Type: PSCredential\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: [System.Management.Automation.PSCredential]::Empty\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-noprogress","title":"-NoProgress","text":"<p><code>Save-EvergreenApp</code> uses <code>Invoke-WebRequest</code> to download target application installers. Download progress is suppressed by default for faster downloads; however, when <code>-Verbose</code> is used, download progress will be displayed. Use <code>-NoProgress</code> with <code>-Verbose</code> to suppress download progress while also displaying verbose output.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-force","title":"-Force","text":"<p>Forces this function to download the target application installers from the URI property even if they already exist in the target directory.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#-useragent","title":"-UserAgent","text":"<p>Specifies a user agent string for the web request.</p> <p>The default user agent is similar to the below with slight variations for each operating system and platform.</p> <p>Mozilla/5.0 (Macintosh; Darwin 22.2.0 Darwin Kernel Version 22.2.0: Fri Nov 11 02:04:44 PST 2022; root:xnu-8792.61.2~4/RELEASE_ARM64_T8103; en-AU) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 Safari/534.6</p> <p>To test a website with the standard user agent string that's used by most internet browsers, use the properties of the PSUserAgent class, such as Chrome, FireFox, InternetExplorer, Opera, and Safari.</p> <p>For example, the following command uses the user agent string for Internet Explorer: Save-EvergreenApp -UserAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer)</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Save-EvergreenApp/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Save-EvergreenApp/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Save-EvergreenApp/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":"<p>Save-EvergreenApp accepts the output from Get-EvergreenApp.</p>"},{"location":"help/en-US/Save-EvergreenApp/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Save-EvergreenApp/#systemmanagementautomationpsobject_1","title":"System.Management.Automation.PSObject","text":"<p>Provides a list of paths of the downloaded target files.</p>"},{"location":"help/en-US/Save-EvergreenApp/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Save-EvergreenApp/#related-links","title":"RELATED LINKS","text":"<p>Download application installers:</p>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/","title":"Start-EvergreenLibraryUpdate","text":""},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#synopsis","title":"SYNOPSIS","text":"<p>Invokes the update and download of application installers in an Evergreen library. <code>Start-EvergreenLibraryUpdate</code> reads the library manifest (<code>EvergreenLibrary.json</code>) which defines the applications in the library and uses <code>Get-EvergreenApp</code> and <code>Save-EvergreenApp</code> to download the latest installers to the library.</p>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#syntax","title":"SYNTAX","text":"<pre><code>Start-EvergreenLibraryUpdate [-Path] &lt;FileInfo&gt; [-Proxy &lt;String&gt;] [-ProxyCredential &lt;PSCredential&gt;] [-WhatIf]\n [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#description","title":"DESCRIPTION","text":"<p>An Evergreen library can be used to maintain multiple versions of application installers, rather than always using the latest installer. An Evergreen library allows you to install the version of an application required for a specific environment including rolling back to a previous version of an application. An Evergreen library also enables you to build an image build without requiring internet access, by downloading the application installers to the library and then using those installers during the image build process.</p> <p><code>Start-EvergreenLibraryUpdate</code> invokes the update and download of application installers in an Evergreen library. <code>Start-EvergreenLibraryUpdate</code> reads the library manifest (<code>EvergreenLibrary.json</code>) which defines the applications in the library and uses <code>Get-EvergreenApp</code> and <code>Save-EvergreenApp</code> to download the latest installers to the library.</p>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#example-1","title":"EXAMPLE 1","text":"<pre><code>Start-EvergreenLibraryUpdate -Path \"\\\\server\\EvergreenLibrary\"\n</code></pre> <p>Description: <code>Start-EvergreenLibraryUpdate</code> reads the library manifest <code>EvergreenLibrary.json</code> located in \\server\\EvergreenLibrary which defines the applications for that library. It uses <code>Get-EvergreenApp</code> and <code>Save-EvergreenApp</code> to download the latest installers to the library.</p>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#-path","title":"-Path","text":"<p>Specifies the path to the Evergreen library. The path must include EvergreenLibrary.json, in the expected structure, which defines the applications to be stored in the library.</p> <pre><code>Type: FileInfo\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#-proxy","title":"-Proxy","text":"<p>Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#-proxycredential","title":"-ProxyCredential","text":"<p>Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user.</p> <p>Type a user name, such as User01 or Domain01\\User01, User@Domain.Com, or enter a <code>PSCredential</code> object, such as one generated by the <code>Get-Credential</code> cmdlet.</p> <p>This parameter is valid only when the Proxy parameter is also used in the command.</p> <pre><code>Type: PSCredential\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#systemstring","title":"System.String","text":"<p>Start-EvergreenLibraryUpdate accepts a string parameter.</p>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Start-EvergreenLibraryUpdate/#related-links","title":"RELATED LINKS","text":"<p>Update an Evergreen library</p>"},{"location":"help/en-US/Test-EvergreenApp/","title":"Test-EvergreenApp","text":""},{"location":"help/en-US/Test-EvergreenApp/#synopsis","title":"SYNOPSIS","text":"<p>Validates target URIs passed to this function from <code>Get-EvergreenApp</code>.</p>"},{"location":"help/en-US/Test-EvergreenApp/#syntax","title":"SYNTAX","text":"<pre><code>Test-EvergreenApp [-InputObject] &lt;PSObject&gt; [-Proxy &lt;String&gt;] [-ProxyCredential &lt;PSCredential&gt;] [-Force]\n [-NoProgress] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#description","title":"DESCRIPTION","text":"<p>Evergreen includes the function <code>Test-EvergreenApp</code> that can test whether the application installer URLs returned from <code>Get-EvergreenApp</code> exist at the URL specified. <code>Test-EvergreenApp</code> will enable you to quickly validate whether the application installer exists.</p>"},{"location":"help/en-US/Test-EvergreenApp/#examples","title":"EXAMPLES","text":""},{"location":"help/en-US/Test-EvergreenApp/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Test-EvergreenApp\n</code></pre> <p>Description: Validates the URI properties for each object returned from <code>Get-EvergreenApp -Name \"MicrosoftOneDrive\"</code> and returns a true or false result if the URI exists or does not exist.</p>"},{"location":"help/en-US/Test-EvergreenApp/#parameters","title":"PARAMETERS","text":""},{"location":"help/en-US/Test-EvergreenApp/#-inputobject","title":"-InputObject","text":"<p><code>Test-EvergreenApp</code> accepts the PSObject from <code>Get-EvergreenApp</code>. <code>Test-EvergreenApp</code> will test for the existence of at least these properties - Version and URI.</p> <pre><code>Type: PSObject\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#-proxy","title":"-Proxy","text":"<p>Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server. Note - this is experimental support for proxies.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#-proxycredential","title":"-ProxyCredential","text":"<p>Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user.</p> <p>Type a user name, such as User01 or Domain01\\User01, User@Domain.Com, or enter a <code>PSCredential</code> object, such as one generated by the <code>Get-Credential</code> cmdlet.</p> <p>This parameter is valid only when the Proxy parameter is also used in the command. Note - this is experimental support for proxy servers and has not been extensively tested.</p> <pre><code>Type: PSCredential\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: [System.Management.Automation.PSCredential]::Empty\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#-force","title":"-Force","text":"<p>{{ Fill Force Description }}</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#-noprogress","title":"-NoProgress","text":"<p><code>Test-EvergreenApp</code> uses <code>Invoke-WebRequest</code> to validate target application installers. Progress is suppressed by default for faster tests; however, when <code>-Verbose</code> is used, progress will be displayed. Use <code>-NoProgress</code> with <code>-Verbose</code> to suppress download progress while also displaying verbose output.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#-useragent","title":"-UserAgent","text":"<p>Specifies a user agent string for the web request.</p> <p>The default user agent is similar to the below with slight variations for each operating system and platform.</p> <p>Mozilla/5.0 (Macintosh; Darwin 22.2.0 Darwin Kernel Version 22.2.0: Fri Nov 11 02:04:44 PST 2022; root:xnu-8792.61.2~4/RELEASE_ARM64_T8103; en-AU) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 Safari/534.6</p> <p>To test a website with the standard user agent string that's used by most internet browsers, use the properties of the PSUserAgent class, such as Chrome, FireFox, InternetExplorer, Opera, and Safari.</p> <p>For example, the following command uses the user agent string for Internet Explorer: Save-EvergreenApp -UserAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer)</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"help/en-US/Test-EvergreenApp/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"help/en-US/Test-EvergreenApp/#inputs","title":"INPUTS","text":""},{"location":"help/en-US/Test-EvergreenApp/#systemmanagementautomationpsobject","title":"System.Management.Automation.PSObject","text":"<p>Test-EvergreenApp accepts the output from Get-EvergreenApp.</p>"},{"location":"help/en-US/Test-EvergreenApp/#outputs","title":"OUTPUTS","text":""},{"location":"help/en-US/Test-EvergreenApp/#systemmanagementautomationpsobject_1","title":"System.Management.Automation.PSObject","text":"<p>Provides a list URLs and a true/false result.</p>"},{"location":"help/en-US/Test-EvergreenApp/#notes","title":"NOTES","text":"<p>Site: https://stealthpuppy.com/evergreen</p> <p>Author: Aaron Parker</p> <p>Twitter: @stealthpuppy</p>"},{"location":"help/en-US/Test-EvergreenApp/#related-links","title":"RELATED LINKS","text":"<p>Test installers</p>"},{"location":"help/en-US/about_Evergreen/","title":"Evergreen","text":""},{"location":"help/en-US/about_Evergreen/#about_evergreen","title":"about_Evergreen","text":""},{"location":"help/en-US/about_Evergreen/#short-description","title":"SHORT DESCRIPTION","text":"<p>Return the latest version and download URLs for a set of common Windows applications.</p>"},{"location":"help/en-US/about_Evergreen/#long-description","title":"LONG DESCRIPTION","text":"<p>Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including:</p> <ul> <li>Retrieve the latest version of a particular application to comparing against a version already installed or downloaded</li> <li>Return the URL for the latest version of the application to download it for local installation or deployment to target machines</li> </ul> <p>Evergreen is intended for use in solutions used to automate software deployments. These solutions could be:</p> <ul> <li>Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications</li> <li>Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications</li> <li>Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use</li> <li>Submitting manifests to <code>Winget</code> or <code>Chocolatey</code> or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions</li> </ul> <p>Primary functions in Evergreen are:</p> <ul> <li><code>Get-EvergreenApp</code> - returns details of the latest release of an application including the version number and download URL</li> <li><code>Save-EvergreenApp</code> - simplifies downloading application URLs returned from <code>Get-EvergreenApp</code></li> <li><code>Find-EvergreenApp</code> - lists applications supported by the module</li> </ul>"}]}